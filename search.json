[{"title":"2019年终总结","url":"/blog-next/2020/01/06/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/","content":"<h3 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h3><p>在过去的一年中，我在公司的岗位是前端工程师，负责或者参与开发了小灵，蓝精灵，企业端，服务中心，BI 的 h5 和 pc 端的若干版本，感觉很充实。<br>我们现在的技术栈主要围绕 vue，实现各种 h5 和 pc 的页面</p>\n<h4 id=\"四月前\"><a href=\"#四月前\" class=\"headerlink\" title=\"四月前\"></a>四月前</h4><p>主要负责维护公司的官网，前端是 nodejs 框架 egg，静态资源部署在另一个项目，后来要把活动相关的页面迁移到 jpress，总体是迁移完成了，但是后来由于一些原因没有继续迭代，官网后来用 nuxt 重新开发了新的版本。</p>\n<h4 id=\"四月到八月\"><a href=\"#四月到八月\" class=\"headerlink\" title=\"四月到八月\"></a>四月到八月</h4><p>主要负责了小灵和蓝精灵相关版本的开发，期间遇到的主要问题就是微信相关的问题<br>参与了官网的开发，nuxt 性能很优秀</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZ3cud2lraS8yMDE5LzA0LzI0L2g1JUU5JUExJUI5JUU3JTlCJUFFJUU2JTgwJUJCJUU3JUJCJTkzLw==\">小灵总结<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZ3cud2lraS8yMDE5LzEyLzA2L2g1JUU5JUExJUI5JUU3JTlCJUFFJUU2JTgwJUJCJUU3JUJCJTkzJUVGJUJDJTg4eGwyJUVGJUJDJTg5Lw==\">蓝精灵总结<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZ3cud2lraS8yMDE5LzA1LzIzL251eHQtJUU1JUJDJTgwJUU1JThGJTkxJUU1JUFFJTk4JUU3JUJEJTkxLw==\">官网总结<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"九月十月十一月\"><a href=\"#九月十月十一月\" class=\"headerlink\" title=\"九月十月十一月\"></a>九月十月十一月</h4><p>开发服务中心开票，社保请款，商保请款的相关功能<br>开发过程中尽量在业务层面做组件化，以降低页面的复杂度，增加可维护性，由于业务的复杂，期间也遇到了各种各样的问题，通过咨询同事和询问别人得以解决。</p>\n<h4 id=\"十二月一月\"><a href=\"#十二月一月\" class=\"headerlink\" title=\"十二月一月\"></a>十二月一月</h4><p>先是负责开发了移动端的掌上柚数据，用来 BI 相关数据展示的一个 H5 项目，主要是用 @antv/F2 开发前端的图表，api 都比较全面，自定义也有比较好的支持<br>由于时间紧张所以遗留了一些组件交互上的问题，后期还要抽时间优化掉</p>\n<p>现在在开发 BI 在麒麟里的展示，图表是 @antv/G2, 地图是@antv/L7, 总体 api 设计也比较统一<br>G2 是一套基于图形语法理论的可视化底层引擎，有自定义 canvas 还是 svg 的渲染，目前为了兼容更多的浏览器和数据量不是特别大，选择了 canvas 的渲染<br>L7 是 AntV 团队推出的基于 WebGL 的开源大规模地理空间数据可视分析开发框架<br>L7 在 1 月 6 日发布了自己的 2.0.0 的正式版，值得一提的是，期间遇到过一个 bug，当天提了隔天就发了新版，这种精神值得同行学习<br>而且得益于 ts 的发展，编译器中提示以及警告大大提高了开发效率</p>\n<h3 id=\"关于未来\"><a href=\"#关于未来\" class=\"headerlink\" title=\"关于未来\"></a>关于未来</h3><p>接下来还应该思考如何维护以及迭代和重构一些代码，以保证可维护性，该解耦的组件尽量做到解耦，更多的支持配置化，方便后面修改，思考如何快速响应需求的变化<br>技术方面拓展了 react 和 ts，后面时间要把目前的这些技术搞清楚，习惯函数式，多看几本书，学习编译原理 - -</p>\n<h3 id=\"关于生活\"><a href=\"#关于生活\" class=\"headerlink\" title=\"关于生活\"></a>关于生活</h3><p>平淡如水</p>\n","categories":["总结"]},{"title":"AMD和CMD","url":"/blog-next/2020/04/06/AMD%E5%92%8CCMD/","content":"<p>当我们了解了 <a href=\"\">CommonJS</a>以后，CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。<br>由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。<br>但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式。为什么呢？</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;math&#x27;</span>);</span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>第二行 math.add(2, 3)，在第一行 require(&#39;math&#39;) 之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。<br>对于浏览器，这是一个大问题，因为模块都放在服务器端。等待时间取决于网速的快慢，可能要等很长时间，浏览器处理“假死”状态。</p>\n<p>因此，浏览器端的模块，不能采用“同步加载”，只能采用“异步加载”。</p>\n<h1 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZGpzL2FtZGpzLWFwaS9ibG9iL21hc3Rlci9BTUQubWQ=\">AMD 规范<i class=\"fa fa-external-link-alt\"></i></span>则是异步加载模块，允许指定回调函数。因此浏览器端一般采用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZGpzL2FtZGpzLWFwaS9ibG9iL21hc3Rlci9BTUQubWQ=\">AMD 规范<i class=\"fa fa-external-link-alt\"></i></span>。<br>AMD(Asynchronous module definition) ： 异步模块定义。</p>\n<p>类似的还有 CommonJS Modules/2.0 规范，是 BravoJS 在推广过程中对模块定义的规范化产出。<br>CMD(Common module definition)：通用模块定义。<br>目前这些规范的实现都能达成<strong>浏览器端模块化开发的目的</strong>。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">服务端JS</th>\n<th align=\"center\">浏览器端JS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">相同的代码需要多次执行</td>\n<td align=\"center\">代码需要从一个服务器端分发到多个客户端执行</td>\n</tr>\n<tr>\n<td align=\"center\">CPU 和内存资源是瓶颈</td>\n<td align=\"center\">宽带是瓶颈</td>\n</tr>\n<tr>\n<td align=\"center\">加载时从磁盘中加载</td>\n<td align=\"center\">加载时需要通过网络加载</td>\n</tr>\n</tbody></table>\n<p>AMD 的诞生，就是为了解决这两个问题：<br>1.实现 js 文件的异步加载，避免网页失去响应<br>2.管理模块之间的依赖性，便于代码的编写和维护</p>\n<p>AMD(异步模块定义)主要为前端 JS 的表现指定规范。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>\n<p>AMD 也采用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZGpzL2FtZGpzLWFwaS93aWtpL3JlcXVpcmU=\">require()<i class=\"fa fa-external-link-alt\"></i></span> 语句加载模块，但是不同于 CommonJS，它要求两个参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">require([module], callback);</span><br></pre></td></tr></table></figure>\n<p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数 callback，则是加载成功之后的回调函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">require([&#x27;math&#x27;], function (math) &#123;</span><br><span class=\"line\">  math.add(2, 3);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>实现 AMD 规范的加载器其实是挺多的，目前，主要有两个 Javascript 库实现了 AMD 规范：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlcXVpcmVqcy9yZXF1aXJlanM=\">require.js<i class=\"fa fa-external-link-alt\"></i></span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2N1am9qcy9jdXJs\">curl.js<i class=\"fa fa-external-link-alt\"></i></span>。不过多数人还是用 require.js 。<br>另外如果对 ES6 的模块感兴趣，可以考虑 <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20vaGF4L215Lmpz\">my.js<i class=\"fa fa-external-link-alt\"></i></span> ，是按照 ES6 草案的 module/loader 规范实现的。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZGpzL2FtZGpzLWFwaS93aWtpL0FNRA==\">AMD<i class=\"fa fa-external-link-alt\"></i></span> 是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlcXVpcmVqcy9yZXF1aXJlanM=\">require.js<i class=\"fa fa-external-link-alt\"></i></span> 在推广过程中对模块定义的规范化产出。</p>\n<p>推荐学习 <span class=\"exturl\" data-url=\"aHR0cDovL3JlcXVpcmVqcy5vcmcv\">require.js<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<h2 id=\"AMD-模块的写法\"><a href=\"#AMD-模块的写法\" class=\"headerlink\" title=\"AMD 模块的写法\"></a>AMD 模块的写法</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlcXVpcmVqcy9yZXF1aXJlanM=\">require.js<i class=\"fa fa-external-link-alt\"></i></span> 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。<br>具体来说，就是模块必须采用特定的 define() 函数来定义。如果一个模块不依赖其他模块。那么可以直接定义在 define() 函数之中。<br>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// math.js</span><br><span class=\"line\">define(function ()&#123;</span><br><span class=\"line\">　var add = function (x,y)&#123;</span><br><span class=\"line\">　　return x+y;</span><br><span class=\"line\">　&#125;;</span><br><span class=\"line\">　return &#123;</span><br><span class=\"line\">　　add: add</span><br><span class=\"line\">　&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>加载方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// main.js</span><br><span class=\"line\">require([&#x27;math&#x27;], function (math)&#123;</span><br><span class=\"line\">　alert(math.add(1,1));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果这个模块还依赖其他模块，那么 define() 函数的第一个参数，必须是一个数组，指明该模块的依赖性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([&#x27;myLib&#x27;], function(myLib)&#123;</span><br><span class=\"line\">　function foo()&#123;</span><br><span class=\"line\">　　myLib.doSomething();</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">　return &#123;</span><br><span class=\"line\">　　foo : foo</span><br><span class=\"line\">　&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当 require() 函数加载上面这个模块的时候，就会先加载 myLib.js 文件。</p>\n<h2 id=\"加载非规范的模块\"><a href=\"#加载非规范的模块\" class=\"headerlink\" title=\"加载非规范的模块\"></a>加载非规范的模块</h2><p>理论上，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlcXVpcmVqcy9yZXF1aXJlanM=\">require.js<i class=\"fa fa-external-link-alt\"></i></span> 加载的模块，必须是按照 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZGpzL2FtZGpzLWFwaS9ibG9iL21hc3Rlci9BTUQubWQ=\">AMD 规范<i class=\"fa fa-external-link-alt\"></i></span>、用 define() 函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如 jQuery ）符合 AMD 规范，更多的库并不符合。那么，require.js 是否能够加载非规范的模块呢？<br>回答是可以的。<br>这样的模块在用 require() 加载之前，要先用 require.config() 方法，定义它们的一些特征。<br>举例来说，underscore 和 backbone 这两个库，都没有采用 AMD 规范编写。如果要加载它们的话，必须先定义它们的特征。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">　shim: &#123;</span><br><span class=\"line\">　　&#x27;underscore&#x27;: &#123;</span><br><span class=\"line\">　　　exports: &#x27;_&#x27;</span><br><span class=\"line\">　　&#125;,</span><br><span class=\"line\">　　&#x27;backbone&#x27;: &#123;</span><br><span class=\"line\">　　　deps: [&#x27;underscore&#x27;, &#x27;jquery&#x27;],</span><br><span class=\"line\">　　　exports: &#x27;Backbone&#x27;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>require.config() 接受一个配置对象，这个对象除了有前面说过的 paths 属性之外，还有一个 shim 属性，专门用来配置不兼容的模块。具体来说，每个模块要定义：<br>（1）exports 值（输出的变量名），表明这个模块外部调用时的名称；<br>（2）deps 数组，表明该模块的依赖性。<br>比如，jQuery 的插件可以这样定义：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">shim: &#123;</span><br><span class=\"line\">　&#x27;jquery.scroll&#x27;: &#123;</span><br><span class=\"line\">　　deps: [&#x27;jquery&#x27;],</span><br><span class=\"line\">　　exports: &#x27;jQuery.fn.scroll&#x27;</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlYWpzL3NlYWpzL2lzc3Vlcy8yNzc=\">CMD<i class=\"fa fa-external-link-alt\"></i></span> 是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlYWpzL3NlYWpz\">sea.js<i class=\"fa fa-external-link-alt\"></i></span> 在推广过程中对模块定义的规范化产出。</p>\n<h3 id=\"CMD-模块定义\"><a href=\"#CMD-模块定义\" class=\"headerlink\" title=\"CMD 模块定义\"></a>CMD 模块定义</h3><p>在 CMD 规范中，一个模块就是一个文件。define 是一个全局函数，用来定义模块。<br>define 接受 factory 参数，factory 可以是一个函数，也可以是一个对象或字符串。<br>factory 为对象、字符串时，表示模块的接口就是该对象、字符串。比如可以定义一个 JSON 数据模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(&#123;<span class=\"string\">&quot;foo&quot;</span>: <span class=\"string\">&quot;bar&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>也可以通过字符串定义模板模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">&#x27;I am a template.My name is &#123;&#123;name&#125;&#125;.&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>factory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。<br>factory 是一个函数，有三个参数，function(require, exports, module)<br>1、require 是一个方法，接受模块标识作为唯一参数，用来获取其他模块提供的接口：require(id)<br>2、exports 是一个对象，用来向外提供模块接口<br>3、module 是一个对象，上面存储了与当前模块相关联的一些属性和方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>, <span class=\"built_in\">exports</span>, <span class=\"built_in\">module</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>);</span><br><span class=\"line\">  a.doSomething();</span><br><span class=\"line\">  <span class=\"comment\">// 依赖就近书写，什么时候用到什么时候引入</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./b&#x27;</span>);</span><br><span class=\"line\">  b.doSomething();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>建议写一写 SeaJS 的 CMD 规范，与 AMD 非常类似，在国内的影响力非常大，但是个人觉得 SeaJS 比 RequireJS 好很多，另外由于是国人开发的，交流也非常方便，可以看到 github 上的更新、互动非常频繁。</p>\n<h1 id=\"AMD-与-CMD-的区别\"><a href=\"#AMD-与-CMD-的区别\" class=\"headerlink\" title=\"AMD 与 CMD 的区别\"></a>AMD 与 CMD 的区别</h1><p>区别：</p>\n<ol>\n<li>对于依赖的模块，AMD 是<strong>提前执行</strong>，CMD 是<strong>延迟执行</strong>。不过 RequireJS 从2.0开始，也改成了可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.</li>\n<li>CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong></li>\n</ol>\n","categories":["js"],"tags":["js","js模块化"]},{"title":"ES6 三点运算符和新版字符串","url":"/blog-next/2019/08/04/ES6%E4%B8%89%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%96%B0%E7%89%88%E5%AD%97%E7%AC%A6%E4%B8%B2/","content":"<h2 id=\"三点运算符\"><a href=\"#三点运算符\" class=\"headerlink\" title=\"三点运算符\"></a>三点运算符</h2><h3 id=\"函数的默认参数\"><a href=\"#函数的默认参数\" class=\"headerlink\" title=\"函数的默认参数\"></a>函数的默认参数</h3><pre><code>function(x = 10)\n</code></pre>\n<h3 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h3><pre><code>Array.prototype.slice.call(arguments, 2)\nArray.from(arguments).slice(2)\nfunction fn(a, b, ...c)\n</code></pre>\n<h3 id=\"展开操作符\"><a href=\"#展开操作符\" class=\"headerlink\" title=\"展开操作符\"></a>展开操作符</h3><pre><code>[...iteralableObject] = [1,2,3]\n[0, ...iteralableObject, 1, 2]\n</code></pre>\n<h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><pre><code>[a, b] = [b, a]\n[a, b, ...rest] = [1, 2, 3]\nlet &#123;name, age&#125; = person\n[a = 5, b = 7] = [1]\n[a, b] = f()\n[a, ,b] = f()\n&#123;p: foo, q: bar&#125; = o\nlet &#123;a = 10, b = 5&#125; = &#123;a: 4&#125;\nlet &#123;a:aa = 10, b:bb = 5&#125; = &#123;a: 3&#125;;\n对象的浅拷贝（JSON， ...，Object.assign）\n对象合并\n</code></pre>\n<h3 id=\"对象属性增强\"><a href=\"#对象属性增强\" class=\"headerlink\" title=\"对象属性增强\"></a>对象属性增强</h3><pre><code>let obj = &#123; x, y &#125;\nobj = &#123;[&#39;baz&#39;+qux()]: 33&#125;\n函数属性可以缩写\n</code></pre>\n<h2 id=\"新版字符串\"><a href=\"#新版字符串\" class=\"headerlink\" title=\"新版字符串\"></a>新版字符串</h2><h3 id=\"多行字符串，插值\"><a href=\"#多行字符串，插值\" class=\"headerlink\" title=\"多行字符串，插值\"></a>多行字符串，插值</h3><pre><code>let a = `a$&#123;name&#125;\n         b\n        `\n</code></pre>\n<h3 id=\"函数接字符串\"><a href=\"#函数接字符串\" class=\"headerlink\" title=\"函数接字符串\"></a>函数接字符串</h3><pre><code>fn`$&#123;name&#125; 是一个 $&#123;person&#125;`\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N0eWxlZC1jb21wb25lbnRzL3N0eWxlZC1jb21wb25lbnRz\">style.component<i class=\"fa fa-external-link-alt\"></i></span>就是这个用法</p>\n<pre><code>const Title = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n`;\n</code></pre>\n","categories":["js"],"tags":["es6","G"]},{"title":"BFC 和 IFC","url":"/blog-next/2019/05/18/BFC-%E5%92%8C-IFC/","content":"<h3 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h3><blockquote>\n<p>一个bfc包含内部所有元素的内容，除了后代也是bfc的元素</p>\n</blockquote>\n<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ol>\n<li>如果它是 BFC，就会父元素把子元素包起来</li>\n</ol>\n<p><em>这不是清除浮动，这是bfc</em><br>2. 兄弟元素就会划清界限，不会重叠<br><em>float + div 做自适应布局，第一个元素float，第二个bfc，就会两个分开</em></p>\n<h3 id=\"下面这些会触发-BFC\"><a href=\"#下面这些会触发-BFC\" class=\"headerlink\" title=\"下面这些会触发 BFC\"></a>下面这些会触发 BFC</h3><ol>\n<li>根元素</li>\n<li>浮动元素</li>\n<li>定位为 absolute 或者 fixed</li>\n<li>display: inline-block</li>\n<li>display: table-cell</li>\n<li>overflow 不是 visible 的元素</li>\n<li>display: flow-root （css专门用来bfc的）</li>\n</ol>\n<h3 id=\"IFC\"><a href=\"#IFC\" class=\"headerlink\" title=\"IFC\"></a>IFC</h3><p>主要有三个点</p>\n<ol>\n<li><p>font-size<br>一个字体会定义一个 em-squre, 他是用来盛放字体的容器，一般是宽高为 100 的相对单位</p>\n</li>\n<li><p>line-height<br>一个内联元素真实字占的高度，字体在其中自己居中就行了</p>\n</li>\n<li><p>vertical-align<br>top middle bottom text-top text-bottom 不同字体是无法对齐的</p>\n</li>\n</ol>\n","categories":["css"],"tags":["G","css"]},{"title":"ES6之Promise用法","url":"/blog-next/2019/08/11/ES6%E4%B9%8BPromise%E7%94%A8%E6%B3%95/","content":"<h3 id=\"常规用法\"><a href=\"#常规用法\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h3><pre><code>function getInfo(name) &#123;\n  return new Promise((resolve, reject) =&gt; &#123;\n    if (name===&#39;Gerritv&#39;) &#123;\n      resolve(&#39;Gerritv&#39;)\n    &#125; else &#123;\n      reject()\n    &#125;\n  &#125;)\n&#125;\n\nfunction print(data) &#123;\n  return new Promise((resolve, reject) =&gt; &#123;\n    console.log(data)\n    resolve(data)\n  &#125;)\n&#125;\n\nfunction getFriendInfo() &#123;\n  return new Promise((resolve, reject) =&gt; &#123;\n    console.log(&#39;第二次获取用户信息&#39;)\n    resolve(&#39;Macel&#39;)\n  &#125;)\n&#125;\n\ngetInfo(&#39;Gerritv&#39;)\n  .then(print)\n  .then(getFriendInfo)\n  .then(print)\n</code></pre>\n<h3 id=\"then-的两个参数\"><a href=\"#then-的两个参数\" class=\"headerlink\" title=\"then 的两个参数\"></a>then 的两个参数</h3><pre><code>function getInfo(name) &#123;\n  return new Promise((resolve, reject) =&gt; &#123;\n    if (name === &#39;Gerritv&#39;) &#123;\n      resolve(&#39;Gerritv&#39;)\n    &#125; else &#123;\n      reject()\n    &#125;\n  &#125;)\n&#125;\n\ngetInfo(&#39;macel&#39;).then((d) =&gt; &#123; console.log(d) &#125;, () =&gt; &#123; console.log(&#39;不认识&#39;) &#125;)\n</code></pre>\n<h3 id=\"处理-then-正确和错误的回调\"><a href=\"#处理-then-正确和错误的回调\" class=\"headerlink\" title=\"处理 .then 正确和错误的回调\"></a>处理 .then 正确和错误的回调</h3><pre><code>function getInfo(name) &#123;\n  return new Promise((resolve, reject) =&gt; &#123;\n    if (name === &#39;Gerritv&#39;) &#123;\n      resolve([&#39;Gerritv&#39;, 18])\n    &#125; else &#123;\n      reject(name)\n    &#125;\n  &#125;)\n&#125;\n\nfunction getFriendInfo(name) &#123;\n  return new Promise((resolve, reject) =&gt; &#123;\n    if (name === &#39;Gerritv&#39;) &#123;\n      resolve(&#39;Macel, Bik, lyu&#39;)\n    &#125; else &#123;\n      reject()\n    &#125;\n  &#125;)\n&#125;\n\nfunction printInfo(data) &#123;\n  console.log(data)\n  return Promise.resolve(data[0])\n&#125;\n\ngetInfo(&#39;macel&#39;)\n  .then(printInfo, e =&gt; &#123;\n    console.log(&#39;不认识&#39; + e)\n    // 如果后面的不想执行，需要\n    return Promise.reject(&#39;第一次出错了&#39;)\n  &#125;)\n  .then(getFriendInfo, e =&gt; &#123;\n    console.log(e)\n    // 这里可以解决第一次的出错\n    return Promise.resolve(&#39;Gerritv&#39;) // 重新正确了\n  &#125;)\n  .then(printInfo, () =&gt; &#123;\n    console.log(&#39;不认识2&#39;)\n  &#125;)\n</code></pre>\n<h3 id=\"把-promise-返回结果用-await-接受\"><a href=\"#把-promise-返回结果用-await-接受\" class=\"headerlink\" title=\"把 promise 返回结果用 await 接受\"></a>把 promise 返回结果用 await 接受</h3><pre><code>let x = await getInfo(&#39;Gerritv&#39;)\nconsole.log(x)\n// 如果出错\ntry &#123;\n  let x = await getInfo(&#39;macle&#39;)\n  console.log(x)\n&#125; catch (error) &#123;\n  console.log(&#39;出错了&#39;+error)\n&#125;\n</code></pre>\n","categories":["js"],"tags":["es6","G"]},{"title":"ES6之Symbol","url":"/blog-next/2020/08/06/ES6%E4%B9%8BSymbol/","content":"<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h3><pre><code>let race = &#123;\n  b: Symbol(),\n  y: Symbol(),\n  w: Symbol()\n&#125;\n</code></pre>\n<h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ol>\n<li>Symbol 值通过 Symbol 函数生成，使用 typeof，结果为 &#39;symbol&#39;</li>\n<li>Symbol 函数钱不能使用 new 命令，否则会报错，这是因为生成的 Symbol 是一个原始类型的值，不是对象</li>\n<li>instanceof 的值为 false</li>\n<li>Symbol 函数可以接受一个字符串作为参数，表示对 Symbol实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分</li>\n<li>如果 Symbol 的参数是一个对象，就会调用该对象的 toString 方法，将其转为字符串，然后才生成一个 Symbol 值</li>\n<li>Symbol 函数的参数只是表示对当前Symbol 值的描述，相同参数的 Symbol 函数的返回值是不相等的</li>\n<li>Symbol 值不能与其他类型的值进行运算，会报错</li>\n<li>Symbol 值可以显示转为字符串</li>\n<li>Symbol 值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性</li>\n<li>Symbol 作为属性名，该属性不会出现在 <code>for in</code>  <code>for of</code>循环中，也不会被 <code>Object.keys()</code> <code>Object.getOwnPropertyNames()</code> <code>JSON.stringify()</code> 返回。但是，它也不是私有属性，有一个 <code>Object.getOwnPropertySymbols</code> 方法，可以获取指定对象的所有 <code>Symbol</code> 属性名</li>\n<li>如果我们希望使用同一个 Symbol 值，可以用 <code>Symbol.for</code>，它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值</li>\n<li>Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key</li>\n</ol>\n<p>? Symbol 是不是一个引用，Symbol.iterator 代表什么，因为能访问， 所以 Symbol 可以理解成是一个引用</p>\n","categories":["js"],"tags":["es6","G"]},{"title":"ES6之Reflect和proxy","url":"/blog-next/2019/08/16/ES6%E4%B9%8BReflect%E5%92%8Cproxy/","content":"<h2 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h2><h3 id=\"Reflect-get-target-name-receiver\"><a href=\"#Reflect-get-target-name-receiver\" class=\"headerlink\" title=\"Reflect.get(target, name, receiver)\"></a>Reflect.get(target, name, receiver)</h3><pre><code>var myObject = &#123;\n  foo: 1,\n  bar: 2,\n  get baz() &#123;\n    return this.foo + this.bar;\n  &#125;,\n&#125;;\n\nvar myReceiverObject = &#123;\n  foo: 4,\n  bar: 4,\n&#125;;\n\nReflect.get(myObject, &#39;baz&#39;, myReceiverObject) // 8\n</code></pre>\n<h3 id=\"Reflect-set-target-name-value-receiver\"><a href=\"#Reflect-set-target-name-value-receiver\" class=\"headerlink\" title=\"Reflect.set(target, name, value, receiver)\"></a>Reflect.set(target, name, value, receiver)</h3><pre><code>var myObject = &#123;\n  foo: 1,\n  set bar(val) &#123;\n  return this.foo = val    \n  &#125;\n&#125;\nvar o = &#123; foo: 2, bar: 3&#125;\nReflect.set(myObject,  &#39;baz&#39;, 127987978978979797, o)\n</code></pre>\n<h3 id=\"其他的静态方法\"><a href=\"#其他的静态方法\" class=\"headerlink\" title=\"其他的静态方法\"></a>其他的静态方法</h3><pre><code>Reflect.has(target, name)\n=== name in target\n\nReflect.deleteProperty(target, name)\n=== delete target[name]\n\nReflect.construct(target, args)\n=== new target(...args)\n\nReflect.getPrototypeOf(obj)\n=== Object.getPrototypeOf(obj)\n\nReflect.setPrototypeOf(obj, newProto)\n=== Object.setPrototypeOf(obj, newProto)\n\nReflect.apply(func, thisArg, args) \n=== Function.prototype.apply.call(func, thiArg, args)\n\nReflect.defineProperty(target, propertyKey, attributes)\n=== Object.defineProperty(taget, propertyKey, attributes)\n\nReflect.getOwnPropertyDescriptor(target, propertyKey)\n=== Object.getOwnPropertyDescriptor(target, propertyKey)\n\nReflect.isExtensible(target)\n=== Object.isExtensible(target)\n\nReflect.preventExtensions(target)\n=== Object.preventExtensions(target)\n\nReflect.ownKeys(target)\n=== Objecct.getOwnPropertyNames(或者 Object.keys()) + Object.getOwnPropertySymbols() \n</code></pre>\n<h3 id=\"使用-proxy-实现观察者模式\"><a href=\"#使用-proxy-实现观察者模式\" class=\"headerlink\" title=\"使用 proxy 实现观察者模式\"></a>使用 proxy 实现观察者模式</h3><p>观察者模式是指函数自动观察数据对象，一旦对象有变化，函数就会自动执行</p>\n<p>我们需要两个函数，observable 和 observe，observable 返回一个原始对象的 Proxy 代理，拦截赋值操作，触发充当观察者的各个函数</p>\n<pre><code>const queue = new Set()\nconst observe = fn =&gt; queue.add(fn)\nconst observable = obj =&gt; new Proxy(obj, &#123;set&#125;)\n\nfunction set(target, key, value, receiver) &#123;\n  const result = Reflect.set(target, key, value, receiver)\n  queue.forEach(observer =&gt; observer())\n&#125;\n\nconst person = observable(&#123;\n  name； &#39;GerritV&#39;,\n  age； 18\n&#125;)\n\nfunction print() &#123;\n  console.log(`$&#123;person.name&#125;, $&#123;person.age&#125;`)\n&#125;\n\nobserve(print)\n\nperson.name=&#39;frank&#39;\n</code></pre>\n<h2 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h2><p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种元编程，即对编程语言进行编程</p>\n<p>Proxy 可以理解成，在目标对象之间架设一层拦截，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写，可以译为代理</p>\n<h3 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get()\"></a>get()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">  name: &quot;张三&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var proxy = new Proxy(person, &#123;</span><br><span class=\"line\">  get: function(target, property) &#123;</span><br><span class=\"line\">    if (property in target) &#123;</span><br><span class=\"line\">      return target[property];</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      throw new ReferenceError(&quot;Property \\&quot;&quot; + property + &quot;\\&quot; does not exist.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name // &quot;张三&quot;</span><br><span class=\"line\">proxy.age // 抛出一个错误</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set()\"></a>set()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let validator = &#123;</span><br><span class=\"line\">  set: function(obj, prop, value) &#123;</span><br><span class=\"line\">    if (prop === &#x27;age&#x27;) &#123;</span><br><span class=\"line\">      if (!Number.isInteger(value)) &#123;</span><br><span class=\"line\">        throw new TypeError(&#x27;The age is not an integer&#x27;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (value &gt; 200) &#123;</span><br><span class=\"line\">        throw new RangeError(&#x27;The age seems invalid&#x27;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对于满足条件的 age 属性以及其他属性，直接保存</span><br><span class=\"line\">    obj[prop] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">let person = new Proxy(&#123;&#125;, validator);</span><br><span class=\"line\"></span><br><span class=\"line\">person.age = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">person.age // 100</span><br><span class=\"line\">person.age = &#x27;young&#x27; // 报错</span><br><span class=\"line\">person.age = 300 // 报错</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var twice = &#123;</span><br><span class=\"line\">  apply (target, ctx, args) &#123;</span><br><span class=\"line\">    return Reflect.apply(...arguments) * 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function sum (left, right) &#123;</span><br><span class=\"line\">  return left + right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var proxy = new Proxy(sum, twice);</span><br><span class=\"line\">proxy(1, 2) // 6</span><br><span class=\"line\">proxy.call(null, 5, 6) // 22</span><br><span class=\"line\">proxy.apply(null, [7, 8]) // 30</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现-web-服务的客户端\"><a href=\"#实现-web-服务的客户端\" class=\"headerlink\" title=\"实现 web 服务的客户端\"></a>实现 web 服务的客户端</h3><p>Proxy 对象可以拦截目标对象的任意属性，这使得它很适合来写 web 服务的客户端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const service = createWebService(&#x27;http://example.com/data&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">service.employees().then(json =&gt; &#123;</span><br><span class=\"line\">  const emplyees = JSON.parse(json)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码新建了一个 web 服务的端口，这个接口返回各种数据。Proxy 可以拦截这个对象的任意属性，所以不用为每一种数据写一个适配方法，只要写一个 proxy 拦截就好了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function createWebService(baseUrl) &#123;</span><br><span class=\"line\">  return new Proxy(&#123;&#125;, &#123;</span><br><span class=\"line\">    get(target, propKey, receiver) &#123;</span><br><span class=\"line\">      return () =&gt; httpGet(baseUrl+&#x27;/&#x27;+propKey)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这个例子也演示了get返回函数的操作</strong></p>\n","categories":["js"],"tags":["es6","G"]},{"title":"ES6之async和await","url":"/blog-next/2019/08/12/ES6%E4%B9%8Basync%E5%92%8Cawait/","content":"<h3 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h3><blockquote>\n<p>async function 用来定义一个返回 AsyncFunction 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 Promise 返回其结果。如果你在代码中使用了异步函数，就会发现它的语法和结构会更像是标准的同步函数。</p>\n</blockquote>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><pre><code>function fn() &#123;\n  return new Promise((resolve, reject) =&gt; &#123;\n    setTimeout(()=&gt;&#123;\n      let n = Math.floor(Math.random()*6+1)\n      if (n&gt;3) &#123;\n        resolve(n)\n      &#125; else &#123;\n        reject(n)\n      &#125;\n    &#125;,100)\n  &#125;)\n&#125;\n\nasync function test() &#123;\n  try &#123;\n    let n = await fn()\n    console.log(&#39;success&#39;, n)\n  &#125; catch (e) &#123;\n    console.log(&#39;error&#39;, e)\n  &#125;\n&#125;\n\ntest()\n</code></pre>\n<h3 id=\"串形异步请求\"><a href=\"#串形异步请求\" class=\"headerlink\" title=\"串形异步请求\"></a>串形异步请求</h3><pre><code>function fn() &#123;\n  return new Promise((resolve, reject) =&gt; &#123;\n    setTimeout(()=&gt;&#123;\n      let n = Math.floor(Math.random()*6+1)\n      if (n&gt;3) &#123;\n        resolve(n)\n      &#125; else &#123;\n        reject(n)\n      &#125;\n    &#125;,100)\n  &#125;)\n&#125;\n\nasync function test() &#123;\n  try &#123;\n    let n = await fn()\n    console.log(&#39;success&#39;, n)\n    if (n) &#123;\n      test2()\n    &#125;\n  &#125; catch (e) &#123;\n    console.log(&#39;error&#39;, e)\n  &#125;\n&#125;\n\nasync function test2() &#123;\n  try &#123;\n    let n = await fn()\n    console.log(&#39;success&#39;, n)\n  &#125; catch (e) &#123;\n    console.log(&#39;error&#39;, e)\n  &#125;\n&#125;\n\ntest()\n</code></pre>\n<h3 id=\"同时处理多个请求\"><a href=\"#同时处理多个请求\" class=\"headerlink\" title=\"同时处理多个请求\"></a>同时处理多个请求</h3><pre><code>function fn() &#123;\n  return new Promise((resolve, reject) =&gt; &#123;\n    setTimeout(()=&gt;&#123;\n      let n = Math.floor(Math.random()*6+1)\n      if (n&gt;3) &#123;\n        resolve(n)\n      &#125; else &#123;\n        reject(n)\n      &#125;\n    &#125;,100)\n  &#125;)\n&#125;\n\nasync function test() &#123;\n  try &#123;\n    let n = await Promise.all([fn(), fn()])\n    console.log(&#39;success&#39;, n) // [4, 6]\n  &#125; catch (e) &#123;\n    console.log(&#39;error&#39;, e)\n  &#125;\n&#125;\n\ntest()\n</code></pre>\n<h3 id=\"Promise-all-和-Promise-race-的区别\"><a href=\"#Promise-all-和-Promise-race-的区别\" class=\"headerlink\" title=\"Promise.all 和 Promise.race 的区别\"></a>Promise.all 和 Promise.race 的区别</h3><p>先说 all</p>\n<pre><code>function fn() &#123;\n  return new Promise((resolve, reject) =&gt; &#123;\n    setTimeout(()=&gt;&#123;\n      let n = Math.floor(Math.random()*6+1)\n      if (n&gt;3) &#123;\n        resolve(n)\n        console.log(n,&#39;---&#39;)\n      &#125; else &#123;\n        console.log(n,&#39;+++&#39;)\n        reject(n)\n      &#125;\n    &#125;,100)\n  &#125;)\n&#125;\n\nfunction test() &#123;\n  Promise.all([fn(), fn()]).then(res=&gt;&#123;\n    console.log(&#39;all success&#39;, res)\n  &#125;, e=&gt;&#123;\n    console.log(&#39;has error&#39;, e)\n  &#125;)\n&#125;\ntest()\n</code></pre>\n<p>成功时这样返回</p>\n<pre><code>// 4\n// &quot;---&quot;\n// 6\n// &quot;---&quot;\n// &quot;all success&quot;\n// [4, 6]\n</code></pre>\n<p>失败时这样返回</p>\n<pre><code>// 1\n// &quot;+++&quot;\n// &quot;has error&quot;\n// 1\n// 1\n// &quot;+++&quot;\n</code></pre>\n<p>再说 race</p>\n<p>成功时</p>\n<pre><code>// 5\n// &quot;---&quot;\n// &quot;all success&quot;\n// 5\n// 2\n// &quot;+++&quot;\n</code></pre>\n<p>失败时</p>\n<pre><code>// 1\n// &quot;+++&quot;\n// &quot;has error&quot;\n// 1\n// 6\n// &quot;---&quot;\n</code></pre>\n<p>从返回值我们可以看出</p>\n<ul>\n<li>all 返回的是一个数组，</li>\n<li>race 返回一个值</li>\n<li>all 在两个都执行成功之后会执行 .then</li>\n<li>race 在任意一个执行成功之后会执行 .then</li>\n<li>all 和 race 都会在任意一个发生错误时执行 catch，并且另外的 promise 依然会执行</li>\n</ul>\n","categories":["js"],"tags":["es6","G"]},{"title":"ES6之let和const","url":"/blog-next/2019/07/30/ES6%E4%B9%8Blet%E5%92%8Cconst/","content":"<h3 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h3><ul>\n<li>let 作用域在{}之间</li>\n<li>在 let a 之前使用，报错</li>\n<li>重复 let 报错</li>\n<li>const 只有一次赋值机会，而且必须立马赋值</li>\n</ul>\n<h3 id=\"var-变量提升\"><a href=\"#var-变量提升\" class=\"headerlink\" title=\"var 变量提升\"></a>var 变量提升</h3><pre><code>function fn() &#123;\n  if (true) &#123;\n    console.log(a)\n  &#125; else &#123;\n    var a = 1\n  &#125;\n&#125;\n</code></pre>\n<p>相当于这样</p>\n<pre><code>function fn() &#123;\n  var a\n  if (true) &#123;\n    console.log(a)\n  &#125; else &#123;\n    a = 1\n  &#125;\n&#125;\nconsole.log(a)\n</code></pre>\n<h3 id=\"想办法不暴露全局变量\"><a href=\"#想办法不暴露全局变量\" class=\"headerlink\" title=\"想办法不暴露全局变量\"></a>想办法不暴露全局变量</h3><p>可以用立即执行函数</p>\n<pre><code>(function()&#123;\n  var a = 1\n  window.xxx = function() &#123; console.log(a) &#125;\n&#125;())\n</code></pre>\n<p>或者 let</p>\n<pre><code>&#123;\n  let a = 1\n  window.xxx = function() &#123; console.log(a) &#125;\n&#125;\n</code></pre>\n<h3 id=\"let-临时死区（temp-dead-zone）\"><a href=\"#let-临时死区（temp-dead-zone）\" class=\"headerlink\" title=\"let 临时死区（temp dead zone）\"></a>let 临时死区（temp dead zone）</h3><pre><code>&#123;\n  let a = 1\n  &#123;\n    console.log(a) // 如果一个块中有变量声明，必须先声明再使用\n    let a = 2\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"一些题\"><a href=\"#一些题\" class=\"headerlink\" title=\"一些题\"></a>一些题</h3><h4 id=\"修改全局变量\"><a href=\"#修改全局变量\" class=\"headerlink\" title=\"修改全局变量\"></a>修改全局变量</h4><pre><code>&#123;\n  var value = 1\n\n  function foo() &#123;\n    console.log(value)\n  &#125;\n\n  function bar() &#123;\n    value = 2\n\n    foo()\n  &#125;\n  bar()\n&#125;\n</code></pre>\n<p>注意和词法作用域做区分</p>\n<pre><code>&#123;\nvar value = 1\n\nfunction foo() &#123;\n  console.log(value)\n&#125;\n\nfunction bar() &#123;\nvar value = 2\n    foo()\n&#125;\nbar()\n&#125;\n</code></pre>\n<h3 id=\"for-循环中的全局变量\"><a href=\"#for-循环中的全局变量\" class=\"headerlink\" title=\"for 循环中的全局变量\"></a>for 循环中的全局变量</h3><pre><code>&#123;\n  for (var index = 0; index &lt; 6; index++) &#123;\n  &#125;\n  console.log(index)  // 输出 6\n&#125;\n</code></pre>\n<p>另一种情况</p>\n<pre><code>&#123;\n  for (var index = 0; index &lt; 6; index++) &#123;\n    function fn() &#123;\n      console.log(index)\n    &#125;\n    button.onclick = fn // 输出 6\n  &#125;\n&#125;\n</code></pre>\n<p>这种情况换一种写法</p>\n<pre><code>&#123;\n  for (var index = 0; index &lt; 6; index++) &#123;\n    button[index].onclick = function() &#123;\n      console.log(index) // 输出 6\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>我们用一个变量把 index 保存下来</p>\n<pre><code>&#123;\n  for (var index = 0; index &lt; 6; index++) &#123;\n    j = index\n    button[j].onclick = function() &#123;\n      console.log(j)  // 这个时候输出 5，一共维护两个变量，index 和 j，index会++\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>使用 let 作为局部变量</p>\n<pre><code>&#123;\n  for (var index = 0; index &lt; 6; index++) &#123;\n    let j = index // 这就很关键了，维护 6 个 j\n    button[j].onclick = function() &#123;\n      console.log(j)  // 0 1 2 3 4 5\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>也可以使用函数来使用局部变量</p>\n<pre><code>&#123;\n  for (var index = 0; index &lt; 6; index++) &#123;\n    (function()&#123;\n      var j = arguments[0] // 这样在函数中维护 6 个 j\n      button[j].onclick = function() &#123;\n        console.log(j)  // 0 1 2 3 4 5\n      &#125;\n    &#125;)(index)\n  &#125;\n&#125;\n&#123;\n  for (var index = 0; index &lt; 6; index++) &#123;\n    (function(j)&#123;\n      button[j].onclick = function() &#123;\n        console.log(j)  // 0 1 2 3 4 5\n      &#125;\n    &#125;)(index)\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"for-循环魔法\"><a href=\"#for-循环魔法\" class=\"headerlink\" title=\"for 循环魔法\"></a>for 循环魔法</h3><p>我们知道其实最简单的写法是这样</p>\n<pre><code>&#123;\n  for (let index = 0; index &lt; 6; index++) &#123;\n    button[index].onclick = function() &#123;\n      console.log(index)  // 0 1 2 3 4 5\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>但其实 js 帮我们创建了一个额外的变量 _index, 因为 index 并不在块里<br>for 循环在执行的时候把 _index 赋给 index，最后执行完后再把 index 赋给 _index</p>\n<pre><code>&#123;\n  for (let _index = 0; _index &lt; 6; _index++) &#123;\n    let index = _index\n    button[index].onclick = function() &#123;\n      console.log(index)  // 0 1 2 3 4 5\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>这样其实在内部共维护了 7 个变量</p>\n","categories":["js"],"tags":["es6","G"]},{"title":"ES6之迭代器","url":"/blog-next/2019/08/04/ES6%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8/","content":"<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><blockquote>\n<p>迭代器是一个对象，它定义一个序列，并在终止时可能返回一个返回值。它知道如何每次访问集合中的一项， 并跟踪该序列中的当前位置。<br>它提供了一个 next() 方法，用来返回序列中的下一项。这个方法返回包含两个属性：done 和 value。迭代器对象一旦被创建，就可以反复调用 next()。</p>\n</blockquote>\n<p>创建一个对象，他有 next 方法，可以一直调用，这就是迭代器</p>\n<pre><code>function fn() &#123;\n  let value = 0\n  return &#123;\n    next: function() &#123;\n      value += 1\n      if (value &gt; 10) &#123;\n        throw new Error(&#39;不能大与10&#39;)\n      &#125;\n      if (value === 10) &#123;\n        return &#123; value, done: true &#125;\n      &#125;\n      return &#123;\n        value,\n        done: false\n      &#125;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><blockquote>\n<p>虽然自定义的迭代器是一个有用的工具，但由于需要显式地维护其内部状态，因此需要谨慎地创建。生成器函数提供了一个强大的选择：它允许你定义一个包含自有迭代算法的函数， 同时它可以自动维护自己的状态。</p>\n</blockquote>\n<pre><code>function* fn() &#123;\n  let value = 0\n  while(true) &#123;\n    value += 1\n    yield value\n  &#125;\n&#125;\n</code></pre>\n<p>这个函数的功能和上面迭代器的功能是一样的，称为生成器，是迭代器的语法糖</p>\n<h3 id=\"可迭代对象\"><a href=\"#可迭代对象\" class=\"headerlink\" title=\"可迭代对象\"></a>可迭代对象</h3><blockquote>\n<p>若一个对象拥有迭代行为，比如在 for...of 中会循环哪些值，那么那个对象便是一个可迭代对象。一些内置类型，如 Array 或 Map 拥有默认的迭代行为，而其他类型（比如 Object）则没有。<br>为了实现可迭代，一个对象必须实现 @@iterator 方法，这意味着这个对象（或其原型链中的任意一个对象）必须具有一个带 Symbol.iterator 键（key）的属性。</p>\n</blockquote>\n<p>这样我们就可以自定义可迭代对象</p>\n<pre><code>let myIterable = &#123;\n  *[Symbol.iterator]() &#123;\n    yield 1\n    yield 2\n    yield 3\n  &#125;\n&#125;\nfor (const iterator of myIterable) &#123;\n  console.log(iterator)\n&#125;\n</code></pre>\n<h3 id=\"内置的可迭代对象\"><a href=\"#内置的可迭代对象\" class=\"headerlink\" title=\"内置的可迭代对象\"></a>内置的可迭代对象</h3><p>String, Array, TypedArray, Map, Set 他们的原型对象都有一个 Symbol.iterator 函数</p>\n<h3 id=\"用于可迭代对象的语法（语法糖）\"><a href=\"#用于可迭代对象的语法（语法糖）\" class=\"headerlink\" title=\"用于可迭代对象的语法（语法糖）\"></a>用于可迭代对象的语法（语法糖）</h3><ul>\n<li><p>for of<br>我们如果要调用生成器，只要一直 .next 就行，js 提供了一个语法糖，那就是 for of</p>\n</li>\n<li><p>展开语法<br>  [...&#39;abc&#39;] // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</p>\n</li>\n</ul>\n","categories":["js"],"tags":["es6","G"]},{"title":"ES6新增api","url":"/blog-next/2019/08/13/ES6%E6%96%B0%E5%A2%9Eapi/","content":"<h3 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from\"></a>Array.from</h3><p>生成一个数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var s = new Set([&#x27;foo&#x27;, window]);</span><br><span class=\"line\">Array.from(s);</span><br><span class=\"line\">// [&quot;foo&quot;, Window]</span><br><span class=\"line\"></span><br><span class=\"line\">Array.from([1,2,3],x=&gt;x+x)</span><br><span class=\"line\">// [2, 4, 6]</span><br><span class=\"line\"></span><br><span class=\"line\">Array.from(&#x27;123&#x27;)</span><br><span class=\"line\">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">let m = new Map([[1, 2], [2, 4], [4, 8]]);</span><br><span class=\"line\">Array.from(m);</span><br><span class=\"line\">// [Array(2), Array(2), Array(2)] -- [1, 2]1: (2) [2, 4]2: (2) [4, 8]</span><br><span class=\"line\"></span><br><span class=\"line\">Array.from(&#123;length: 5&#125;, (v, i) =&gt; i);</span><br><span class=\"line\">// [0, 1, 2, 3, 4]</span><br><span class=\"line\">这个可以和 new Array() 做对比，new Array 生成的数组没有下标</span><br><span class=\"line\"></span><br><span class=\"line\">Array.from(&#123;length: 5&#125;).fill(5);</span><br><span class=\"line\">// [5, 5, 5, 5, 5]</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 要求写一个生成n个n的数组的函数 --&gt;</span><br><span class=\"line\">// Es6</span><br><span class=\"line\">function g(n) &#123;</span><br><span class=\"line\">\treturn Array.from(&#123;length: n&#125;).fill(n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Es5</span><br><span class=\"line\">function g(n) &#123;</span><br><span class=\"line\">\treturn Array.apply(null, &#123;length:n+1&#125;).join(n).split(&#x27;&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function g(n) &#123;</span><br><span class=\"line\">\treturn new Array(n+1).join(n).split(&#x27;&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of\"></a>Array.of</h3><p>生成一个数组</p>\n<pre><code>Array.of(5) // [5]\nArray.of(1,&#123;&#125;) // [1, &#123;&#125;]\n</code></pre>\n<h3 id=\"Array-prototype-fill-n-start-end\"><a href=\"#Array-prototype-fill-n-start-end\" class=\"headerlink\" title=\"Array.prototype.fill(n, start, end)\"></a>Array.prototype.fill(n, start, end)</h3><p>填充</p>\n<pre><code>var a = [1, 2, 3]\na.fill(0) // [0, 0, 0]\na.fill(5,1) //  [0, 5, 5]\n</code></pre>\n<h3 id=\"Array-prototype-find-gt\"><a href=\"#Array-prototype-find-gt\" class=\"headerlink\" title=\"Array.prototype.find(()=&gt;{})\"></a>Array.prototype.find(()=&gt;{})</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var o = [&#123;name:&#x27;xx&#x27;, age:18&#125;, &#123;name:&#x27;yy&#x27;, age:18&#125;, &#123;name:&#x27;zz&#x27;, age:80&#125;]</span><br><span class=\"line\">o.find((item) =&gt; item.name===&#x27;xx&#x27;)</span><br><span class=\"line\">// &#123;name: &quot;xx&quot;, age: 18&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">x.name = &#x27;xx1&#x27;</span><br><span class=\"line\">// o -&gt; // [&#123;name: &quot;xx1&quot;, age: 18&#125;1: &#123;name: &quot;yy&quot;, age: 18&#125;2: &#123;name: &quot;zz&quot;, age: 80&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">// 和 filter 做对比，filter 可以返回多项</span><br><span class=\"line\">o.filter(item=&gt;item.age===18)</span><br><span class=\"line\">(2) [&#123;…&#125;, &#123;…&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">o.find(item=&gt;item.age===18)</span><br><span class=\"line\">&#123;name: &quot;xx1&quot;, age: 18&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-prototype-copyWithin-i-starti-endi\"><a href=\"#Array-prototype-copyWithin-i-starti-endi\" class=\"headerlink\" title=\"Array.prototype.copyWithin(i, starti, endi)\"></a>Array.prototype.copyWithin(i, starti, endi)</h3><pre><code>var a = [1, 2, 3]\na.copyWithin(0, 2, 3)\n// [3, 2, 3]\n</code></pre>\n<h3 id=\"Array-prototype-entries\"><a href=\"#Array-prototype-entries\" class=\"headerlink\" title=\"Array.prototype.entries()\"></a>Array.prototype.entries()</h3><p>返回一个可迭代对象（iterator）<br>这样我们就可以用 <code>for of</code> 或者 <code>next</code> 去取值</p>\n<h3 id=\"Array-prototype-keys\"><a href=\"#Array-prototype-keys\" class=\"headerlink\" title=\"Array.prototype.keys()\"></a>Array.prototype.keys()</h3><p>返回一个可迭代对象（iterator）</p>\n<h3 id=\"Array-prototype-values\"><a href=\"#Array-prototype-values\" class=\"headerlink\" title=\"Array.prototype.values()\"></a>Array.prototype.values()</h3><p>返回一个可迭代对象（iterator）</p>\n<h3 id=\"String-prototype-includes\"><a href=\"#String-prototype-includes\" class=\"headerlink\" title=\"String.prototype.includes()\"></a>String.prototype.includes()</h3><h3 id=\"String-prototype-repeat\"><a href=\"#String-prototype-repeat\" class=\"headerlink\" title=\"String.prototype.repeat()\"></a>String.prototype.repeat()</h3><pre><code>&#39;12&#39;.repeat(2) // &#39;1212&#39;\n</code></pre>\n<h3 id=\"String-prototype-startWith\"><a href=\"#String-prototype-startWith\" class=\"headerlink\" title=\"String.prototype.startWith()\"></a>String.prototype.startWith()</h3><h3 id=\"String-prototype-endWith\"><a href=\"#String-prototype-endWith\" class=\"headerlink\" title=\"String.prototype.endWith()\"></a>String.prototype.endWith()</h3><pre><code>s.lastIndexOf(12) === s.length-2\n</code></pre>\n<h3 id=\"Number-EPSILON\"><a href=\"#Number-EPSILON\" class=\"headerlink\" title=\"Number.EPSILON\"></a>Number.EPSILON</h3><h3 id=\"Number-isInteger\"><a href=\"#Number-isInteger\" class=\"headerlink\" title=\"Number.isInteger\"></a>Number.isInteger</h3><h3 id=\"Number-isFinite\"><a href=\"#Number-isFinite\" class=\"headerlink\" title=\"Number.isFinite\"></a>Number.isFinite</h3><h3 id=\"Number-isNaN\"><a href=\"#Number-isNaN\" class=\"headerlink\" title=\"Number.isNaN\"></a>Number.isNaN</h3><pre><code>Number.isNaN(&#39;NaN&#39;) // false\n</code></pre>\n<h3 id=\"Math-hypot\"><a href=\"#Math-hypot\" class=\"headerlink\" title=\"Math.hypot\"></a>Math.hypot</h3><pre><code>Math.hypot(3, 4) // 5\n</code></pre>\n<h3 id=\"Math-sign\"><a href=\"#Math-sign\" class=\"headerlink\" title=\"Math.sign\"></a>Math.sign</h3><p>返回 0 -0 1 -1 NaN</p>\n<h3 id=\"Math-trunc\"><a href=\"#Math-trunc\" class=\"headerlink\" title=\"Math.trunc\"></a>Math.trunc</h3><pre><code>Math.trunc(3.4801748017401373e+25)\nparseInt(3.4801748017401373e+25) // 3\n</code></pre>\n","categories":["js"],"tags":["es6","G","Array"]},{"title":"ES6对象扩展","url":"/blog-next/2019/08/05/ES6%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95/","content":"<h3 id=\"动态属性名\"><a href=\"#动态属性名\" class=\"headerlink\" title=\"动态属性名\"></a>动态属性名</h3><pre><code>var o = &#123;[name]: 1&#125;\n</code></pre>\n<h3 id=\"属性可以是一个函数、getter、setter-方法\"><a href=\"#属性可以是一个函数、getter、setter-方法\" class=\"headerlink\" title=\"属性可以是一个函数、getter、setter 方法\"></a>属性可以是一个函数、getter、setter 方法</h3><pre><code>var o = &#123;_age: 18, get age() &#123;return _age&#125;, set age(a)&#123;return a&#125;&#125;\n</code></pre>\n<h3 id=\"一道题\"><a href=\"#一道题\" class=\"headerlink\" title=\"一道题\"></a>一道题</h3><pre><code>let i = 0\nObject.defineProperty(window, a, &#123;get() &#123; i +=1; return i&#125;&#125;)\na == 1 &amp;&amp; a==2 &amp;&amp; a == 3 //true\n</code></pre>\n<h3 id=\"浅复制\"><a href=\"#浅复制\" class=\"headerlink\" title=\"浅复制\"></a>浅复制</h3><pre><code>Object.assign 会触发 setter\n... 不会\n</code></pre>\n<h3 id=\"在旧的对象上添加-set-get\"><a href=\"#在旧的对象上添加-set-get\" class=\"headerlink\" title=\"在旧的对象上添加 set get\"></a>在旧的对象上添加 set get</h3><pre><code>Object.defineProperty(window, a, &#123;\n  get() &#123;&#125;,\n  set() &#123;&#125;,\n  configurable: true,\n  enumerable: true,\n  value: &#39;&#39;,\n  writable: false\n&#125;)\n</code></pre>\n<p>获取这些属性可以用 <code>Object.getOwnPropertyDescriptor(window, a)</code></p>\n<p>如果对象的属性是 symbol 可以用 <code>Object.getOwnPropertySymbols(window)</code></p>\n<h3 id=\"关于原型\"><a href=\"#关于原型\" class=\"headerlink\" title=\"关于原型\"></a>关于原型</h3><ul>\n<li><p>获取<br><code>Object.getPrototypeOf()</code></p>\n</li>\n<li><p>设置<br><code>Object.create()</code></p>\n</li>\n</ul>\n","categories":["js"],"tags":["es6","G"]},{"title":"ES6自己实现简易promise","url":"/blog-next/2019/08/19/ES6%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93promise/","content":"<h3 id=\"ES5-实现\"><a href=\"#ES5-实现\" class=\"headerlink\" title=\"ES5 实现\"></a>ES5 实现</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// function Promise(???)&#123;</span><br><span class=\"line\">//   ???</span><br><span class=\"line\">//   return ???</span><br><span class=\"line\">// &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var __PENDING = &#x27;pending&#x27;</span><br><span class=\"line\">var __RESOLVED = &#x27;resolved&#x27;</span><br><span class=\"line\">var __REJECTED = &#x27;rejected&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">function Promise(fn) &#123;</span><br><span class=\"line\">  var status = __PENDING</span><br><span class=\"line\">  var resolvedArr = []</span><br><span class=\"line\">  var rejectedArr = []</span><br><span class=\"line\"></span><br><span class=\"line\">  function resolveFn() &#123;</span><br><span class=\"line\">    status = __RESOLVED</span><br><span class=\"line\">    todoThen.apply(undefined, arguments)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function rejectFn() &#123;</span><br><span class=\"line\">    status = __REJECTED</span><br><span class=\"line\">    todoThen.apply(undefined,arguments)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fn.call(undefined, resolveFn, rejectFn)</span><br><span class=\"line\"></span><br><span class=\"line\">  function todoThen() &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      if (status === __RESOLVED) &#123;</span><br><span class=\"line\">        for (let i = 0; i &lt; resolvedArr.length; i++) &#123;</span><br><span class=\"line\">          resolvedArr[i].apply(undefined, arguments)</span><br><span class=\"line\">\tconsole.log(arguments[0])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (status === __REJECTED) &#123;</span><br><span class=\"line\">        for (let i = 0; i &lt; rejectedArr.length; i++) &#123;</span><br><span class=\"line\">          rejectedArr[i].apply(undefined, arguments)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    then: function(successfn, errfn) &#123;</span><br><span class=\"line\">      resolvedArr.push(successfn)</span><br><span class=\"line\">      rejectedArr.push(errfn)</span><br><span class=\"line\">      return undefined</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var promise = new Promise(function(x,y)&#123;</span><br><span class=\"line\">  setTimeout(()=&gt;&#123;</span><br><span class=\"line\">      x(101)</span><br><span class=\"line\">  &#125;, 1000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then((z)=&gt;&#123;</span><br><span class=\"line\">  console.log(z)  // 101</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6-实现（未完待续）\"><a href=\"#ES6-实现（未完待续）\" class=\"headerlink\" title=\"ES6 实现（未完待续）\"></a>ES6 实现（未完待续）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const statusProvider = (promise, status) =&gt; data =&gt; &#123;</span><br><span class=\"line\">  if (promise.status !== &#x27;pending&#x27;) &#123;</span><br><span class=\"line\">    return false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  switch (status) &#123;</span><br><span class=\"line\">    case FULFILLED: return Promise.successListener.forEach(fn =&gt; fn(data))</span><br><span class=\"line\">    case REJECTED: return Promise.failListener.forEach(fn =&gt; fn(data))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  promise.status = status</span><br><span class=\"line\">  promise.result = data</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Promise &#123;</span><br><span class=\"line\">  constructor(executor) &#123;</span><br><span class=\"line\">    this.status = &#x27;pending&#x27;</span><br><span class=\"line\">    this.result = undefined</span><br><span class=\"line\">    this.successListener = []</span><br><span class=\"line\">    this.failListener = []</span><br><span class=\"line\">    executor(data =&gt; statusProvider(this, &#x27;resolved&#x27;), err =&gt; statusProvider(this, &#x27;reject&#x27;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(...args) &#123;</span><br><span class=\"line\">    switch (this.status) &#123;</span><br><span class=\"line\">      case &#x27;pending&#x27;: &#123;</span><br><span class=\"line\">        this.successListener.push(args[0])</span><br><span class=\"line\">        this.failListener.push(args[1])</span><br><span class=\"line\">        break</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      case &#x27;resolved&#x27;: &#123;</span><br><span class=\"line\">        args[0](this.result) // 是要处理这种情况，但是不应该在这里调用</span><br><span class=\"line\">        break</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      case &#x27;reject&#x27;: &#123;</span><br><span class=\"line\">        args[1](this.result)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  catch(arg) &#123;</span><br><span class=\"line\">    return this.then(undefined, arg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["js"],"tags":["es6","G"]},{"title":"ES6箭头函数","url":"/blog-next/2019/07/31/ES6%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/","content":"<h3 id=\"箭头函数的写法\"><a href=\"#箭头函数的写法\" class=\"headerlink\" title=\"箭头函数的写法\"></a>箭头函数的写法</h3><p>好像抄袭自 coffeescript, 叫做 <code>fat Function</code></p>\n<pre><code>() =&gt; &#123;&#125;\n</code></pre>\n<p>coffeescript 还有一个 <code>empty Function</code></p>\n<pre><code>() -&gt; &#123;&#125; 会被解析成 function() &#123;&#125;\n</code></pre>\n<h3 id=\"箭头函数的优点\"><a href=\"#箭头函数的优点\" class=\"headerlink\" title=\"箭头函数的优点\"></a>箭头函数的优点</h3><ol>\n<li>简洁，箭头函数表达式对非方法函数是最合适的</li>\n<li>没有 this，也就是父级作用域的 this</li>\n<li>箭头函数不绑定 Arguments 对象，使用剩余参数是相较使用 arguments 对象的更好选择。</li>\n<li>由于 箭头函数没有自己的 this 指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数（不能绑定 this---译者注），他们的第一个参数会被忽略。</li>\n</ol>\n","categories":["js"],"tags":["es6","G"]},{"title":"HTTP实践","url":"/blog-next/2018/11/27/HTTP%E5%AE%9E%E8%B7%B5/","content":"<h3 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h3><blockquote>\n<p>world wide web、Uniform Resource Indetifer、HyperText Transfer Protocol、HyperText Markup Language</p>\n</blockquote>\n<p>上个世纪 90 年代 Tim Berners Lee 发明了第一个浏览器，网页，服务器，以及 www<br>www 主要包含 URI HTTP HTML</p>\n<h3 id=\"URI\"><a href=\"#URI\" class=\"headerlink\" title=\"URI\"></a>URI</h3><p>uri &gt; url + urn<br>  urn  ISBN:148395792378952<br>  url  google.com</p>\n<h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><blockquote>\n<p>Domain Name System</p>\n</blockquote>\n<p>用到的命令<br>  nslookup ping<br>本地的文件在 <code>/etc/hosts</code></p>\n<h3 id=\"curl-transfer-a-url\"><a href=\"#curl-transfer-a-url\" class=\"headerlink\" title=\"curl (transfer a url)\"></a>curl (transfer a url)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST -s -v -H &quot;token: xxx&quot; -- &quot;https://www.baidu.com&quot;</span><br><span class=\"line\">  -X --request (method)</span><br><span class=\"line\">  -s --slient (Don&#x27;t show progress meter or error messages)</span><br><span class=\"line\">  -v --verbose (Mostly useful for debugging)</span><br><span class=\"line\">  -H --header (Extra header to use when getting a web page)</span><br><span class=\"line\">  -d --data (Sends the specified data)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTTP-请求包括哪些部分\"><a href=\"#HTTP-请求包括哪些部分\" class=\"headerlink\" title=\"HTTP 请求包括哪些部分\"></a>HTTP 请求包括哪些部分</h3><p>  请求行，首部字段，空行，请求参数 四部分</p>\n<p>  1 动词 路径 协议/版本<br>  2 Key1: value1<br>  2 Key2: value2<br>  2 Key3: value3<br>  2 Content-Type: application/x-www-form-urlencoded<br>  2 Host: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20v\">www.baidu.com<i class=\"fa fa-external-link-alt\"></i></span><br>  2 User-Agent: curl/7.54.0<br>  3<br>  4 params</p>\n<p>  具体参数查看 Chrome network 的 request headers, chrome 好像把请求参数单独分出为 query string paramters</p>\n<h3 id=\"HTTP-响应包括哪些部分\"><a href=\"#HTTP-响应包括哪些部分\" class=\"headerlink\" title=\"HTTP 响应包括哪些部分\"></a>HTTP 响应包括哪些部分</h3><p>  状态行，首部字段，空行，报文主体 四部分</p>\n<p>  1 协议/版本号 状态码 状态解释<br>  2 Key1: value1<br>  2 Key2: value2<br>  2 Content-Length: 17931<br>  2 Content-Type: text/html<br>  3<br>  4 要下载的内容</p>\n<p>  具体参数查看 Chrome network 的 response headers, 还有 Content-Type 和 Content-Length 是如此重要</p>\n","categories":["网络"],"tags":["G","HTTP"]},{"title":"ES6模块","url":"/blog-next/2019/08/05/ES6%E6%A8%A1%E5%9D%97/","content":"<h3 id=\"export\"><a href=\"#export\" class=\"headerlink\" title=\"export\"></a>export</h3><blockquote>\n<p>在创建 JavaScript 模块时，export 语句用于从模块中导出函数、对象或原始值，以便其他程序可以通过 import 语句使用它们。<br>无论您是否声明，导出的模块都处于严格模式。 export 语句不能用在嵌入式脚本中。</p>\n</blockquote>\n<pre><code>export let name1, name2\nexport function FunctionName()&#123;...&#125;\nexport class ClassName &#123;...&#125;\nexport &#123; name1, name2, …, nameN &#125;;\nexport &#123; variable1 as name1, variable2 as name2, …, nameN &#125;;\nexport default expression;\nexport default function (…) &#123; … &#125;\nexport * from …;\n</code></pre>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><blockquote>\n<p>静态的 import 语句用于导入由另一个模块导出的绑定。无论是否声明了 strict mode ，导入的模块都运行在严格模式下。在浏览器中，import 语句只能在声明了 type=&quot;module&quot; 的 script 的标签中使用。</p>\n</blockquote>\n<blockquote>\n<p>此外，还有一个类似函数的动态 import()，它不需要依赖 type=&quot;module&quot; 的 script 标签。在您希望按照一定的条件或者按需加载模块的时候，动态 import() 是非常有用的。</p>\n</blockquote>\n<pre><code>在您希望按照一定的条件或者按需加载模块的时候，动态import() 是非常有用的。\nimport * as name from &quot;module-name&quot;;\nimport &#123; export &#125; from &quot;module-name&quot;;\nimport &#123; export as alias &#125; from &quot;module-name&quot;;\nimport &#123; export1 , export2 &#125; from &quot;module-name&quot;;\nimport &#123; export1 , export2 as alias2 , [...] &#125; from &quot;module-name&quot;;\nimport defaultExport, &#123; export [ , [...] ] &#125; from &quot;module-name&quot;;\nimport defaultExport, * as name from &quot;module-name&quot;;\nimport &quot;module-name&quot;;\n</code></pre>\n<h3 id=\"使用注意\"><a href=\"#使用注意\" class=\"headerlink\" title=\"使用注意\"></a>使用注意</h3><ul>\n<li>一个 js 文件可以有多个 export</li>\n<li>在浏览器中使用要加 type=&#39;module&#39;</li>\n<li>在不支持的浏览器中要用 babel webpack 或者 parcel 编译之后运行</li>\n</ul>\n","categories":["js"],"tags":["es6","G"]},{"title":"JS 数据类型(一)","url":"/blog-next/2018/12/28/JS-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","content":"<h3 id=\"七种数据结构\"><a href=\"#七种数据结构\" class=\"headerlink\" title=\"七种数据结构\"></a>七种数据结构</h3><pre><code>number string boolean symbol undefined null object\n</code></pre>\n<h4 id=\"typeof-运算符\"><a href=\"#typeof-运算符\" class=\"headerlink\" title=\"typeof 运算符\"></a>typeof 运算符</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">typeof 123 // &#x27;number&#x27;</span><br><span class=\"line\">typeof &#x27;123&#x27; // &#x27;string&#x27;</span><br><span class=\"line\">typeof false // &#x27;boolean&#x27;</span><br><span class=\"line\">typeof function()&#123;&#125; // &#x27;function&#x27;</span><br><span class=\"line\">typeof undefined // &#x27;undefined&#x27; 利用这一点可以查看变量有没有声明但是不报错</span><br><span class=\"line\">typeof window/[]/&#123;&#125; // &#x27;object&#x27;</span><br><span class=\"line\">typeof null // object</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h4><ul>\n<li><p>整数和浮点数<br>  js 内部数字都是以 64 位浮点数存储，所以 <code>1.0 === 1</code>，有些时候运算只有整数才能完成，js 会自动把 64 位浮点数转换成 32 位整数，因为浮点数不是精确的值，所以涉及小数运算的时候要小心  </p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0.1 + 0.2 === 0.3 // false</span><br><span class=\"line\">0.3 / 0.1 === 2.9999999999999996 // true</span><br><span class=\"line\">(0.3 - 0.2) === (0.2 - 0.1) // false</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浮点数的 64 位</p>\n<pre><code>  (-1)^符号位 * 1.xx...xx * 2^指数部分\n  精度：2e53 = 9007199254740992 （16位的十进制数，所以15位的十进制都可以做精确处理）比如 9007199254740992111 将存为 9007199254740992000\n  范围指数部分是 11 位，最大值就是 2e11-1=2017 分一半给负数就是 (2e-1023-52, 2e+2014), 超出部分则无法表示\n  Math.pow(2, 1024) // Infinity\n  Math.pow(2, -(1023+53) // 0\n  \n</code></pre>\n</li>\n<li><p>Number 对象提供 MAX_VALUE 和 MIN_VALUE 返回可以表示的最大值和最小值</p>\n</li>\n<li><p>数值表示法 </p>\n<ul>\n<li>可以用多种进制表示</li>\n<li>小数点前的数字多于 21 位或者小数点后的零多于 5 个会自动转为科学计数法</li>\n</ul>\n</li>\n<li><p>数值的进制</p>\n<ul>\n<li>十进制 11</li>\n<li>二进制 0b11</li>\n<li>八进制 0o11 或者 011 // es6 已经禁止了后面这种，但是浏览器还留有</li>\n<li>十六进制 0x11</li>\n</ul>\n</li>\n<li><p>特殊数值</p>\n<ul>\n<li>正零和负零  <ul>\n<li>因为第一个二进制位是符号位导致的，一般情况下 <code>+0===-0</code> 只有在做分母时，会得到 Infinity 和 -Infinity</li>\n</ul>\n</li>\n<li>NaN<ul>\n<li>他是一个值 typeof NaN === &#39;number&#39;</li>\n<li>他不等于自身 NaN === NaN // false</li>\n<li>Boolean(NaN) // false</li>\n</ul>\n</li>\n<li>Infinity<ul>\n<li>无穷大或者负无穷小 ex: <code>Math.pow(2, 1024)</code> <code>1/0</code></li>\n<li>Infinity 与 NaN 比较，总是返回 false</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>parseInt() </p>\n<ul>\n<li>基本用法<ul>\n<li>用于将字符串转为整数，如果字符串开头有空格则自动去掉，如果不是字符串则先转为字符串再转换，开始转换后一个个转换，不能转换就停止不转换并且返回已经转换好的部分，如果第一个字符不能转换为数字（除了+-）则返回 NaN，所以要不返回十进制要不 NaN</li>\n<li>一些例子 <code>parseInt(&#39;0x10&#39;) // 16</code>   <code>parseInt(&#39;011&#39;) // 11</code>   <code>parseInt(0.0000008) // parseInt(&#39;8e-7&#39;) // 8</code></li>\n</ul>\n</li>\n<li>进制转换 <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">parseInt(&#x27;1000&#x27;, 2) // 8</span><br><span class=\"line\">parseInt(&#x27;1000&#x27;, 6) // 216</span><br><span class=\"line\">parseInt(&#x27;1000&#x27;, 8) // 512</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第二个参数的取值范围是 2-36，如果是 0 undefined null 就忽略，其他就返回 NaN</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>parseFloat()</p>\n<ul>\n<li><p>用法基本和 parseInt 一样 就放几个例子吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">parseFloat([]) // NaN</span><br><span class=\"line\">parseFloat(&#x27;FF2&#x27;) // NaN</span><br><span class=\"line\">parseFloat(&#x27;&#x27;) // NaN</span><br><span class=\"line\">parseFloat(true)  // NaN</span><br><span class=\"line\"></span><br><span class=\"line\">Number(true) // 1</span><br><span class=\"line\"></span><br><span class=\"line\">parseFloat(null) // NaN</span><br><span class=\"line\">Number(null) // 0</span><br><span class=\"line\"></span><br><span class=\"line\">parseFloat(&#x27;&#x27;) // NaN</span><br><span class=\"line\">Number(&#x27;&#x27;) // 0</span><br><span class=\"line\"></span><br><span class=\"line\">parseFloat(&#x27;123.45#&#x27;) // 123.45</span><br><span class=\"line\">Number(&#x27;123.45#&#x27;) // NaN</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>isNaN()</p>\n<p>isNaN 只对数字有效，如果不是数字，则会先转换为数字<br>所以需要注意的是如果返回 true，很有可能不是 NaN， 很有可能是字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var isNaN = function(value) &#123;</span><br><span class=\"line\">    var n = Number(value);</span><br><span class=\"line\">    return n !== n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>isFinite()<br>除了 Infinity、-Infinity、NaN 和 undefined 这几个值会返回 false，isFinite 对于其他的数值都会返回 true。</p>\n</li>\n</ul>\n<h4 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h4><h5 id=\"表示\"><a href=\"#表示\" class=\"headerlink\" title=\"表示\"></a>表示</h5><p>  &#39;&#39; &quot;&quot; ``<br>注意如果单引号中间要加单间号需要用 \\ 转义，为了避免坑人，换行最好用 + 拼接</p>\n<h5 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\0 null</span><br><span class=\"line\">\\b 后退</span><br><span class=\"line\">\\f 换页</span><br><span class=\"line\">\\n 换行</span><br><span class=\"line\">\\r 回车</span><br><span class=\"line\">\\t 制表符</span><br><span class=\"line\">\\v 垂直制表符</span><br><span class=\"line\">\\&#x27; \\&quot; \\\\</span><br></pre></td></tr></table></figure>\n<p>当然反斜杠还有三种特殊用法<br>  \\HHH 八进制<br>  \\xHHH 十六进制<br>  \\uXXXX \\u 后面紧跟四个十六进制数，代表一个字符，XXXX 对应该字符的 Unicode 码点<br>就是字符对应的各种进制表示的Unicode码点</p>\n<h5 id=\"unicode-字符集\"><a href=\"#unicode-字符集\" class=\"headerlink\" title=\"unicode 字符集\"></a>unicode 字符集</h5><p>js 使用 unicode 字符集，所以可以用 \\uXXXX 来表示，但是要注意只能编到 U+FFFF es6 解决了这个bug</p>\n<h5 id=\"base64-编码\"><a href=\"#base64-编码\" class=\"headerlink\" title=\"base64 编码\"></a>base64 编码</h5><p><code>0-9 a-z A-Z + /</code></p>\n<p>btoa 任意值转为 Base64 编码<br>atob Base64 编码转为原来的值<br>如果是非 ASCII 码转 Base64 则必须加一个转码环节，在使用这个方法</p>\n<h5 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h5><ul>\n<li>&#39;&#39; 和 String() 是一样的，可以把任何东西变成字符串，+ 左右两边如果有非字符串，会变成字符串</li>\n</ul>\n<blockquote>\n<p>However for 1.toString(), the JS engine cannot determine what does . mean - a dot operator (for object methods), or a float number point?<br>所以 1..toString() 就是可以的 1.toString是不行的 或者(1).toString()</p>\n</blockquote>\n<h4 id=\"null-和-undefined\"><a href=\"#null-和-undefined\" class=\"headerlink\" title=\"null 和 undefined\"></a>null 和 undefined</h4><p>null 惯例用来表示空对象， 不知道类型时用 undefined<br>Number(null) 是 0<br>Number(undefined) 是 NaN</p>\n<h4 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h4><p>下面这些运算符会返回布尔值<br>前置逻辑运算符！相等运算符 === == !== 比较运算符 &gt;&lt;&gt;=</p>\n<p>六个falsy值 转为false 其他都是true <code>null undefined &#39;&#39; NaN false 0</code></p>\n","categories":["js"],"tags":["js","G","js数据类型"]},{"title":"JS 数据类型(二)","url":"/blog-next/2019/01/10/JS-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B2/","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><h4 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h4><p>对象就是一组键值对的集合，是一种无序的复合数据集合<br>对象 obj 的所有键名虽然看上去像数值，实际上都被自动转成了字符串，如果键名不符合标识名的条件，且也不是数字，则必须加上引号，否则就会报错</p>\n<h4 id=\"对象的引用\"><a href=\"#对象的引用\" class=\"headerlink\" title=\"对象的引用\"></a>对象的引用</h4><p>如果不同的变量名指向同一个对象，那么他们都是这个对象的引用</p>\n<h4 id=\"表达式还是语句\"><a href=\"#表达式还是语句\" class=\"headerlink\" title=\"表达式还是语句\"></a>表达式还是语句</h4><p>{ console.log(123) }是一个代码块，要解释为对象，最好在大括号前加上圆括号，因为圆括号里面只能是表达式，所以确保大括号只能解释为对象<br>这种差异在 eval 中显示的最为明显</p>\n<pre><code>eval(&#39;&#123;foo:1&#125;&#39;)\neval(&#39;(&#123;foo:1&#125;)&#39;)\n</code></pre>\n<h3 id=\"属性的操作\"><a href=\"#属性的操作\" class=\"headerlink\" title=\"属性的操作\"></a>属性的操作</h3><h4 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a>读取</h4><p>有两种方法，一种是使用点运算符，还有一种是使用方括号运算符。<br>obj.o obj[&#39;o&#39;] 使用点 o 就是字符串，使用方括号 o 就是变量<br>如果 key 是数字，则只能使用方括号，点会报错，方括号里的数字会自动转换为字符串</p>\n<h4 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h4><p>允许&#39;后绑定&#39;</p>\n<h4 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h4><p>查看一个对象本身的所有属性，可以用 Object.keys 方法</p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>删除对象本身的属性用 delete, delete obj.o 成功后返回 true<br>只有一种情况 delete 返回 false 那就是该属性存在且不得删除<br>var obj = Object.defineProperty({}, &#39;p&#39;, {value: 1, configurable: false}) delete obj.p<br>delete 返回 true 之后并不能说明已经删除，比如继承的属性</p>\n<h4 id=\"in-运算符判断属性是否存在\"><a href=\"#in-运算符判断属性是否存在\" class=\"headerlink\" title=\"in 运算符判断属性是否存在\"></a>in 运算符判断属性是否存在</h4><p>in 和 hasOwnProperty() 可以查找自身的属性</p>\n<h4 id=\"for-in-属性遍历\"><a href=\"#for-in-属性遍历\" class=\"headerlink\" title=\"for in 属性遍历\"></a>for in 属性遍历</h4><ul>\n<li>它遍历的是所有 enumerable 的属性，会跳过不可遍历的属性</li>\n<li>它不仅遍历对象自身的属性，还遍历继承的属性</li>\n</ul>\n<p>####数组的本质<br>typeof 返回 object<br>数组的特殊性体现在他的键名是按次序排列的一组整数<br>之所以能用数值取值是因为数值会被转换成字符串，赋值的时候也是<br>arr.0 的写法不合法，因为单独的数值不能作为标识符（identifier）</p>\n<h4 id=\"length\"><a href=\"#length\" class=\"headerlink\" title=\"length\"></a>length</h4><p>返回数组成员的个数<br>数组的数字键不需要连续，length 总是最大的下标加 1，这也表明数组是动态的数据结构，可以随时增减数组的成员<br>length 的最大值是 2^32-1<br>设置 length 的值会导致数组的变化，设为 0 就可以清空数组，大于当前数组个数用 undefined 填充，如果设置为不合法的值会报错<br>设置数组属性，不会影响数组的 length<br>如果设置的键名是超出范围的数值，则会自动转换为字符串</p>\n<h4 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h4><p>in 运算符也适用于数组，但是个人感觉没啥用，可以用来判断属性？</p>\n<h4 id=\"for-in\"><a href=\"#for-in\" class=\"headerlink\" title=\"for in\"></a>for in</h4><p>for in 会遍历所有的键，包括属性，所以不推荐适用</p>\n<h4 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h4><p>一般可以用 while for forEach</p>\n<h4 id=\"数组的空位\"><a href=\"#数组的空位\" class=\"headerlink\" title=\"数组的空位\"></a>数组的空位</h4><p>当数组的两个逗号之间没有任何值，那么这个数组就存在空位 hole<br>delete arr[1] 会形成空位<br>空位虽然取值也是 undefined 但是和 undefined 是不一样的<br>数组的遍历方法 forEach for in 以及 Object.keys() 会跳过空位，undefined 不会</p>\n<h4 id=\"类数组对象\"><a href=\"#类数组对象\" class=\"headerlink\" title=\"类数组对象\"></a>类数组对象</h4><p>如果一个对象的所有键名都是正整数或零，并且有 length 属性，他就是 array-like object<br>常见的类数组对象有 Dom 集合 函数的 arguments 对象 以及 i 字符串<br>数组的 slice 方法可以把类数组对象变成数组 Array.prototype.slice.call(arguments)</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"函数的声明\"><a href=\"#函数的声明\" class=\"headerlink\" title=\"函数的声明\"></a>函数的声明</h4><p>1 function<br>2 var x = function x() {} name x 一般自己不写但是这个在函数内部可以获取到而且可以除错，不至于显示匿名函数<br>3 new Function(&#39;x&#39;,&#39;y&#39;,&#39;return x+y&#39;) 这种方式没有人用</p>\n<p>递归真是强大，体验了一把 fib 函数</p>\n<p>由于函数和其他数据类型的地位平等，所以在 js 中又称为第一等公民</p>\n<p>函数名也是会提升，js 引擎会把函数名视同为变量名</p>\n<h4 id=\"函数的属性和方法\"><a href=\"#函数的属性和方法\" class=\"headerlink\" title=\"函数的属性和方法\"></a>函数的属性和方法</h4><p>#####f.name 属性的一个用处就是获取参数函数的名字</p>\n<h5 id=\"f-length-获取函数参数的个数\"><a href=\"#f-length-获取函数参数的个数\" class=\"headerlink\" title=\"f.length 获取函数参数的个数\"></a>f.length 获取函数参数的个数</h5><p>length 属性提供了一种机制，判断定义时和调用时参数的差异，以便实现面向对象编程的”方法重载“（overload）</p>\n<h5 id=\"f-toString-返回字符串\"><a href=\"#f-toString-返回字符串\" class=\"headerlink\" title=\"f.toString() 返回字符串\"></a>f.toString() 返回字符串</h5><h4 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h4><p>对于 var 命令来说，局部变量只能在函数内部，其他区块中都是全局变量，在函数内部，也会存在变量提升</p>\n<h5 id=\"函数本身的作用域\"><a href=\"#函数本身的作用域\" class=\"headerlink\" title=\"函数本身的作用域\"></a>函数本身的作用域</h5><p>函数本身也是一个值，也有自己的作用域，他的作用域和变量一样，就是其声明时所在的作用域，而不是调用时所在的作用域<br>当函数执行返回另一个函数的时候，就可以绑定当前函数的作用域，从而形成闭包</p>\n<h5 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h5><p>函数的参数不是必须的，js 允许省略参数<br>参数如果传的是原始类型的值那么传递方式的就是 pass by value，如果传的是复合类型的值，传递方式就是 pass by reference<br>arguments 对象包含了函数运行时所需要的全部参数，严格模式下他是只读的，他是一个类数组对象，可以用 arguments.callee 来调用自身函数，但是同样严格模式是禁用的</p>\n<h5 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h5><p>为了得到函数内的局部变量，只有在函数内部在定义一个函数，再返回这个内部函数，就可以读取函数变量了<br>实质上闭包就是将函数内部和函数外部连接起来的一座桥梁<br>闭包的最大用处有两个，一个是可以读取函数内部的变量 两一个就是可以让这些变量始终保持在内存中<br><strong>闭包两大场景 返回另一个函数 封装对象的私有属性和私有方法</strong><br>注意太多的闭包对内存消耗很大，因此不能滥用闭包，否则会造成的性能问题</p>\n<h5 id=\"立即调用的函数表达式-IIFE\"><a href=\"#立即调用的函数表达式-IIFE\" class=\"headerlink\" title=\"立即调用的函数表达式 IIFE\"></a>立即调用的函数表达式 IIFE</h5><p>function f(){}() 直接加上 () 是会报错</p>\n<blockquote>\n<p>JavaScript 引擎看到行首是 function 关键字之后，认为这一段都是函数的定义，不应该以圆括号结尾，所以就报错了</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(function()&#123; /* code */  &#125;());</span><br><span class=\"line\">// 或者</span><br><span class=\"line\">(function()&#123; /* code */  &#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>所以只要可以让解释器以表达式来处理函数定义，就能产生同样的效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var i = function()&#123;&#125;();</span><br><span class=\"line\">true &amp;&amp; function()&#123;&#125;();</span><br><span class=\"line\">!function()&#123;&#125;();</span><br><span class=\"line\">+function()&#123;&#125;();</span><br><span class=\"line\">~function()&#123;&#125;();</span><br><span class=\"line\">-function()&#123;&#125;();</span><br></pre></td></tr></table></figure>\n\n<p>IIFE Immediately-Invoked Function Expression 的主要目的有两个<br>一个就是不用为函数命名，避免污染全局变量<br>二就是内部形成了一个独立的作用域，可以封装一些外部无法读取的私有变量</p>\n","categories":["js"],"tags":["js","G","js数据类型"]},{"title":"JSONP是什么","url":"/blog-next/2019/03/16/JSONP%E6%98%AF%E4%BB%80%E4%B9%88/","content":"<h3 id=\"jsonp\"><a href=\"#jsonp\" class=\"headerlink\" title=\"jsonp\"></a>jsonp</h3><p>jsonp 就是 JSON + Padding<br>服务端用 SRJ(Server Render Javascript) 技术把数据塞到前端请求的回调函数里</p>\n<h3 id=\"jsonp-由来\"><a href=\"#jsonp-由来\" class=\"headerlink\" title=\"jsonp 由来\"></a>jsonp 由来</h3><p>最初的需求其实就是局部刷新</p>\n<h4 id=\"form-action\"><a href=\"#form-action\" class=\"headerlink\" title=\"form action\"></a>form action</h4><p>form 可以 post 提交数据，但是页面会跳转，所以需要一个空 iframe 用来指向，这样也能得到数据，可以做局部刷新</p>\n<h4 id=\"img-src\"><a href=\"#img-src\" class=\"headerlink\" title=\"img src\"></a>img src</h4><p>img 的 src 可以调用其他服务器的资源，不受限制，而且 onload 可以监测成功，onerror 可以监测失败<br>但是只能 get，而且服务端返回的数据只能是图片</p>\n<h4 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h4><p>script 的 src也不受同源策略的限制，也同样有 onload 和 onerror<br>这样就可以的客户端封装函数，然后把函数名字发送给后端，后端用 SRG 把数据塞到函数里返回，然后在前端执行</p>\n<h4 id=\"jquery-jsonp\"><a href=\"#jquery-jsonp\" class=\"headerlink\" title=\"jquery jsonp\"></a>jquery jsonp</h4><p>jquery 把这一系列操作都放到了 ajax 上，你只需指定 dataType 为 jsonp<br>jquery 返回 jQuery33105114825241317853_1552671331082.call(null, 48) 类似这样的字符串<br>文海南路<br>默认约定回调函数名字就是 callback 加一串随机数组成</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9ub2RlLXNlcnZlci1kZW1vMi9jb21taXRzL21hc3Rlcg==\">自己实现的jsonp<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTYvMDQvc2FtZS1vcmlnaW4tcG9saWN5Lmh0bWw=\">浏览器同源政策及其规避方法<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTYvMDQvY29ycw==\">html跨域资源共享 CORS 详解<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["js"],"tags":["js","G","jsonp"]},{"title":"ES6新增的数据类型","url":"/blog-next/2019/08/11/ES6%E6%96%B0%E5%A2%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","content":"<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h3><p><strong>symbol 是一种基本数据类型</strong></p>\n<blockquote>\n<p>Symbol()函数会返回 symbol 类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的 symbol 注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法：&quot;new Symbol()&quot;。<br>每个从 Symbol()返回的 symbol 值都是唯一的。一个 symbol 值能作为对象属性的标识符；这是该数据类型仅有的目的。</p>\n</blockquote>\n<pre><code>Symbol() === Symbol() // false\n</code></pre>\n<h4 id=\"在对象中查找-symbol-属性\"><a href=\"#在对象中查找-symbol-属性\" class=\"headerlink\" title=\"在对象中查找 symbol 属性\"></a>在对象中查找 symbol 属性</h4><pre><code>Object.getOwnPropertySymbols()\n</code></pre>\n<h4 id=\"应用于私有属性\"><a href=\"#应用于私有属性\" class=\"headerlink\" title=\"应用于私有属性\"></a>应用于私有属性</h4><pre><code>&#123;\n  let a = Symbol()\n  let obj = &#123;\n    [a]: 1\n  &#125;\n  window.obj = obj\n&#125;\nobj // &#123;Symbol(): 1&#125;\nobj[a] // undefined\n</code></pre>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>Set 函数可以接受一个数组，(或者具有 iterable 接口的其他数据结构)，作为参数用来初始化</p>\n<p>操作方法有 <code>add delete has(value) clear</code> 方法</p>\n<p>遍历可以用 <code>keys values entires forEach</code></p>\n<p>属性 size 返回实例成员的总数</p>\n<blockquote>\n<p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。<br>Set 对象是值的集合，你可以按照插入的顺序迭代它的元素。 Set 中的元素只会出现一次，即 Set 中的元素是唯一的。</p>\n</blockquote>\n<p><strong>WeakSet 的一个用处，是储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏。</strong></p>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><pre><code>size\n</code></pre>\n<p>有一个比较重要的是 set 没有键名，所以 key 和 value 是一样的</p>\n<h4 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h4><pre><code>var a = new Set()\na.add(1) // Set(1) &#123;1&#125;\na.has(1) // true\na.delete(1) // true\na.entries()\na.keys()\na.values() // SetIterator &#123;1 =&gt; 1, &#123;…&#125; =&gt; &#123;…&#125;&#125;\n</code></pre>\n<h4 id=\"实例默认可迭代\"><a href=\"#实例默认可迭代\" class=\"headerlink\" title=\"实例默认可迭代\"></a>实例默认可迭代</h4><pre><code>// 默认生成器函数就是 values 方法\nSet.prototype[Symbol.iterator] === Set.prototype.values\nSet.prototype[Symbol.iterator] === Set.prototype.keys\n</code></pre>\n<p>上面三个 api 都返回迭代器对象，意味着我们可以用 for of 迭代拿到这些值<br>同时也提供了 forEach 方法，和数组的用法一致</p>\n<h4 id=\"典型例子\"><a href=\"#典型例子\" class=\"headerlink\" title=\"典型例子\"></a>典型例子</h4><pre><code>// 数组去重\n[...new Set(arr)]\n</code></pre>\n<h3 id=\"WeakSet\"><a href=\"#WeakSet\" class=\"headerlink\" title=\"WeakSet\"></a>WeakSet</h3><blockquote>\n<p>WeakSet 对象允许你将弱保持对象存储在一个集合中。<br>也就是这个对象中的成员有可能被 GC</p>\n</blockquote>\n<h4 id=\"实例方法-1\"><a href=\"#实例方法-1\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h4><pre><code>var b = new WeakSet() // WeakSet &#123;&#125;\nvar o = &#123;&#125;\nb.add(o)\no = null\nb.has(o) // false\n</code></pre>\n<p>可以看出已经没有这个成员了，这就是 weakSet 的作用</p>\n<p>它只有四个 api</p>\n<pre><code>WeakSet.prototype.add(value)\nWeakSet.prototype.clear()\nWeakSet.prototype.delete(value)\nWeakSet.prototype.has(value)\n</code></pre>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><blockquote>\n<p>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。<br>就是说对象的 key 值可以是一个对象，以前会直接转换为字符串</p>\n</blockquote>\n<pre><code>let o = &#123;&#125;\nlet a = &#123;&#125;\na[o] = 1 // &#123; [object Object]: 1 &#125;\n</code></pre>\n<p>作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组</p>\n<pre><code>var m = new Map([\n    [&#39;name&#39;, &#39;xxx&#39;],\n    [&#39;age&#39;, 18]\n])\n\n// 实际上是下面这个操作\nconst map = new Map();\n\nitems.forEach(\n([key, value]) =&gt; map.set(key, value)\n);\n</code></pre>\n<p>Map 的方法基本和 Set 一样</p>\n<pre><code>// 默认的迭代器函数是 entries\nMap.prototype[Symbol.iterator] === Map.prototype.entries\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWFwI09iamVjdHNfJUU1JTkyJThDX21hcHNfJUU3JTlBJTg0JUU2JUFGJTk0JUU4JUJFJTgz\">Objects 和 Maps 的比较<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h3><blockquote>\n<p>WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。<br>原生的 WeakMap 持有的是每个键或值对象的“弱引用”，这意味着在没有其他引用存在时垃圾回收能正确进行。原生 WeakMap 的结构是特殊且有效的，其用于映射的 key 只有在其没有被回收时才是有效的。</p>\n</blockquote>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> wm = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> key = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">5</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>);</span><br><span class=\"line\">wm.set(key, <span class=\"number\">1</span>);</span><br><span class=\"line\">key = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<p>当我们设置 <code>wm.set(key, 1)</code> 时，其实建立了 <code>wm</code> 对 <code>key</code> 所引用的对象的弱引用，但因为 <code>let key = new Array(5 * 1024 * 1024)</code> 建立了 <code>key</code> 对所引用对象的强引用，被引用的对象并不会被回收，但是当我们设置 <code>key = null</code> 的时候，就只有 <code>wm</code> 对所引用对象的弱引用，下次垃圾回收机制执行的时候，该引用对象就会被回收掉。</p>\n<p><strong>WeakMap 可以帮你省掉手动删除对象关联数据的步骤，所以当你不能或者不想控制关联数据的生命周期时就可以考虑使用 WeakMap。</strong></p>\n<p>WeakMap 只接受对象作为键名</p>\n<p>同样它也是不可枚举的，有四个 api</p>\n<h4 id=\"WeakMap-api\"><a href=\"#WeakMap-api\" class=\"headerlink\" title=\"WeakMap api\"></a>WeakMap api</h4><pre><code>WeakMap.prototype.delete(key)\nWeakMap.prototype.get(key)\nWeakMap.prototype.has(key)\nWeakMap.prototype.set(key, value)\n</code></pre>\n<h3 id=\"key-弱引用，value-不是\"><a href=\"#key-弱引用，value-不是\" class=\"headerlink\" title=\"key 弱引用，value 不是\"></a>key 弱引用，value 不是</h3><pre><code>const wm = new WeakMap();\nlet key = &#123;&#125;;\nlet obj = &#123;foo: 1&#125;;\n\nwm.set(key, obj);\nobj = null;\nwm.get(key)\n// Object &#123;foo: 1&#125;\n</code></pre>\n<h3 id=\"关于-Map-的应用\"><a href=\"#关于-Map-的应用\" class=\"headerlink\" title=\"关于 Map 的应用\"></a>关于 Map 的应用</h3><ol>\n<li>在 DOM 对象上保存相关数据<br>传统使用 jQuery 的时候，我们会通过 $.data() 方法在 DOM 对象上储存相关信息(就比如在删除按钮元素上储存帖子的 ID 信息)，jQuery 内部会使用一个对象管理 DOM 和对应的数据，当你将 DOM 元素删除，DOM 对象置为空的时候，相关联的数据并不会被删除，你必须手动执行 $.removeData() 方法才能删除掉相关联的数据，WeakMap 就可以简化这一操作：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> wm = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>(),</span><br><span class=\"line\">  element = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.element&quot;</span>);</span><br><span class=\"line\">wm.set(element, <span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> value = wm.get(elemet);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// data</span></span><br><span class=\"line\"></span><br><span class=\"line\">element.parentNode.removeChild(element);</span><br><span class=\"line\">element = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>数据缓存<br>从上一个例子，我们也可以看出，当我们需要关联对象和数据，比如在不修改原有对象的情况下储存某些属性或者根据对象储存一些计算的值等，而又不想管理这些数据的死活时非常适合考虑使用 WeakMap。数据缓存就是一个非常好的例子：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cache = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countOwnKeys</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cache.has(obj)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Cached&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache.get(obj);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Computed&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> count = <span class=\"built_in\">Object</span>.keys(obj).length;</span><br><span class=\"line\">    cache.set(obj, count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>私有属性<br>WeakMap 也可以被用于实现私有变量，不过在 ES6 中实现私有变量的方式有很多种，这只是其中一种：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> privateData = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span> &#123;</span><br><span class=\"line\">    privateData.set(<span class=\"built_in\">this</span>, &#123; <span class=\"attr\">name</span>: name, <span class=\"attr\">age</span>: age &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getName</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateData.get(<span class=\"built_in\">this</span>).name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getAge</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateData.get(<span class=\"built_in\">this</span>).age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Person;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>更多<br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTcvMDQvbWVtb3J5LWxlYWsuaHRtbA==\">http://www.ruanyifeng.com/blog/2017/04/memory-leak.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n","categories":["js"],"tags":["es6","G"]},{"title":"React-HooksApi","url":"/blog-next/2019/07/24/React-HooksApi/","content":"<h3 id=\"类组件的不足\"><a href=\"#类组件的不足\" class=\"headerlink\" title=\"类组件的不足\"></a>类组件的不足</h3><ol>\n<li>难以复用的状态逻辑 缺少复用机制 渲染属性和高阶组件导致层级冗余</li>\n<li>趋向复杂难以维护 生命周期混杂不相干的逻辑 相干的逻辑分散在不同的生命周期</li>\n<li>this 指向困扰 内联函数过渡创建新句柄 类成员函数不能保证 this</li>\n</ol>\n<h3 id=\"Hooks-Api\"><a href=\"#Hooks-Api\" class=\"headerlink\" title=\"Hooks Api\"></a>Hooks Api</h3><p>就是让函数组件能有状态，以前的无状态组件变成了现在的函数组件</p>\n<h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h3><p>使用</p>\n<pre><code>import &#123; useState &#125; from &#39;react&#39;\n</code></pre>\n<p>在函数组件声明 state 属性 count 和 setCount 方法，0 是初始值</p>\n<pre><code>const [count, setCount] = useState(0)\n</code></pre>\n<p>在组件中渲染</p>\n<pre><code>&lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;+1&lt;/button&gt;\n</code></pre>\n<p>当然初始值也可设为对象</p>\n<pre><code>const [user, setUser] = useState(&#123;name: &#39;fuck&#39;,age: 100&#125;)\n</code></pre>\n<p>这样修改</p>\n<pre><code>setUser(&#123;\n  ...user,\n  age: user.age + 1\n&#125;)\n</code></pre>\n<h3 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h3><p>使用</p>\n<pre><code>import &#123; useEffect &#125; from &#39;react&#39;\n</code></pre>\n<p>在函数组件中，如果依赖外部世界的逻辑，直接写到 useEffect 的回调中执行</p>\n<pre><code>useEffect(() =&gt; &#123;\n  document.title = &#39;useEffect --- React Hooks&#39;\n&#125;)\n</code></pre>\n<h3 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">useContext(contextObj); <span class=\"comment\">// 获取 Provider 传递的值</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">useMemo(<span class=\"function\">()=&gt;</span>&#123;reutrn fn&#125;,[]:deep)  <span class=\"comment\">// 有返回值的时候使用</span></span><br><span class=\"line\">setValue在useMemo中可以不写依赖，直接用参数setValue(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>value+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">useCallback(fn, ([]: deep)); <span class=\"comment\">// 没有返回值的时候使用</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h3><ul>\n<li>获取子组件或者 dom 节点的句柄</li>\n<li>渲染周期之间共享数据的存储</li>\n</ul>\n<h3 id=\"自定义-hooks\"><a href=\"#自定义-hooks\" class=\"headerlink\" title=\"自定义 hooks\"></a>自定义 hooks</h3><ul>\n<li>use 开头的函数</li>\n<li>可以逻辑复用，也可以返回 jsx</li>\n<li>函数可以用 usecallback 优化</li>\n</ul>\n<h3 id=\"代码仓库\"><a href=\"#代码仓库\" class=\"headerlink\" title=\"代码仓库\"></a>代码仓库</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9yZWFjdC1kZW1vLWFkdmFuY2UvYmxvYi9tYXN0ZXIvc3JjL3BhZ2VzL1JBOC9pbmRleC5qc3g=\">React-HooksApi<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["React"],"tags":["G","React"]},{"title":"React-Router","url":"/blog-next/2019/07/28/React-Router/","content":"<h3 id=\"用-hash-做-router\"><a href=\"#用-hash-做-router\" class=\"headerlink\" title=\"用 hash 做 router\"></a>用 hash 做 router</h3><pre><code>window.location.hash = &#39;signin&#39;\n</code></pre>\n<h3 id=\"用-pushState-做-router\"><a href=\"#用-pushState-做-router\" class=\"headerlink\" title=\"用 pushState 做 router\"></a>用 pushState 做 router</h3><p><em>假设为顶级路由</em></p>\n<pre><code>const [ui, setUi] = useState(window.location.pathname === &#39;signin&#39; ? 0 : 1)\nwindow.history.pushState(null, &#39;&#39;, &#39;signin&#39;)\n</code></pre>\n<h3 id=\"用-React-Router-做路由\"><a href=\"#用-React-Router-做路由\" class=\"headerlink\" title=\"用 React-Router 做路由\"></a>用 React-Router 做路由</h3><p>安装 react-router-dom <code>&quot;react-router&quot;: &quot;^5.0.1&quot; &quot;react-router-dom&quot;: &quot;^5.0.1&quot;,</code></p>\n<pre><code>yarn add react-router-dom\n</code></pre>\n<p>引入 Router Route Link</p>\n<pre><code>import &#123; BrowserRouter as Router, Route, Link &#125; from &quot;react-router-dom&quot;;\n</code></pre>\n<p>使用 Router 组件</p>\n<pre><code>function RA9() &#123;\n  return (\n    &lt;div&gt;\n      &lt;Rotuer&gt;\n        &lt;Link to=&quot;/signin&quot;&gt;\n          &lt;button&gt;登录&lt;/button&gt;\n        &lt;/Link&gt;\n        &lt;Link to=&quot;/signup&quot;&gt;\n          &lt;button&gt;注册&lt;/button&gt;\n        &lt;/Link&gt;\n        &lt;Route path=&quot;/&quot; exact component=&#123;RA9&#125; /&gt;\n        &lt;Route path=&quot;/signin/&quot; component=&#123;SignIn&#125; /&gt;\n        &lt;Route path=&quot;/signup/&quot; component=&#123;SignUp&#125; /&gt;\n      &lt;/Rotuer&gt;\n    &lt;/div&gt;\n  )\n&#125;\n</code></pre>\n<p>在 react 内部会变成下面这样</p>\n<pre><code>function RA9() &#123;\n\n  return React.createElement(\n    &#39;div&#39;,\n    null,\n    React.createElement(\n      Rotuer,\n      null,\n      React.createElement(\n        Link,\n        &#123;\n          to: &#39;/signin&#39;\n        &#125;,\n        React.createElement(&#39;button&#39;, null, &#39;\\u767B\\u5F55&#39;)\n      ),\n      React.createElement(\n        Link,\n        &#123;\n          to: &#39;/signup&#39;\n        &#125;,\n        React.createElement(&#39;button&#39;, null, &#39;\\u6CE8\\u518C&#39;)\n      ),\n      React.createElement(Route, &#123;\n        path: &#39;/&#39;,\n        exact: true,\n        component: RA9\n      &#125;),\n      React.createElement(Route, &#123;\n        path: &#39;/signin/&#39;,\n        component: SignIn\n      &#125;),\n      React.createElement(Route, &#123;\n        path: &#39;/signup/&#39;,\n        component: SignUp\n      &#125;)\n    )\n  )\n&#125;\n</code></pre>\n<h3 id=\"代码仓库\"><a href=\"#代码仓库\" class=\"headerlink\" title=\"代码仓库\"></a>代码仓库</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9yZWFjdC1kZW1vLWFkdmFuY2UvYmxvYi9tYXN0ZXIvc3JjL3BhZ2VzL1JBOS9pbmRleC5qc3g=\">react-router<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["React"],"tags":["G","React"]},{"title":"React和React-redux","url":"/blog-next/2019/07/21/React%E5%92%8CReact-redux/","content":"<h3 id=\"使用-redux\"><a href=\"#使用-redux\" class=\"headerlink\" title=\"使用 redux\"></a>使用 redux</h3><p>在顶层组件初始化 store</p>\n<ul>\n<li>我们通过 createStore(reducer) 创建 store</li>\n<li>我们通过 store.subscribe(render) 订阅事件</li>\n<li>我们通过 store.dispatch({type, payload}) 发布事件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const reducer = (state, action) =&gt; &#123;</span><br><span class=\"line\">  if (!state) &#123;</span><br><span class=\"line\">    return &#123; n: 0 &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    if (action.type === &#x27;add&#x27;) &#123;</span><br><span class=\"line\">      return &#123; n: state.n + action.payload &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const store = createStore(reducer)</span><br><span class=\"line\"></span><br><span class=\"line\">const render = () =&gt; &#123;</span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">      &lt;App /&gt;</span><br><span class=\"line\">    &lt;/Provider&gt;,</span><br><span class=\"line\">    document.getElementById(&#x27;root&#x27;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render()</span><br><span class=\"line\">store.subscribe(render)</span><br></pre></td></tr></table></figure>\n\n<p>我们在顶层组件初始化 store，在需要的时候发布事件，但是我们遇到了一个问题，<br>就是如果我们需要在子组件触发的话，就需要把事件一级级的传递下去，通过 props 上的事件去调用</p>\n<p>这样有点累</p>\n<p>当然我们也可以把 store 对象作为属性传递下去</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">store=&#123;store&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样取值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.props.store.getState().n</span><br></pre></td></tr></table></figure>\n\n<p>这样是确实不用一级级传递事件了，但是我们却需要一级级传递 store，其实没有改变什么<br>这个时候我们就需要一个东西来管理 store 对象的各个属性和状态</p>\n<h3 id=\"使用-react-redux\"><a href=\"#使用-react-redux\" class=\"headerlink\" title=\"使用 react-redux\"></a>使用 react-redux</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- connect()</span><br><span class=\"line\">- Provider</span><br><span class=\"line\">- connectAdvanced()</span><br><span class=\"line\">- batch()</span><br></pre></td></tr></table></figure>\n\n<p>我们主要用 Provider 组件和 connect 函数</p>\n<p>第一步，给 Provider 一个 store</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Provider store=&#123;store&#125;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>第二步，用 connect 函数返回新的组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">export default connect(mapStateToProps, mapDispatchToProps)(App)</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数是用来初始化 state 的，接受一个 state，返回新的 state</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const mapStateToProps = state =&gt; &#123;</span><br><span class=\"line\">  return &#123; n: state.n &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二个参数可以写作函数也可以写成对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const mapDispatchToProps = dispatch =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    add: () =&gt; &#123;</span><br><span class=\"line\">      dispatch(&#123; type: &#x27;add&#x27;, payload: 1 &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onAdd2: () =&gt; &#123;</span><br><span class=\"line\">      dispatch(&#123; type: &#x27;add&#x27;, payload: 2 &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 或者 --&gt;</span><br><span class=\"line\">const mapDispatchToProps = &#123;</span><br><span class=\"line\">  add: () =&gt; &#123;</span><br><span class=\"line\">    return &#123; type: &#x27;add&#x27;, payload: 1 &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  onAdd2: () =&gt; &#123;</span><br><span class=\"line\">    return &#123; type: &#x27;add&#x27;, payload: 2 &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们在调用的时候就可以直接 <code>this.props.add</code> 来触发事件了</p>\n<p>这就是 react-redux 的使用，感叹 vuex 帮我们做了太多东西，有点香 XD</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">contextType <span class=\"comment\">// 一个 context 的时候可以使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> contextType = ssContext</span><br><span class=\"line\"><span class=\"keyword\">const</span> xx = <span class=\"built_in\">this</span>.context</span><br><span class=\"line\">这样可以不用 consumer 解析</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码仓库\"><a href=\"#代码仓库\" class=\"headerlink\" title=\"代码仓库\"></a>代码仓库</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9yZWFjdC1kZW1vLWFkdmFuY2UvYmxvYi9tYXN0ZXIvc3JjL3BhZ2VzL1JBNi9pbmRleC5qc3g=\">react-redux<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["React"],"tags":["G","React"]},{"title":"React-ContextApi","url":"/blog-next/2019/07/24/React-ContextApi/","content":"<h3 id=\"用-context-api-传值\"><a href=\"#用-context-api-传值\" class=\"headerlink\" title=\"用 context api 传值\"></a>用 context api 传值</h3><p><strong>ContextApi就是给组件共享一个全局的局部变量</strong></p>\n<p>首先需要 createContext</p>\n<pre><code>const nContext = React.createContext(0)\n</code></pre>\n<p>其次需要在要传递值的组件上用 nContext.Provider 包起来，把要传递的值放到 value 上</p>\n<pre><code>&lt;nContext.Provider value=&#123;this.state.x&#125;&gt;\n  &lt;F1 /&gt;\n&lt;/nContext.Provider&gt;\n</code></pre>\n<p>然后在你需要获取值的时候用 nContext.Consumer 包裹，传递一个函数，这个函数会作为 consumer 的回调执行</p>\n<pre><code>&lt;nContext.Consumer&gt;&#123;x =&gt; &lt;F4 n4=&#123;x.n&#125; setN=&#123;x.setN&#125; /&gt;&#125;&lt;/nContext.Consumer&gt;\n</code></pre>\n<p>这样我们就能在 F4 组件上获得相应的属性</p>\n<h3 id=\"Consumer-语法的含义\"><a href=\"#Consumer-语法的含义\" class=\"headerlink\" title=\"Consumer 语法的含义\"></a>Consumer 语法的含义</h3><p>如下所示，我们可以通过 props.children 获取组件的子元素，如果是函数我们就可以执行，并且可以传递参数</p>\n<pre><code>&lt;Consumer&gt;\n  &#123;p =&gt; &lt;div&gt;&#123;p&#125;&lt;/div&gt;&#125;\n&lt;/Consumer&gt;\n\n// 标签里面传递函数\nfunction Consumer(props) &#123;\n  // console.log(props.children)\n  const child = props.children(9202)\n  return (\n    &lt;h2&gt;&#123;child&#125;&lt;/h2&gt;\n  )\n&#125;\n</code></pre>\n<p>在 React 内部，上面这段代码会变成这样</p>\n<pre><code>React.createElement(Consumer, null, function (p) &#123;\n  return React.createElement(&quot;div&quot;, null, p);\n&#125;); \n\n// 标签里面传递函数\nfunction Consumer(props) &#123;\n  // console.log(props.children)\n  var child = props.children(9202);\n  return React.createElement(&quot;h2&quot;, null, child);\n&#125;\n</code></pre>\n<h3 id=\"代码仓库\"><a href=\"#代码仓库\" class=\"headerlink\" title=\"代码仓库\"></a>代码仓库</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9yZWFjdC1kZW1vLWFkdmFuY2UvYmxvYi9tYXN0ZXIvc3JjL3BhZ2VzL1JBNy9pbmRleC5qc3g=\">Context Api<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["React"],"tags":["G","React"]},{"title":"React组件通信-EventHub","url":"/blog-next/2019/07/17/React%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1-EventHub/","content":"<h3 id=\"代码仓库\"><a href=\"#代码仓库\" class=\"headerlink\" title=\"代码仓库\"></a>代码仓库</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9yZWFjdC1kZW1vLWFkdmFuY2UvYmxvYi9tYXN0ZXIvc3JjL3BhZ2VzL1JBMl8xL2luZGV4LmpzeA==\">eventHub<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9yZWFjdC1kZW1vLWFkdmFuY2UvYmxvYi9tYXN0ZXIvc3JjL3BhZ2VzL1JBMl8yL2luZGV4LmpzeA==\">redux<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"任意两个组件如何通信-amp-amp-发布订阅模式\"><a href=\"#任意两个组件如何通信-amp-amp-发布订阅模式\" class=\"headerlink\" title=\"任意两个组件如何通信&amp;&amp;发布订阅模式\"></a>任意两个组件如何通信&amp;&amp;发布订阅模式</h3><p>一个组件发布一个事件，另一个组件订阅这个事件，订阅事件的时候就是把触发的函数 push 到队列里，发布就是挨个执行这些函数，并把 payload 作为函数的参数执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let fnObject = &#123;&#125;</span><br><span class=\"line\">let eventHub = &#123;</span><br><span class=\"line\">  // 发布</span><br><span class=\"line\">  trigger(eventName, data) &#123;</span><br><span class=\"line\">    let fnList = fnObject[eventName]</span><br><span class=\"line\">    if (!fnList) &#123;</span><br><span class=\"line\">      return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (let i = 0; i &lt; fnList.length; i++) &#123;</span><br><span class=\"line\">      fnList[i](data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 订阅</span><br><span class=\"line\">  on(eventName, fn) &#123;</span><br><span class=\"line\">    if (!fnObject[eventName]) &#123;</span><br><span class=\"line\">      fnObject[eventName] = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fnObject[eventName].push(fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// eventHub 的 subscribe</span><br><span class=\"line\">let x = &#123;</span><br><span class=\"line\">  init() &#123;</span><br><span class=\"line\">    eventHub.on(&#x27;xxx&#x27;, function(data)=&gt;&#123; // subscribe</span><br><span class=\"line\">      store.money -= data // reducer</span><br><span class=\"line\">      render()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">x.init()</span><br></pre></td></tr></table></figure>\n\n<p>需要像上面这样的一个事件中心，管理发布和订阅，就是 trigger 和 on 两个函数</p>\n<p>你在需要这个事件的地方去订阅，把需要执行的函数放在里 eventHub.on(eventName, fn)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eventHub.on(&#x27;cost&#x27;, data =&gt; &#123;</span><br><span class=\"line\">  this.setState(&#123;</span><br><span class=\"line\">    money: this.state.money - data</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在执行组件行为的时候，你就可以发布一个事件（其实就是执行刚才那个函数）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eventHub.trigger(&#x27;cost&#x27;, 100)</span><br></pre></td></tr></table></figure>\n\n<p>这就是发布订阅模式。</p>\n<h3 id=\"利用-redux-进行组件通信\"><a href=\"#利用-redux-进行组件通信\" class=\"headerlink\" title=\"利用 redux 进行组件通信\"></a>利用 redux 进行组件通信</h3><p>当然我们很多时候数据都是自上而下的单向数据流，这样的情况我们只需要在顶层组件去订阅事件，然后在需要的时候去发布事件就行了，这样所有组件都能共享数据了</p>\n<p><code>redux</code> 就是专门做这个的工具，需要用 <code>store</code> 对象来管理所有数据，下面是 <code>redux</code> 的主要步骤:</p>\n<ol>\n<li>第一步引入 <code>createStore</code> 函数 <strong>createStore</strong></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; createStore &#125; from &#x27;redux&#x27;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>这个函数接受一个 <code>reducer</code> 的数据操作函数 <strong>reducer</strong></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let reducers = (state, action) =&gt; &#123; // reducer</span><br><span class=\"line\">  state = state || &#123; money: 10000 &#125;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">    case &#x27;cost&#x27;:</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        money: state.money - action.payload</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建 <code>store</code> 对象, 参数是 <code>reducer</code> 函数 <strong>store</strong></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let store = createStore(reducer) </span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>你好像必须在顶层组件 <code>store.getState()</code> 获取数据</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;App money=&#123;store.getState().money&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>如果你要发布一个事件，用来和别的组件通信，你需要： <strong>dispatch action</strong></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">store.dispatch(&#123; type: &#x27;cost&#x27;, payload: 100 &#125;)</span><br><span class=\"line\">这个就对应上面发布 eventHub.trigger(&#x27;cost&#x27;, 100) </span><br></pre></td></tr></table></figure>\n\n<p><strong>type 就是 action-type</strong><br><strong>payload 就是 action-payload</strong></p>\n<ol start=\"6\">\n<li>当然必须要订阅才能监听到发布的事件 <strong>subscribe</strong></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const render = () =&gt;</span><br><span class=\"line\">  ReactDOM.render(</span><br><span class=\"line\">    &lt;RA22 /&gt;,</span><br><span class=\"line\">    document.getElementById(&#x27;root2&#x27;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">render()</span><br><span class=\"line\">store.subscribe(render) // 只要 store 一变化，subscribe 里面的函数就会执行，这个函数就是上面的 `x.init()`</span><br></pre></td></tr></table></figure>\n","categories":["React"],"tags":["G","React"]},{"title":"React组件通信-父子","url":"/blog-next/2019/07/14/React%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1-%E7%88%B6%E5%AD%90/","content":"<h3 id=\"代码仓库\"><a href=\"#代码仓库\" class=\"headerlink\" title=\"代码仓库\"></a>代码仓库</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9yZWFjdC1kZW1vLWFkdmFuY2UvYmxvYi9tYXN0ZXIvc3JjL3BhZ2VzL1JBMS9pbmRleC5qc3g=\">龟兔赛跑<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"组件-JSX\"><a href=\"#组件-JSX\" class=\"headerlink\" title=\"组件 JSX\"></a>组件 JSX</h3><p>我们已经知道组件可以是函数，也可以用 class 表示<br>下面列出一些要点</p>\n<ul>\n<li>组件名必须大写开头 Pascal</li>\n<li>construnctor 函数必须调用 super</li>\n<li>style 可以直接绑定一个对象，用来表示样式</li>\n<li>函数组件做不到根据数据改变重新渲染，所以多状态这种组件要用 class，简单的可以直接写函数表示</li>\n</ul>\n<h3 id=\"父子组件通信\"><a href=\"#父子组件通信\" class=\"headerlink\" title=\"父子组件通信\"></a>父子组件通信</h3><ul>\n<li>内部组件可以直接用 this.props 获取外部组件的属性，同样函数组件也提供 props 参数</li>\n<li>如果组件依赖数据变化，必须在 state 上改变数据</li>\n<li>父组件给子组件传递一个函数，子组件在合适的时候调用这个函数（回调）</li>\n</ul>\n<p>父：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Track success=&#123;this.onSuccess.bind(this)&#125;&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>标签上调用<code>this.onSuccess</code>的时候，React会强制把回调的this指向undefined，所以需要自己bind，或者用=&gt;函数</strong><br>子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.props.success()</span><br></pre></td></tr></table></figure>\n<p><strong>不要写空格</strong></p>\n","categories":["React"],"tags":["G","React"]},{"title":"TS函数","url":"/blog-next/2019/06/24/TS%E5%87%BD%E6%95%B0/","content":"<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function add(a:number, b:number = 1): number|string &#123;</span><br><span class=\"line\">  &#x27;use strict&#x27;</span><br><span class=\"line\">  console.log(this)</span><br><span class=\"line\">  // console.log(arguments)</span><br><span class=\"line\">  return a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function add(n1: number, n2: number);</span><br><span class=\"line\">function add(n1: string, n2: string);</span><br><span class=\"line\">function add(n1, n2) &#123;</span><br><span class=\"line\">  return n1 + n2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function add2&lt;T&gt;(n1: T, n2: T): T &#123;</span><br><span class=\"line\">  return n1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(1, 2); // 3</span><br><span class=\"line\">add(&#x27;frank&#x27;, &#x27;jack&#x27;); // &#x27;frankjack&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">add2(new Date(), new Date())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型推论\"><a href=\"#类型推论\" class=\"headerlink\" title=\"类型推论\"></a>类型推论</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let myAdd: (baseValue: number, increment: number) =&gt; number = function(x, y) &#123; return x + y; &#125;;</span><br><span class=\"line\">// 所以 TS 通过类型推论是可以知道 x y 的类型的，所以写类型和不写类型的这个粒度是怎么样的呢？需要思考和实践</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型兼容\"><a href=\"#类型兼容\" class=\"headerlink\" title=\"类型兼容\"></a>类型兼容</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Named &#123;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let x: Named;</span><br><span class=\"line\">let y = &#123; name: &#x27;Alice&#x27;, location: &#x27;Seattle&#x27; &#125;;</span><br><span class=\"line\">x = y;</span><br><span class=\"line\">// 直接赋值是报错的，但是这样就可以了</span><br></pre></td></tr></table></figure>\n\n<p>规定返回值如果是源函数的返回值的子类型，那么 TS 就认为这是对的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  let x = () =&gt; (&#123; name: &#x27;Alice&#x27; &#125;);</span><br><span class=\"line\">  let y = () =&gt; (&#123; name: &#x27;Alice&#x27;, location: &#x27;Seattle&#x27; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  x = y; // OK</span><br><span class=\"line\">  y = x; // 反过来肯定不行</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["TS"],"tags":["G","TS"]},{"title":"TS安装与调试","url":"/blog-next/2019/05/19/TS%E5%AE%89%E8%A3%85%E4%B8%8E%E8%B0%83%E8%AF%95/","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install typescript -g</span><br><span class=\"line\">npm install ts-node -g</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir .vscode</span><br><span class=\"line\">touch .vscode/launch.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;configurations&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;name&quot;: &quot;ts-node&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;node&quot;,</span><br><span class=\"line\">      &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">      &quot;program&quot;: &quot;/Users/shiguangwei/.nvm/versions/node/v11.13.0/bin/ts-node&quot;,</span><br><span class=\"line\">      &quot;args&quot;: [</span><br><span class=\"line\">        &quot;$&#123;relativeFile&#125;&quot;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class=\"line\">      &quot;protocol&quot;: &quot;inspector&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>touch 1.ts, 输入 console.log(&#39;hello joyowo&#39;) 点击调试即可</p>\n<h3 id=\"查看五分钟入门\"><a href=\"#查看五分钟入门\" class=\"headerlink\" title=\"查看五分钟入门\"></a>查看五分钟入门</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHNsYW5nLmNuL2RvY3MvaGFuZGJvb2svdHlwZXNjcmlwdC1pbi01LW1pbnV0ZXMuaHRtbA==\">五分钟入门<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"练习一下\"><a href=\"#练习一下\" class=\"headerlink\" title=\"练习一下\"></a>练习一下</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">enum Gender &#123;</span><br><span class=\"line\">  Man,</span><br><span class=\"line\">  Woman</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface person &#123;</span><br><span class=\"line\">  age: number,</span><br><span class=\"line\">  gender: Gender</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function marry(a: person, b: person): [person, person] &#123;</span><br><span class=\"line\">  if(a.gender!==b.gender) &#123;</span><br><span class=\"line\">    return [a,b]</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    throw new Error(&#x27;不能结婚&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var c = marry(&#123;gender: Gender.Man, age: 28&#125;, &#123;gender: Gender.Woman, age: 18&#125;)</span><br><span class=\"line\">console.log(c)</span><br><span class=\"line\"></span><br><span class=\"line\">function sorted(a: number[]):number[] &#123;</span><br><span class=\"line\">  return a.sort((a, b) =&gt; b - a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(sorted([1,23,2,42,21]))</span><br><span class=\"line\"></span><br><span class=\"line\">function add(a: string, b: string): string</span><br><span class=\"line\">function add(a: number, b: number): number</span><br><span class=\"line\">function add(a: any, b: any): any &#123;</span><br><span class=\"line\">  return a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(add(1, 2))</span><br><span class=\"line\"></span><br><span class=\"line\">function min(a: number, b: number): number &#123;</span><br><span class=\"line\">  if (a &lt; b) &#123;</span><br><span class=\"line\">    return ;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var c = min(1, 2);</span><br><span class=\"line\">console.log(c);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["TS"],"tags":["G","TS"]},{"title":"TS命令行","url":"/blog-next/2019/05/23/TS%E5%91%BD%E4%BB%A4%E8%A1%8C/","content":"<h3 id=\"最简单的命令行程序\"><a href=\"#最简单的命令行程序\" class=\"headerlink\" title=\"最简单的命令行程序\"></a>最简单的命令行程序</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">## shebang</span><br><span class=\"line\">#!/usr/bin/env ts-node</span><br><span class=\"line\">console.log(&#x27;hello&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">## 接着给文件添加可执行权限</span><br><span class=\"line\">chmod +x ./1.ts</span><br><span class=\"line\"></span><br><span class=\"line\">## 执行 ./1.ts</span><br><span class=\"line\">就能看到 hello</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"接受命令行参数\"><a href=\"#接受命令行参数\" class=\"headerlink\" title=\"接受命令行参数\"></a>接受命令行参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env ts-node</span><br><span class=\"line\">console.log(process.argv)</span><br></pre></td></tr></table></figure>\n\n<p>执行会报错，2.ts(2,13): error TS2304: Cannot find name &#39;process&#39;. 找不到 process<br>实际上我们在项目中经常用 process.NODE.env 这种获取环境变量，process 就是 Node.js 的全局变量，不可能找不到</p>\n<p>这就是 TS 的厉害之处：如果你不告诉我 process 是什么，我就不允许你用 process</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install @types/node</span><br></pre></td></tr></table></figure>\n\n<p>执行之后再次打开可以看到参数了</p>\n<h3 id=\"加法的例子\"><a href=\"#加法的例子\" class=\"headerlink\" title=\"加法的例子\"></a>加法的例子</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env ts-node</span><br><span class=\"line\">console.log(&#x27;hello world&#x27;)</span><br><span class=\"line\">const a = parseInt(process.argv[2])</span><br><span class=\"line\">const b = parseInt(process.argv[3])</span><br><span class=\"line\"></span><br><span class=\"line\">if (Number.isNaN(a) || Number.isNaN(b)) &#123;</span><br><span class=\"line\">  console.log(&#x27;参数必须是数字&#x27;)</span><br><span class=\"line\">  process.exit(1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(a + b)</span><br><span class=\"line\">process.exit(0)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"族谱的例子\"><a href=\"#族谱的例子\" class=\"headerlink\" title=\"族谱的例子\"></a>族谱的例子</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env ts-node</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  class Person &#123;</span><br><span class=\"line\">    public children: Person[] = []</span><br><span class=\"line\">    constructor(public name: string) &#123;&#125;</span><br><span class=\"line\">    addPerson(child: Person): void &#123;</span><br><span class=\"line\">      this.children.push(child)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    introduce(n?: number): void &#123;</span><br><span class=\"line\">      n = n || 1</span><br><span class=\"line\">      const prefix = &#x27;--&#x27;.repeat(n - 1)</span><br><span class=\"line\">      console.log(`$&#123;prefix&#125;$&#123;this.name&#125;`)</span><br><span class=\"line\">      this.children.forEach((child: Person) =&gt; &#123;</span><br><span class=\"line\">        child.introduce(n + 1)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const grandPa = new Person(&#x27;爷爷&#x27;)</span><br><span class=\"line\">  const child1 = new Person(&#x27;大伯&#x27;)</span><br><span class=\"line\">  const child2 = new Person(&#x27;二伯&#x27;)</span><br><span class=\"line\">  const child11 = new Person(&#x27;大哥&#x27;)</span><br><span class=\"line\">  const child12 = new Person(&#x27;大姐&#x27;)</span><br><span class=\"line\">  const child21 = new Person(&#x27;二哥&#x27;)</span><br><span class=\"line\">  const child22 = new Person(&#x27;二姐&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">  grandPa.addPerson(child1)</span><br><span class=\"line\">  child1.addPerson(child11)</span><br><span class=\"line\">  child1.addPerson(child12)</span><br><span class=\"line\">  grandPa.addPerson(child2)</span><br><span class=\"line\">  child2.addPerson(child21)</span><br><span class=\"line\">  child2.addPerson(child22)</span><br><span class=\"line\"></span><br><span class=\"line\">  grandPa.introduce()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["TS"],"tags":["G","TS"]},{"title":"TS接口","url":"/blog-next/2019/06/11/TS%E6%8E%A5%E5%8F%A3/","content":"<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>js 七种数据类型 + 枚举 + any + void + never<br>默认情况下 null 和 undefined 是所有类型的子类型，就是说你可以把 null 赋值给 string 类型的变量</p>\n<h3 id=\"写法\"><a href=\"#写法\" class=\"headerlink\" title=\"写法\"></a>写法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let a: null = null</span><br><span class=\"line\">let b: undefined = undefined</span><br><span class=\"line\"></span><br><span class=\"line\">let c: boolean = true</span><br><span class=\"line\">let d: number = 1.23</span><br><span class=\"line\"></span><br><span class=\"line\">let o: object = &#123;&#125;</span><br><span class=\"line\">let s: symbol = Symbol()</span><br><span class=\"line\"></span><br><span class=\"line\">let e: number = 1</span><br><span class=\"line\">// e = &#x27;string&#x27;</span><br><span class=\"line\">let e1: any = 1</span><br><span class=\"line\">e1 = &#x27;string&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// let gender = &#x27;man&#x27;</span><br><span class=\"line\">enum Gender &#123;</span><br><span class=\"line\">  Man = &#x27;m&#x27;,</span><br><span class=\"line\">  Woman = &#x27;w&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let gender: Gender = Gender.Man</span><br><span class=\"line\"></span><br><span class=\"line\">function print(x): void &#123;</span><br><span class=\"line\">  console.log(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;string&gt;someValue</span><br><span class=\"line\">someValue as string</span><br></pre></td></tr></table></figure>\n\n<p>当你在 TypeScript 里使用 JSX 时，只有 as 语法断言是被允许的</p>\n<h3 id=\"类型转化\"><a href=\"#类型转化\" class=\"headerlink\" title=\"类型转化\"></a>类型转化</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 类型转换</span><br><span class=\"line\">let a: number = 1</span><br><span class=\"line\">let b: string = a.toString()</span><br><span class=\"line\"></span><br><span class=\"line\">let c: string = &#x27;1.2&#x27;</span><br><span class=\"line\">let d: number = parseFloat(c)</span><br><span class=\"line\"></span><br><span class=\"line\">let e: string = &#x27;false&#x27;</span><br><span class=\"line\">let f: boolean = Boolean(e)</span><br><span class=\"line\"></span><br><span class=\"line\">if (e === undefined) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let o:object = &#123;name: &#x27;xxx&#x27;&#125;</span><br><span class=\"line\">let s: string = JSON.stringify(o)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h3><p>用 let 和 const<br>注意如果 const 声明的是对象，是地址不能变，不是对象不能变</p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>接口就是用代码描述一个对象必须有什么属性（包括方法），但是有没有其他属性就不管了</p>\n<h3 id=\"声明对象\"><a href=\"#声明对象\" class=\"headerlink\" title=\"声明对象\"></a>声明对象</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Human &#123;</span><br><span class=\"line\">  name: string</span><br><span class=\"line\">  // readonly name: string</span><br><span class=\"line\">  age: number</span><br><span class=\"line\">  shape: Shape</span><br><span class=\"line\">  likeGame?: Array&lt;string&gt;</span><br><span class=\"line\">  say(word: string): void</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只读属性 readonly，用作声明属性，const 用作声明变量</li>\n<li>可选属性 加？</li>\n<li>属性是函数 say(word: string): void</li>\n</ul>\n<h3 id=\"传入了-interface-之外的属性-？\"><a href=\"#传入了-interface-之外的属性-？\" class=\"headerlink\" title=\"传入了 interface 之外的属性 ？\"></a>传入了 interface 之外的属性 ？</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface SquareConfig &#123;</span><br><span class=\"line\">    color?: string;</span><br><span class=\"line\">    width?: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function createSquare(config: SquareConfig): void &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let mySquare = createSquare(&#123; colour: &quot;red&quot;, width: 100 &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>想要传入 Interface 之外的属性，可以：</p>\n<ol>\n<li>使用类型断言</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let mySquare = createSquare(&#123; width: 100, opacity: 0.5 &#125; as SquareConfig);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用索引签名</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface SquareConfig &#123;</span><br><span class=\"line\">    color?: string;</span><br><span class=\"line\">    width?: number;</span><br><span class=\"line\">    [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"interface-对象，这个对象是一个函数\"><a href=\"#interface-对象，这个对象是一个函数\" class=\"headerlink\" title=\"interface 对象，这个对象是一个函数\"></a>interface 对象，这个对象是一个函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Add &#123;</span><br><span class=\"line\">  (a: number, b: number): number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let add: Add = function(a, b) &#123;</span><br><span class=\"line\">  return a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"这个函数的属性也是函数\"><a href=\"#这个函数的属性也是函数\" class=\"headerlink\" title=\"这个函数的属性也是函数\"></a>这个函数的属性也是函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">第一种</span><br><span class=\"line\">interface Add &#123;</span><br><span class=\"line\">  (a: number, b: number): number</span><br><span class=\"line\">  // minus(c: number, d: number): number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let add: Add = ((): Add =&gt; &#123;</span><br><span class=\"line\">  let x:any = function(a, b) &#123;</span><br><span class=\"line\">    return a + b</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  x.minus = function(c: number, d: number): number &#123;</span><br><span class=\"line\">    return c - d</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return x</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">第二种</span><br><span class=\"line\">class Adds &#123;</span><br><span class=\"line\">   minus(c: number, d: number): number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Add extends Adds &#123;</span><br><span class=\"line\">  (a: number, b: number): number</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"interface-的对象是一个数组\"><a href=\"#interface-的对象是一个数组\" class=\"headerlink\" title=\"interface 的对象是一个数组\"></a>interface 的对象是一个数组</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface StringArray &#123;</span><br><span class=\"line\">  [index: number]: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let myArray: StringArray;</span><br><span class=\"line\">myArray = [&quot;Bob&quot;, &quot;Fred&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">let myStr: string = myArray[0];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"interface-可以继承\"><a href=\"#interface-可以继承\" class=\"headerlink\" title=\"interface 可以继承\"></a>interface 可以继承</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Shape &#123;</span><br><span class=\"line\">  color: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Square extends Shape &#123;</span><br><span class=\"line\">  sideLength: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let square = &lt;Square&gt;&#123;&#125;;</span><br><span class=\"line\">square.color = &quot;blue&quot;;</span><br><span class=\"line\">square.sideLength = 10;</span><br></pre></td></tr></table></figure>\n","categories":["TS"],"tags":["G","TS"]},{"title":"TS工具类函数","url":"/blog-next/2019/12/20/TS%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%87%BD%E6%95%B0/","content":"<h3 id=\"是否是对象\"><a href=\"#是否是对象\" class=\"headerlink\" title=\"是否是对象\"></a>是否是对象</h3><pre><code>export function isObject(val: any): val is Object &#123;\n  return val !== null &amp;&amp; typeof val === &quot;object&quot;;\n&#125;\n</code></pre>\n<h3 id=\"是否是纯对象\"><a href=\"#是否是纯对象\" class=\"headerlink\" title=\"是否是纯对象\"></a>是否是纯对象</h3><pre><code>export function isPlainObject(val: any): val is Object &#123;\n  return Object.prototype.toString.call(val) === &quot;[object Object]&quot;;\n&#125;\n</code></pre>\n<h3 id=\"是否是日期对象\"><a href=\"#是否是日期对象\" class=\"headerlink\" title=\"是否是日期对象\"></a>是否是日期对象</h3><pre><code>export function isDate(val: any): val is Date &#123;\n  return Object.prototype.toString.call(val) === &quot;[object Date]&quot;;\n&#125;\n</code></pre>\n<h3 id=\"是否是-URLSearchParams-对象\"><a href=\"#是否是-URLSearchParams-对象\" class=\"headerlink\" title=\"是否是 URLSearchParams 对象\"></a>是否是 URLSearchParams 对象</h3><pre><code>export function isURLSearchParams(val: any): val is URLSearchParams &#123;\n  return typeof val !== &quot;undefined&quot; &amp;&amp; val instanceof URLSearchParams;\n&#125;\n</code></pre>\n<h3 id=\"是否是-FormData\"><a href=\"#是否是-FormData\" class=\"headerlink\" title=\"是否是 FormData\"></a>是否是 FormData</h3><pre><code>export function isFormData(val: any): val is FormData &#123;\n  return typeof val !== &quot;undefined&quot; &amp;&amp; val instanceof FormData;\n&#125;\n</code></pre>\n<h3 id=\"是否是绝对地址\"><a href=\"#是否是绝对地址\" class=\"headerlink\" title=\"是否是绝对地址\"></a>是否是绝对地址</h3><pre><code>export function isAbsoluteURL(url: string): boolean &#123;\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n&#125;\n</code></pre>\n<h3 id=\"extend-合并两个对象的属性\"><a href=\"#extend-合并两个对象的属性\" class=\"headerlink\" title=\"extend 合并两个对象的属性\"></a>extend 合并两个对象的属性</h3><pre><code>export function extend&lt;T, U&gt;(to: T, from: U): T &amp; U &#123;\n  for (const i in from) &#123;\n    (to as T &amp; U)[i] = from[i] as any;\n  &#125;\n  return to as T &amp; U;\n&#125;\n</code></pre>\n<h3 id=\"合并-baseurl-和-url\"><a href=\"#合并-baseurl-和-url\" class=\"headerlink\" title=\"合并 baseurl 和 url\"></a>合并 baseurl 和 url</h3><pre><code>export function combineURL(baseURL: string, relativeURL?: string): string &#123;\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, &quot;&quot;) + &quot;/&quot; + relativeURL.replace(/^\\/+/, &quot;&quot;)\n    : baseURL;\n&#125;\n</code></pre>\n<h3 id=\"对象合并（深拷贝）\"><a href=\"#对象合并（深拷贝）\" class=\"headerlink\" title=\"对象合并（深拷贝）\"></a>对象合并（深拷贝）</h3><pre><code>export function deepMerge(...objs: any[]): any &#123;\n  const result = Object.create(null);\n\n  objs.forEach(obj =&gt; &#123;\n    if (obj) &#123;\n      Object.keys(obj).forEach(key =&gt; &#123;\n        const val = obj[key];\n        if (isPlainObject(val)) &#123;\n          if (isPlainObject(result[key])) &#123;\n            result[key] = deepMerge(result[key], val);\n          &#125; else &#123;\n            result[key] = deepMerge(val);\n          &#125;\n        &#125; else &#123;\n          result[key] = val;\n        &#125;\n      &#125;);\n    &#125;\n  &#125;);\n\n  return result;\n&#125;\n</code></pre>\n","categories":["js-code"],"tags":["code"]},{"title":"TS类","url":"/blog-next/2019/06/23/TS%E7%B1%BB/","content":"<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p>类就是创造对象的东西（描述对象有哪些属性）<br>对于 TS 来说，类可以让你的程序变得更加可预测（这个对象不会出现一些我不知道的属性，一切尽在我的掌握）</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Human extends Animal &#123;</span><br><span class=\"line\">  // 声明类的属性</span><br><span class=\"line\">  static color = &#x27;red&#x27;  </span><br><span class=\"line\"></span><br><span class=\"line\">  // 公有属性，默认就是 public，可以写可以不写</span><br><span class=\"line\">  public name: string</span><br><span class=\"line\"></span><br><span class=\"line\">  // 访问器，自定义属性</span><br><span class=\"line\">  _age: number</span><br><span class=\"line\">  get age() &#123;</span><br><span class=\"line\">    return this._age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  set age(val: number) &#123;</span><br><span class=\"line\">    if (val &gt; 28) &#123;</span><br><span class=\"line\">      this._age = 18</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      this._age = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 私有属性，只有这个类可以访问</span><br><span class=\"line\">  private secret: number = 100</span><br><span class=\"line\"></span><br><span class=\"line\">  // 使用 constructor</span><br><span class=\"line\">  constructor(name: string, kind: string, age = 18) &#123;</span><br><span class=\"line\">    super(kind)  // 继承类</span><br><span class=\"line\">    this.name = name</span><br><span class=\"line\">    this.age = age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 声明对象的函数属性</span><br><span class=\"line\">  say(): string &#123;</span><br><span class=\"line\">    this.move()</span><br><span class=\"line\">    console.log(this.kind)</span><br><span class=\"line\">    return &#x27;i can move&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public smile() &#123;</span><br><span class=\"line\">    console.log(&#x27;smile&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 抽象类 也就是爸爸类（只描述有什么方法，并没有实现这些方法）</span><br><span class=\"line\">// 也就是说，只要 class 里面的方法就必须实现，如果不实现，就需要加 abstract</span><br><span class=\"line\">abstract class Animal &#123; // 这里必须写 abstract</span><br><span class=\"line\">  abstract smile(): void // 这里也是</span><br><span class=\"line\"></span><br><span class=\"line\">  // 保护属性，可以在类和子类中使用</span><br><span class=\"line\">  protected kind: string  </span><br><span class=\"line\">  constructor(kind: string) &#123;</span><br><span class=\"line\">    this.kind = kind</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  move(): void &#123;</span><br><span class=\"line\">    console.log(&#x27;move&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一些技巧\"><a href=\"#一些技巧\" class=\"headerlink\" title=\"一些技巧\"></a>一些技巧</h3><ul>\n<li>TS 的类其实就是一个函数，一个构造函数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Greeter &#123;</span><br><span class=\"line\">  static standardGreeting = &quot;Hello, there&quot;;</span><br><span class=\"line\">  greeting: string;</span><br><span class=\"line\">  greet() &#123;</span><br><span class=\"line\">    if (this.greeting) &#123;</span><br><span class=\"line\">        return &quot;Hello, &quot; + this.greeting;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        return Greeter.standardGreeting;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let greeter1: Greeter; // 可能还是感觉这里很多于</span><br><span class=\"line\">greeter1 = new Greeter();</span><br><span class=\"line\">console.log(greeter1.greet());</span><br><span class=\"line\"></span><br><span class=\"line\">let greeterMaker: typeof Greeter = Greeter;  // 注意这句话</span><br><span class=\"line\">greeterMaker.standardGreeting = &quot;Hey there!&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let greeter2: Greeter = new greeterMaker();</span><br><span class=\"line\">console.log(greeter2.greet());</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接口是低配版的类，类是高配版的接口。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  class Point &#123;</span><br><span class=\"line\">    x: number</span><br><span class=\"line\">    y: number</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  interface Point3d extends Point &#123;</span><br><span class=\"line\">    z: number</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  let point3d: Point3d = &#123; x: 1, y: 2, z: 3 &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["TS"],"tags":["G","TS"]},{"title":"TS泛型","url":"/blog-next/2019/06/24/TS%E6%B3%9B%E5%9E%8B/","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>泛型就是用一个东西表示广泛类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function returnIt&lt;T&gt;(param: T): T &#123;</span><br><span class=\"line\">  return param</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let s = returnIt&lt;string&gt;(&#x27;hi&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 表示对象</span><br><span class=\"line\">interface Human &#123;</span><br><span class=\"line\">  name: string</span><br><span class=\"line\">  age: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let p = returnIt&lt;Human&gt;(&#123; name: &#x27;zhangsan&#x27;, age: 18 &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回一个 array</span><br><span class=\"line\">function returnArray&lt;T&gt;(arr: Array&lt;T&gt;): Array&lt;T&gt; &#123;</span><br><span class=\"line\">  return arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型函数\"><a href=\"#泛型函数\" class=\"headerlink\" title=\"泛型函数\"></a>泛型函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 这就是泛型函数</span><br><span class=\"line\">let returnIt: &lt;U&gt;(param: U) =&gt; U = &lt;T&gt;(param: T): T =&gt; param</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  interface add &#123;</span><br><span class=\"line\">    (a: number, b: number): number</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  interface addAny&lt;T&gt; &#123;</span><br><span class=\"line\">    (a: T, b: T): T</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const add: add = (a, b) =&gt; a + b</span><br><span class=\"line\"></span><br><span class=\"line\">  const addAny: addAny&lt;string&gt; = (a, b) =&gt; a + b</span><br><span class=\"line\">  console.log(addAny(&#x27;1&#x27;, &#x27;3&#x27;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h3><p>泛型类使用（&lt;&gt;）括起泛型类型，跟在类名后面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class GenericNumber&lt;T&gt; &#123;</span><br><span class=\"line\">    zeroValue: T;</span><br><span class=\"line\">    add: (x: T, y: T) =&gt; T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let myGenericNumber = new GenericNumber&lt;number&gt;();</span><br><span class=\"line\">myGenericNumber.zeroValue = 0;</span><br><span class=\"line\">myGenericNumber.add = function(x, y) &#123; return x + y; &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束</h3><p>就是给泛型添加一些约束</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function returnIt&lt;T&gt;(arg: T): T&#123;</span><br><span class=\"line\">  console.log(arg.length) // error, 我们知道不是任何数据类型都有length属性，如果我们不约束有可能报错</span><br><span class=\"line\">  return arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们使用接口和 extends 关键字实现约束</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface HasLength&#123;</span><br><span class=\"line\">  length: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function returnIt&lt;T extends HasLength&gt;(arg: T): T&#123;</span><br><span class=\"line\">  console.log(arg.length) // no error</span><br><span class=\"line\">  return arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在泛型中使用类\"><a href=\"#在泛型中使用类\" class=\"headerlink\" title=\"在泛型中使用类\"></a>在泛型中使用类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function create&lt;T&gt;(c: &#123;new(): T; &#125;): T &#123;</span><br><span class=\"line\">  return new c();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><h4 id=\"使用对象字面量来定义泛型函数\"><a href=\"#使用对象字面量来定义泛型函数\" class=\"headerlink\" title=\"使用对象字面量来定义泛型函数\"></a>使用对象字面量来定义泛型函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function identity&lt;T&gt;(arg: T): T &#123;</span><br><span class=\"line\">    return arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let myIdentity: &#123;&lt;T&gt;(arg: T): T&#125; = identity;</span><br></pre></td></tr></table></figure>\n<p>这其实可以直接变换一下使用泛型接口来实现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface GenericIdentityFn &#123;</span><br><span class=\"line\">    &lt;T&gt;(arg: T): T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function identity&lt;T&gt;(arg: T): T &#123;</span><br><span class=\"line\">    return arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let myIdentity: GenericIdentityFn = identity;</span><br></pre></td></tr></table></figure>\n<p><strong>总之泛型函数就是要在前面声明泛型变量 T</strong></p>\n<p>当然可以把泛型参数当做整个接口的一个参数，这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface GenericIdentityFn&lt;T&gt; &#123;</span><br><span class=\"line\">    (arg: T): T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function identity&lt;T&gt;(arg: T): T &#123;</span><br><span class=\"line\">    return arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let myIdentity: GenericIdentityFn&lt;number&gt; = identity;</span><br></pre></td></tr></table></figure>\n<p><strong>所以对于描述那部分属性属于泛型部分，放在函数签名和放在接口上是需要区分的</strong></p>\n<h4 id=\"对于泛型类\"><a href=\"#对于泛型类\" class=\"headerlink\" title=\"对于泛型类\"></a>对于泛型类</h4><p>类有两部分：静态部分和实例部分。 泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型。</p>\n<h3 id=\"实际使用\"><a href=\"#实际使用\" class=\"headerlink\" title=\"实际使用\"></a>实际使用</h3><ol>\n<li>函数中泛型使用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function identity&lt;T&gt;(arg: T): T &#123;</span><br><span class=\"line\">  return arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let output = identity(&quot;myString&quot;);</span><br></pre></td></tr></table></figure>\n<p>注意我们没有必要使用尖括号来明确地传入类型；编译器可以查看参数的值，然后把 T 设置为他的类型，类型推论帮助我们保持代码精简和高可读性</p>\n<ol start=\"2\">\n<li>泛型变量的使用</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function loggingIdentity&lt;T&gt;(arg: T[]): T[]</span><br></pre></td></tr></table></figure>\n<p>我们把泛型变量T当做类型的一部分使用，而不是整个类型，增加了灵活性</p>\n","categories":["TS"],"tags":["G","TS"]},{"title":"TS高级类型（一）","url":"/blog-next/2019/06/30/TS%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h3 id=\"交叉类型（Intersection-Types）\"><a href=\"#交叉类型（Intersection-Types）\" class=\"headerlink\" title=\"交叉类型（Intersection Types）\"></a>交叉类型（Intersection Types）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// T 和 U 的并集</span><br><span class=\"line\">function extend&lt;T, U&gt;(first: T, second: U): T &amp; U &#123;</span><br><span class=\"line\">    let result = &lt;T &amp; U&gt;&#123;&#125;;</span><br><span class=\"line\">    for (let id in first) &#123;</span><br><span class=\"line\">        (&lt;any&gt;result)[id] = (&lt;any&gt;first)[id];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (let id in second) &#123;</span><br><span class=\"line\">        if (!result.hasOwnProperty(id)) &#123;</span><br><span class=\"line\">            (&lt;any&gt;result)[id] = (&lt;any&gt;second)[id];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"联合类型（Union-Types）\"><a href=\"#联合类型（Union-Types）\" class=\"headerlink\" title=\"联合类型（Union Types）\"></a>联合类型（Union Types）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 或运算</span><br><span class=\"line\">function padLeft(value: string, padding: string | number) &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型保护与区分类型（Type-Guards-and-differentiating-Types）\"><a href=\"#类型保护与区分类型（Type-Guards-and-differentiating-Types）\" class=\"headerlink\" title=\"类型保护与区分类型（Type Guards and differentiating Types）\"></a>类型保护与区分类型（Type Guards and differentiating Types）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let pet = getSmallPet();</span><br><span class=\"line\"></span><br><span class=\"line\">// 每一个成员访问都会报错</span><br><span class=\"line\">if (pet.swim) &#123;</span><br><span class=\"line\">    pet.swim();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 为了使这段代码工作，需要使用类型断言</span><br><span class=\"line\">if ((&lt;Fish&gt;pet).swim) &#123;</span><br><span class=\"line\">    (&lt;Fish&gt;pet).swim();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 为了不每次都写类型断言，我们可以利用 ts 的类型保护机制</span><br><span class=\"line\">function isFish(pet: Fish | Bird): pet is Fish &#123;</span><br><span class=\"line\">    return (&lt;Fish&gt;pet).swim !== undefined;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (isFish(pet)) &#123;</span><br><span class=\"line\">    pet.swim();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 对于 js 那六大类型，依然可以使用 typeof</span><br><span class=\"line\">typeof x === &quot;number&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// instance of 也可以识别（右边要求是一个构造函数）</span><br><span class=\"line\">padder instanceof StringPadder</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可以为-null-的类型\"><a href=\"#可以为-null-的类型\" class=\"headerlink\" title=\"可以为 null 的类型\"></a>可以为 null 的类型</h3><p><strong>如果编译器不能够去除 null 或 undefined，你可以使用类型断言手动去除。 语法是添加 !</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let s = &quot;foo&quot;;</span><br><span class=\"line\">s = null; // 错误, &#x27;null&#x27;不能赋值给&#x27;string&#x27;</span><br><span class=\"line\">let sn: string | null = &quot;bar&quot;;</span><br><span class=\"line\">sn = null; // 可以</span><br><span class=\"line\"></span><br><span class=\"line\">sn = undefined; // error, &#x27;undefined&#x27;不能赋值给&#x27;string | null&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h3><p>就是一个引用</p>\n<p>与交叉类型一起使用，可以创建出稀奇古怪的类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">type LinkedList&lt;T&gt; = T &amp; &#123; next: LinkedList&lt;T&gt; &#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"接口-vs-类型别名\"><a href=\"#接口-vs-类型别名\" class=\"headerlink\" title=\"接口 vs 类型别名\"></a>接口 vs 类型别名</h4><ol>\n<li>接口创建了一个新的名字，可以在任何地方使用，类型别名并不创建新名字，比如发生错误的时候不显示别名</li>\n<li>类型别名不能 extends 和</li>\n<li>通常使用接口，接口搞不定的时候再使用类型别名</li>\n</ol>\n<h3 id=\"字符串字面量类型\"><a href=\"#字符串字面量类型\" class=\"headerlink\" title=\"字符串字面量类型\"></a>字符串字面量类型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">type Easing = &quot;ease-in&quot; | &quot;ease-out&quot; | &quot;ease-in-out&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数字字面量类型\"><a href=\"#数字字面量类型\" class=\"headerlink\" title=\"数字字面量类型\"></a>数字字面量类型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function rollDie(): 1 | 2 | 3 | 4 | 5 | 6 &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可辨识联合（Disminated-Union）\"><a href=\"#可辨识联合（Disminated-Union）\" class=\"headerlink\" title=\"可辨识联合（Disminated Union）\"></a>可辨识联合（Disminated Union）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface Square &#123;</span><br><span class=\"line\">  kind: &quot;square&quot;;</span><br><span class=\"line\">  size: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Rectangle &#123;</span><br><span class=\"line\">  kind: &quot;rectangle&quot;;</span><br><span class=\"line\">  width: number;</span><br><span class=\"line\">  height: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Circle &#123;</span><br><span class=\"line\">  kind: &quot;circle&quot;;</span><br><span class=\"line\">  radius: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 让各个接口建立联系</span><br><span class=\"line\">type Shape = Square | Rectangle | Circle;</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用</span><br><span class=\"line\">function area(s: Shape) &#123;</span><br><span class=\"line\">  switch (s.kind) &#123;</span><br><span class=\"line\">    case &quot;square&quot;: return s.size * s.size;</span><br><span class=\"line\">    case &quot;rectangle&quot;: return s.height * s.width;</span><br><span class=\"line\">    case &quot;circle&quot;: return Math.PI * s.radius ** 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"完整性检查\"><a href=\"#完整性检查\" class=\"headerlink\" title=\"完整性检查\"></a>完整性检查</h4><p>万一有一个 case 不存在，发生错误怎么办<br>第一种就是 <code>| undefined</code><br>第二种就是 返回一个 never</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">default: return assertNever(s);</span><br><span class=\"line\">function assertNever(x: never): never &#123;</span><br><span class=\"line\">    throw new Error(&quot;Unexpected object: &quot; + x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"那么-never-是什么呢\"><a href=\"#那么-never-是什么呢\" class=\"headerlink\" title=\"那么 never 是什么呢\"></a>那么 never 是什么呢</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let x: never = undefined // error</span><br><span class=\"line\">never 只表示类型</span><br></pre></td></tr></table></figure>\n","categories":["TS"],"tags":["G","TS"]},{"title":"Vue2入口","url":"/blog-next/2020/09/21/Vue2%E5%85%A5%E5%8F%A3/","content":"<h2 id=\"web-应用-Runtime-Compiler-版本\"><a href=\"#web-应用-Runtime-Compiler-版本\" class=\"headerlink\" title=\"web 应用 Runtime + Compiler 版本\"></a>web 应用 Runtime + Compiler 版本</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Runtime+compiler ES modules build (for direct import in browser)</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;web-full-esm-browser-dev&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: resolve(<span class=\"string\">&#x27;web/entry-runtime-with-compiler.js&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">dest</span>: resolve(<span class=\"string\">&#x27;dist/vue.esm.browser.js&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&#x27;es&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">transpile</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">env</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123; <span class=\"attr\">he</span>: <span class=\"string\">&#x27;./entity-decoder&#x27;</span> &#125;,</span><br><span class=\"line\">    banner</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>入口是 <code>src/platforms/web/entry-runtime-with-compiler.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* @flow */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">&quot;core/config&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; warn, cached &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;core/util/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mark, measure &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;core/util/perf&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;./runtime/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; query &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./util/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; compileToFunctions &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./compiler/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  shouldDecodeNewlines,</span><br><span class=\"line\">  shouldDecodeNewlinesForHref,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./util/compat&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> idToTemplate = cached(<span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> el = query(id);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> el &amp;&amp; el.innerHTML;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mount = Vue.prototype.$mount;</span><br><span class=\"line\">Vue.prototype.$mount = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  el?: string | Element,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  hydrating?: boolean</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  el = el &amp;&amp; query(el);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (el === <span class=\"built_in\">document</span>.body || el === <span class=\"built_in\">document</span>.documentElement) &#123;</span><br><span class=\"line\">    process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp;</span><br><span class=\"line\">      warn(</span><br><span class=\"line\">        <span class=\"string\">`Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = <span class=\"built_in\">this</span>.$options;</span><br><span class=\"line\">  <span class=\"comment\">// resolve template/el and convert to render function</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options.render) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> template = options.template;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (template) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> template === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (template.charAt(<span class=\"number\">0</span>) === <span class=\"string\">&quot;#&quot;</span>) &#123;</span><br><span class=\"line\">          template = idToTemplate(template);</span><br><span class=\"line\">          <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp; !template) &#123;</span><br><span class=\"line\">            warn(</span><br><span class=\"line\">              <span class=\"string\">`Template element not found or is empty: <span class=\"subst\">$&#123;options.template&#125;</span>`</span>,</span><br><span class=\"line\">              <span class=\"built_in\">this</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (template.nodeType) &#123;</span><br><span class=\"line\">        template = template.innerHTML;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span>) &#123;</span><br><span class=\"line\">          warn(<span class=\"string\">&quot;invalid template option:&quot;</span> + template, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el) &#123;</span><br><span class=\"line\">      template = getOuterHTML(el);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (template) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">        mark(<span class=\"string\">&quot;compile&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(</span><br><span class=\"line\">        template,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          shouldDecodeNewlines,</span><br><span class=\"line\">          shouldDecodeNewlinesForHref,</span><br><span class=\"line\">          <span class=\"attr\">delimiters</span>: options.delimiters,</span><br><span class=\"line\">          <span class=\"attr\">comments</span>: options.comments,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"built_in\">this</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">      options.render = render;</span><br><span class=\"line\">      options.staticRenderFns = staticRenderFns;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">        mark(<span class=\"string\">&quot;compile end&quot;</span>);</span><br><span class=\"line\">        measure(<span class=\"string\">`vue <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>._name&#125;</span> compile`</span>, <span class=\"string\">&quot;compile&quot;</span>, <span class=\"string\">&quot;compile end&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mount.call(<span class=\"built_in\">this</span>, el, hydrating);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Get outerHTML of elements, taking care</span></span><br><span class=\"line\"><span class=\"comment\"> * of SVG elements in IE as well.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOuterHTML</span>(<span class=\"params\">el: Element</span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (el.outerHTML) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> el.outerHTML;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">    container.appendChild(el.cloneNode(<span class=\"literal\">true</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> container.innerHTML;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.compile = compileToFunctions;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Vue;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue-的入口\"><a href=\"#Vue-的入口\" class=\"headerlink\" title=\"Vue 的入口\"></a>Vue 的入口</h2><p>在这个入口 JS 的上方我们可以找到 Vue 的来源：<code>import Vue from &#39;./runtime/index&#39;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;core/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">&quot;core/config&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; extend, noop &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;shared/util&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mountComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;core/instance/lifecycle&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; devtools, inBrowser, isChrome &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;core/util/index&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  query,</span><br><span class=\"line\">  mustUseProp,</span><br><span class=\"line\">  isReservedTag,</span><br><span class=\"line\">  isReservedAttr,</span><br><span class=\"line\">  getTagNamespace,</span><br><span class=\"line\">  isUnknownElement,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;web/util/index&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; patch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./patch&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> platformDirectives <span class=\"keyword\">from</span> <span class=\"string\">&quot;./directives/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> platformComponents <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/index&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// install platform specific utils</span></span><br><span class=\"line\">Vue.config.mustUseProp = mustUseProp;</span><br><span class=\"line\">Vue.config.isReservedTag = isReservedTag;</span><br><span class=\"line\">Vue.config.isReservedAttr = isReservedAttr;</span><br><span class=\"line\">Vue.config.getTagNamespace = getTagNamespace;</span><br><span class=\"line\">Vue.config.isUnknownElement = isUnknownElement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// install platform runtime directives &amp; components</span></span><br><span class=\"line\">extend(Vue.options.directives, platformDirectives);</span><br><span class=\"line\">extend(Vue.options.components, platformComponents);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// install platform patch function</span></span><br><span class=\"line\">Vue.prototype.__patch__ = inBrowser ? patch : noop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// public mount method</span></span><br><span class=\"line\">Vue.prototype.$mount = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  el?: string | Element,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  hydrating?: boolean</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  el = el &amp;&amp; inBrowser ? query(el) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mountComponent(<span class=\"built_in\">this</span>, el, hydrating);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Vue;</span><br></pre></td></tr></table></figure>\n\n<p>我们发现 <code>import Vue from &#39;core/index&#39;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;./instance/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; initGlobalAPI &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./global-api/index&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; isServerRendering &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;core/util/env&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; FunctionalRenderContext &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;core/vdom/create-functional-component&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">initGlobalAPI(Vue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Vue.prototype, <span class=\"string\">&quot;$isServer&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: isServerRendering,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Vue.prototype, <span class=\"string\">&quot;$ssrContext&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$vnode &amp;&amp; <span class=\"built_in\">this</span>.$vnode.ssrContext;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// expose FunctionalRenderContext for ssr runtime helper installation</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Vue, <span class=\"string\">&quot;FunctionalRenderContext&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: FunctionalRenderContext,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.version = <span class=\"string\">&quot;__VERSION__&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Vue;</span><br></pre></td></tr></table></figure>\n\n<p>其中引入 <code>import Vue from &#39;./instance/index&#39;</code> 和 <code>initGlobalAPI(Vue)</code>，初始化全局 Vue API</p>\n<h2 id=\"Vue-的定义\"><a href=\"#Vue-的定义\" class=\"headerlink\" title=\"Vue 的定义\"></a>Vue 的定义</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; initMixin &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./init&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; stateMixin &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./state&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; renderMixin &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./render&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; eventsMixin &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./events&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; lifecycleMixin &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./lifecycle&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; warn &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../util/index&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Vue</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp; !(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> Vue)) &#123;</span><br><span class=\"line\">    warn(<span class=\"string\">&quot;Vue is a constructor and should be called with the `new` keyword&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._init(options);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">initMixin(Vue);</span><br><span class=\"line\">stateMixin(Vue);</span><br><span class=\"line\">eventsMixin(Vue);</span><br><span class=\"line\">lifecycleMixin(Vue);</span><br><span class=\"line\">renderMixin(Vue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Vue;</span><br></pre></td></tr></table></figure>\n\n<p>这里就是 <code>Vue</code> 的构造函数，这里分成了很多的 <code>mixin</code>，并把 <code>Vue</code> 传入，它们的功能都是给 <code>Vue.prototype</code> 上扩展一些方法，这样就把不同的功能代码分到了不同的模块去实现，也便于代码的维护和管理。</p>\n<h2 id=\"initGlobalAPI\"><a href=\"#initGlobalAPI\" class=\"headerlink\" title=\"initGlobalAPI\"></a><code>initGlobalAPI</code></h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initGlobalAPI</span>(<span class=\"params\">Vue: GlobalAPI</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// config</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> configDef = &#123;&#125;;</span><br><span class=\"line\">  configDef.get = <span class=\"function\">() =&gt;</span> config;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span>) &#123;</span><br><span class=\"line\">    configDef.set = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      warn(</span><br><span class=\"line\">        <span class=\"string\">&quot;Do not replace the Vue.config object, set individual fields instead.&quot;</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(Vue, <span class=\"string\">&quot;config&quot;</span>, configDef);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// exposed util methods.</span></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> these are not considered part of the public API - avoid relying on</span></span><br><span class=\"line\">  <span class=\"comment\">// them unless you are aware of the risk.</span></span><br><span class=\"line\">  Vue.util = &#123;</span><br><span class=\"line\">    warn,</span><br><span class=\"line\">    extend,</span><br><span class=\"line\">    mergeOptions,</span><br><span class=\"line\">    defineReactive,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  Vue.set = set;</span><br><span class=\"line\">  Vue.delete = del;</span><br><span class=\"line\">  Vue.nextTick = nextTick;</span><br><span class=\"line\"></span><br><span class=\"line\">  Vue.options = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  ASSET_TYPES.forEach(<span class=\"function\">(<span class=\"params\">type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    Vue.options[type + <span class=\"string\">&quot;s&quot;</span>] = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// this is used to identify the &quot;base&quot; constructor to extend all plain-object</span></span><br><span class=\"line\">  <span class=\"comment\">// components with in Weex&#x27;s multi-instance scenarios.</span></span><br><span class=\"line\">  Vue.options._base = Vue;</span><br><span class=\"line\"></span><br><span class=\"line\">  extend(Vue.options.components, builtInComponents);</span><br><span class=\"line\"></span><br><span class=\"line\">  initUse(Vue);</span><br><span class=\"line\">  initMixin(Vue);</span><br><span class=\"line\">  initExtend(Vue);</span><br><span class=\"line\">  initAssetRegisters(Vue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>initGlobalAPI</code> 是扩展 <code>Vue</code> 的静态方法的定义，这些方法是全局 API，官方文档都有</p>\n","categories":["vue"],"tags":["vue2.x","笔记"]},{"title":"Vue2.x源码目录设计","url":"/blog-next/2020/09/21/Vue2%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E8%AE%BE%E8%AE%A1/","content":"<p>Vue.js 的源码都在 src 目录下，其目录结构如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\">├── compiler        # 编译相关 </span><br><span class=\"line\">├── core            # 核心代码 </span><br><span class=\"line\">├── platforms       # 不同平台的支持</span><br><span class=\"line\">├── server          # 服务端渲染</span><br><span class=\"line\">├── sfc             # .vue 文件解析</span><br><span class=\"line\">├── shared          # 共享代码</span><br></pre></td></tr></table></figure>\n\n<!-- more  -->\n\n<h2 id=\"compiler\"><a href=\"#compiler\" class=\"headerlink\" title=\"compiler\"></a>compiler</h2><p>compiler 目录包含 Vue.js 所有编译相关的代码。它包括把模板解析成 ast 语法树，ast语法树优化，代码生成等功能</p>\n<p>编译的功能可以在构建时做（借助 webpack，vue-loader 等辅助插件），也可以运行时做，使用包含构建功能的 Vue.js。显然编译是一项耗性能的工作，所以更推荐前者 —— 离线编译</p>\n<h2 id=\"core\"><a href=\"#core\" class=\"headerlink\" title=\"core\"></a>core</h2><p>core 目录包含了 Vue.js 的核心代码，包含内置组件、全局 API 封装，Vue 实例化、观察者、虚拟DOM、工具函数等等</p>\n<p>这里的代码就是 Vue.js 的核心代码</p>\n<h2 id=\"platform\"><a href=\"#platform\" class=\"headerlink\" title=\"platform\"></a>platform</h2><p>Vue.js 是一个跨平台的 MVVM 框架，它可以跑在 web 上，也可以配合 weex 跑在 native 客户端上。platform 是 Vue.js 的入口，2个目录代表两个入口，分别打包成运行在 web 和 weex 上的 Vue.js</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><p>Vue.js 2.0 支持了服务端渲染，所有服务端渲染的相关逻辑都在这个目录下。注意：这部分代码是跑在服务端的 node.js，不要和跑在浏览器端的 Vue.js 混为一谈</p>\n<p>服务端渲染主要的工作是把组件渲染为服务端的 HTML 字符串，将他们直接发送到浏览器，最后将静态标记混合为客户端上完全交互的应用程序</p>\n<h2 id=\"sfc\"><a href=\"#sfc\" class=\"headerlink\" title=\"sfc\"></a>sfc</h2><p>通常我们开发 Vue.js 都会借助 webpack，然后通过 .vue 单文件来编写组件。这个目录下的代码逻辑会把 .vue 文件内容解析成一个 JavaScript 对象</p>\n<h2 id=\"shared\"><a href=\"#shared\" class=\"headerlink\" title=\"shared\"></a>shared</h2><p>从 Vue.js 的目录设计可以看到，作者把功能模块拆分的非常清楚，相关的逻辑放在一个独立的目录下维护，并且把复用的代码也抽成一个独立目录。</p>\n","categories":["vue"],"tags":["vue2.x","笔记"]},{"title":"XSRF防御","url":"/blog-next/2019/12/18/XSRF%E9%98%B2%E5%BE%A1/","content":"<h3 id=\"XSRF-又名-CSRF，它是前端常见的一种攻击方式，\"><a href=\"#XSRF-又名-CSRF，它是前端常见的一种攻击方式，\" class=\"headerlink\" title=\"XSRF 又名 CSRF，它是前端常见的一种攻击方式，\"></a>XSRF 又名 CSRF，它是前端常见的一种攻击方式，</h3><blockquote>\n<p>CSRF 的防御手段有很多，比如验证请求的 referer，但是 referer 也是可以伪造的，所以杜绝此类攻击的一种方式是服务器端要求每次请求都包含一个 token，这个 token 不在前端生成，而是在我们每次访问站点的时候生成，并通过 set-cookie 的方式种到客户端，然后客户端发送请求的时候，从 cookie 中对应的字段读取出 token，然后添加到请求 headers 中。这样服务端就可以从请求 headers 中读取这个 token 并验证，由于这个 token 是很难伪造的，所以就能区分这个请求是否是用户正常发起的。</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2019/12/18/vnpR7tbIwyJAkS4.png\" alt=\"xsrf.png\" loading=\"lazy\"></p>\n<h3 id=\"axios-会默认做三件事情\"><a href=\"#axios-会默认做三件事情\" class=\"headerlink\" title=\"axios 会默认做三件事情\"></a>axios 会默认做三件事情</h3><ul>\n<li><p>首先判断如果是配置 withCredentials 为 true 或者是同域请求，我们才会请求 headers 添加 xsrf 相关的字段。</p>\n</li>\n<li><p>如果判断成功，尝试从 cookie 中读取 xsrf 的 token 值。</p>\n</li>\n<li><p>如果能读到，则把它添加到请求 headers 的 xsrf 相关字段中。</p>\n</li>\n</ul>\n","categories":["web 安全"],"tags":["HTTP"]},{"title":"【转】因为故事，你才是与众不同的你 | 心理咨询实录","url":"/blog-next/2019/07/16/a-story/","content":"<p>【侵删】</p>\n<p>最近这些年，我遇到过最大的难题，</p>\n<p>不是写代码时反反复复百思不得其解的 bug，</p>\n<p>也不是应该留在机会更多的北京，还是回到熟人更多的成都</p>\n<p>而是有个女孩 W 总爱问我：“你为什么偏偏就喜欢我呢？”</p>\n<p>对于这个能杀人的问题， 我几乎束手无措。</p>\n<p>最初的时候认为，喜欢一个人，不就是一种本能吗，为什么非要说出一个理由来呢？可是按照故事的走向，这不是正确的答案。</p>\n<p>后来的结局是，她用了大量的论证方案来说服我，我不应该喜欢她，这样做不值得。</p>\n<p>我仍然清晰的记得那天她的样子，<br>我们在一家咖啡馆里坐着聊天，灯光有点暗淡，<br>她的长发遮住了部分脸庞</p>\n<p>她有点紧张，视线很少落在我身上，仿佛是沉溺在某种状态，手中将一个纸片折了又折。口中不停的讲述着某种道理：试图让我明白，我喜欢她，只不过是一种执念。</p>\n<p>她只会偶尔看我一眼，然后开玩笑的说到：咦，怎么回事，今天感觉你长得像苏有朋 。似乎在有意的缓和违和的氛围。</p>\n<p>而我最可爱也最搞笑的地方在于，我好像被她说服了。对啊，我为什么会喜欢她呢？其实也没那么喜欢，喜欢的只是一个幻觉而已。</p>\n<p>用她的话来说，她那天是这辈子游说水平最巅峰的时候。</p>\n<p>可这，也是我后来很长一段时间的痛苦所在，我也试图告诉自己其实是不喜欢她的，可是心里又暗暗的有一个声音在反对。</p>\n<p>为了帮助我，心里咨询师 H 把我带到商场，说，“现在你去买两条毛巾。注意留心观察周围所有的人。”</p>\n<p>我照着做了，当我回来的时候，他已经点了两杯咖啡坐在那里，对面坐着一个女孩，他们正在聊天。</p>\n<p>H 介绍我们相互认识，女孩 M 也是 H 的客户，今天是临时被约出来。</p>\n<p>H：“你们俩都是晚上会经常失眠，介意互相分享一下感受吗？”</p>\n<p>我：“我一般是晚上 9 点到 10 点比较困，可是到了晚上 12 点就比较精神，睡不着觉，大多数时候要到 1 点半才能真正睡着。”</p>\n<p>H：“睡不着的时候可能都会想些什么？”</p>\n<p>我：“我前几天晚上都在想为什么我会觉得她对我很重要，正如她告诉我的，其实我们之间没有发生什么特别深刻的事情，可是内心深处的声音告诉我，她对我真的很重要，我不太想得通自己为什么会这样”</p>\n<p>H：“所以你现在是希望她在你的心里变得不重要吗？”</p>\n<p>我摇了摇头。</p>\n<p>H：“那还是希望她能更重要一点咯？”，咨询师笑了笑，又问到。</p>\n<p>我愣在那里。不知道应该如何作答。</p>\n<p>H 顿了一会儿，开始和女孩 M 交流起来。</p>\n<p>H：“你呢，晚上一般几点睡着？”</p>\n<p>M：“不一定呀，可能 2 点，可能 3 点，也可能一整夜都睡不着，就算睡着了 5 点钟也会醒过来 ~”</p>\n<p>H：“醒了之后有什么感觉？”</p>\n<p>M：“一种被遗弃的感觉。”</p>\n<p>H：“如果长期这样就很痛苦了。”</p>\n<p>M 点了点头。</p>\n<p>H：“有找过朋友吗，有朋友在身边这样的孤独感就会少一点”。</p>\n<p>M：“刚开始有，可是大家都很忙，没有谁关注点永远都在我身上，所以后来我就不找她们了。”</p>\n<p>H：“OK，我明白了，今天谢谢你能来帮忙，明天请你吃饭。”</p>\n<p>女孩走了，只剩下我们两个人。</p>\n<p>H：“你对这个女孩的感受如何？”</p>\n<p>我：“这么可爱的女孩不应该这么孤独。”</p>\n<p>H：“你觉得她可爱？”</p>\n<p>我点了点头。</p>\n<p>H：“比你心中的那个她更可爱吗？”</p>\n<p>我：“那倒没有”</p>\n<p>H：“W 可爱在什么地方，长相吗？”</p>\n<p>我：“也不是，有一次我们在高速路旁的休息区，她急冲冲的往厕所的方向跑，边跑还边啊啊啊的叫，那个时候我觉得她特别可爱特别真实”。</p>\n<p>H：“所以她的真实非常打动你？”</p>\n<p>我点了点头，“她什么事都会跟我说”。</p>\n<p>H：“能举一些例子吗？”</p>\n<p>我：“比如说她的父母，她的弟弟，她的室友，她的高中班主任，她周围朋友的所有事，都会说”</p>\n<p>H：“过去的感情经历呢，也说吗？”</p>\n<p>我：“也会说。”</p>\n<p>H：“你还记得从出门到现在，你都遇到了哪些人吗？”</p>\n<p>我：“就你和刚才的女孩”。</p>\n<p>H：“我刚才有专门让你留意周围的人，这些人算你遇到的人吗？”</p>\n<p>我：“算吧”</p>\n<p>H：“有比 W 更漂亮的女生吗？”</p>\n<p>我：“当然有，好多个呢”</p>\n<p>H：“那如果这些漂亮的女孩，都非常爱你，要做你女朋友，现在你会愿意吗？”</p>\n<p>我犹豫了片刻，还是点了点头。</p>\n<p>H：“谢谢你坦诚的配合。”</p>\n<p>H 笑了笑，又问到：“可是现实却是，这些女孩不认识你，也不会有人爱你，更不会自己来要求要做你的女朋友，你会因此难过吗？”</p>\n<p>我：“不会”。</p>\n<p>H：“那我再问你一个小问题，如果刚才你看到的那些漂亮女孩和 M 都同时请你帮一个小忙，你只能答应一个人的请求，你会答应谁？”</p>\n<p>我：“当然是 M”</p>\n<p>H：“那在你心里 M 更重要咯？”</p>\n<p>我勉强回答：“算是吧”。</p>\n<p>H：“我们回到你失眠时候思考的问题，M 和你也一直没有说过话，为什么 M 会在你心里比陌生的漂亮女孩更重要呢？”</p>\n<p>我似乎有所明悟，可抓不到 H 抛出来的点。</p>\n<p>H：“再思考一个问题，其实你每天上班，吃饭，下班，沿途都会遇到非常多的人，他们有的比 W 更漂亮，有的比 W 更年轻，有的比 W 更优秀，可是为什么这些人在你这里就只是芸芸众生呢？”</p>\n<p>我：“说不清楚，可能就是相互不认识吧。”</p>\n<p>H：“你之前一直都在说服自己她不重要，你也不喜欢她？”</p>\n<p>我点了点头。“她也是这样说的，我认为她说的有道理。”</p>\n<p>H：“那我要告诉你答案，你就是爱她的，她对你而言，就是最重要的。”</p>\n<p>我：“为什么呢？难道不是因为执念吗？”</p>\n<p>H：“我们每天都会接触到非常多的人，可是大多数人都仅仅只是擦肩而过，你不知道她们有什么故事，她们也不知道你有什么故事。你和这些人没有建立任何连接。在你的大脑里，会把这些人自动的扁平化处理，对你而言，她们只是一个符号而已，所以他们一点不重要，忘记了也没关系。”</p>\n<p>H：“M 不一样，虽然你们没有正视对方，也没有相互说过一句话，可以她跟你有建立一点连接，你知道了她失眠比你还严重，你也期望这么可爱的女孩不应该活得这么孤独。所以在你的脑海里，她的形象就更具体，自然也就更重要一点。”</p>\n<p>我：“奥，我明白了，所以 W 对我而言非常重要，就是因为我知道她所有的事情，在我的脑海中她是最形象最具体的，自然也就是最重要咯？”</p>\n<p>H：“就是这样。所以答案是你确实是爱她的，这跟你是否有执念无关。”</p>\n<p>H：“你之所以会更加痛苦，是因为你强迫自己隐藏真实的自己。甚至试图把自己带向另外的一条道路。你知道你为什么会不停的去尝试告诉自己她不重要吗？”</p>\n<p>我：“不知道”</p>\n<p>H：“那我有一个问题，你喜欢一个不喜欢你的人，和你不喜欢一个不喜欢的人，哪种现实你更愿意接受？”</p>\n<p>我：“当然不太愿意接受喜欢一个不喜欢自己的人。”</p>\n<p>H：“所以其实你在逃避现实而已。”</p>\n<p>我恍然大悟。</p>\n<p>H 仍然穷追不舍：“你不敢面对一个不喜欢自己的她，也不愿意面对一个喜欢她的你自己”。</p>\n<p>H：“所以你不用去思考她重要不重要。她重要。你也不用去思考自己喜欢不喜欢她，你喜欢。关键的地方在于你的选择，一是继续掩耳盗铃告诉自己其实无所谓，二是勇敢面对，重新认真生活。”</p>\n<p>H：“你也不用刻意的去放下她。一个人之所以会在你的脑海中显得与众不同，是因为你知道她最多的故事，你感知到她最多的喜乐哀怒，她在你的脑海中就最立体。如果你放弃对生活的连接，即使随着时间不断的远去，即使慢慢离得远了，她也仍然最立体。所以你不用去想喜欢一个不喜欢自己的人怎么办，不用去强迫自己放下，什么都不用做，只需要正常的去生活，去工作，保持自己与外界的连接，自然就会有新的形象更加具体的出现。”</p>\n","categories":["综合"],"tags":["essay"]},{"title":"code-convention","url":"/blog-next/2018/12/16/code-convention/","content":"<blockquote>\n<p>“程序是写给人读的，只是偶尔让计算机执行一下。”                     -- Donald Knuth</p>\n</blockquote>\n<h2 id=\"基本的格式化\"><a href=\"#基本的格式化\" class=\"headerlink\" title=\"基本的格式化\"></a>基本的格式化</h2><h4 id=\"1-缩进层级\"><a href=\"#1-缩进层级\" class=\"headerlink\" title=\"1. 缩进层级\"></a>1. 缩进层级</h4><p>  个人偏好使用敲击 tab 时插入两个空格的习惯，配合 line-height 可以达到视觉上的舒服（个人偏好）,这也是谷歌的 javascript 编程规范使用两个空格的缩进。</p>\n<h4 id=\"2-语句结尾\"><a href=\"#2-语句结尾\" class=\"headerlink\" title=\"2.语句结尾\"></a>2.语句结尾</h4><p>  语句结尾一般是要写分号，虽然有赖于 Automatic Semicolon Insertion， ASI机制，JavaScript 省略分号也是可以正常工作的，但是规范建议不要省略分号，因为可能会导致一些错误，谷歌和 jquery 的规范都不建议省去，但是个人偏好不使用分号，毕竟打分号也挺累的，没有分号看起来更清爽一些。</p>\n<h4 id=\"3-行的长度\"><a href=\"#3-行的长度\" class=\"headerlink\" title=\"3. 行的长度\"></a>3. 行的长度</h4><p>  很多语言的编程规范都提到了一行代码不能超过 80 个字符的限制，是源于很久之前的文本编辑器的单行最好字符限制，虽然工作中一般也不限制这个，个人实践这个也是在 sublime 中设置过换行，我现在也倾向于将行的长度限定在 80 个字符</p>\n<h4 id=\"4-换行\"><a href=\"#4-换行\" class=\"headerlink\" title=\"4. 换行\"></a>4. 换行</h4><p>  当一行长度达到了单行最大字符数限制时，就需要手动将一行拆成两行，通常会在运算符后换行，下一行会增加两个层级的缩进。但是有一个例外，当给变量赋值时，第二行的位置应当与赋值运算符的位置保持对齐。个人也决定这样实践。</p>\n<h4 id=\"5-空行\"><a href=\"#5-空行\" class=\"headerlink\" title=\"5. 空行\"></a>5. 空行</h4><p>  每个流程控制语句之前，for 和 if 之前添加空行，这样做能够使你更加流畅的阅读这些语句，一般来讲，在下面这些场景中添加空行也是不错的注意（）</p>\n<ul>\n<li><p>在方法之间</p>\n</li>\n<li><p>在方法中的局部变量（local variable）和第一条语句之间</p>\n</li>\n<li><p>在单行或多行注释只是之前</p>\n</li>\n<li><p>return 之前</p>\n</li>\n<li><p>在方法内逻辑片段之间插入空行，提高可读性</p>\n</li>\n</ul>\n<h4 id=\"6-命名\"><a href=\"#6-命名\" class=\"headerlink\" title=\"6. 命名\"></a>6. 命名</h4><ul>\n<li>变量遵照 camel case<br>  变量用名词开头<br>  函数用动词开头</li>\n<li>常量使用大写字母加下划线</li>\n<li>构造函数遵照 Pascal case</li>\n</ul>\n<h4 id=\"7-直接量\"><a href=\"#7-直接量\" class=\"headerlink\" title=\"7. 直接量\"></a>7. 直接量</h4><ul>\n<li><p>字符串 推荐使用大括号，个人喜欢小括号</p>\n</li>\n<li><p>数字 整数和小数部分要写完整</p>\n</li>\n<li><p>null </p>\n<p>使用场景：  </p>\n<pre><code>1. 用来初始化一个变量，这个变量很可能赋值为一个对象  \n2. 用来和一个已经初始化的变量比较，这个变量可以是也可以不是一个对象  \n3. 当函数的参数期望是对象时，用作参数传入  \n4. 当函数的返回值期望是一个对象时，用作返回值传出  \n     \n</code></pre>\n<p>不建议使用的场景：  </p>\n<pre><code>1. 不要使用 null 来检测是否传入了某个参数  \n2. 不要使用 null 来检测一个未初始化的变量   \n  \n</code></pre>\n</li>\n<li><p>undefined<br>通过禁止使用 undefined，可以有效地确保只有在一种情况下 typeof 才会返回 undefined，那就是变量未声明的时候。 如果你使用了一个可能会也可能不会赋值一个对象的变量的时候，则将其赋值为 null (这点有待实践，个人习惯变量就是 undefined， 空对象就是 null)</p>\n</li>\n<li><p>对象直接量  也是推荐的写法</p>\n</li>\n<li><p>数组直接量  也是推荐的写法</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><h4 id=\"1-单行注释\"><a href=\"#1-单行注释\" class=\"headerlink\" title=\"1 单行注释\"></a>1 单行注释</h4><p>单行注释不应该以连续多行注释的形式出现，除非你注释掉一大段代码，只要当需要注释掉一段很长的文本时才需要多行注释</p>\n</li>\n</ul>\n<h4 id=\"2-多行注释\"><a href=\"#2-多行注释\" class=\"headerlink\" title=\"2 多行注释\"></a>2 多行注释</h4><p>注释和代码之间没有空行间隔，和单行注释一样，多行注释之前应当有一个空行，且缩进层级和其他描述代码保持一致，代码尾部不要用多行注释格式</p>\n<h4 id=\"3-使用注释\"><a href=\"#3-使用注释\" class=\"headerlink\" title=\"3 使用注释\"></a>3 使用注释</h4><p>当代码不够清晰时添加注释，当代码很明了时不应当添加注释</p>\n<h4 id=\"4-文档注释\"><a href=\"#4-文档注释\" class=\"headerlink\" title=\"4 文档注释\"></a>4 文档注释</h4><p>所有的方法<br>所有的构造函数<br>所有包含文档化方法的对象</p>\n<h3 id=\"语句和表达式\"><a href=\"#语句和表达式\" class=\"headerlink\" title=\"语句和表达式\"></a>语句和表达式</h3><p>不论块语句包含多行代码还是单行代码，都应当总是使用花括号</p>\n<h4 id=\"1-if-语句\"><a href=\"#1-if-语句\" class=\"headerlink\" title=\"1 if 语句\"></a>1 if 语句</h4><p>在左圆括号之前和右圆括号之后各添加一个空格</p>\n<h4 id=\"2-switch-语句\"><a href=\"#2-switch-语句\" class=\"headerlink\" title=\"2 switch 语句\"></a>2 switch 语句</h4><p>switch 语句中可以使用任意类型值，任何表达式都可用于 case 从句。但是在其他语言中则必须使用原始值和常量</p>\n<h4 id=\"3-for-循环\"><a href=\"#3-for-循环\" class=\"headerlink\" title=\"3 for 循环\"></a>3 for 循环</h4><p>尽可能避免使用 continue</p>\n<h4 id=\"4-for-in-循环\"><a href=\"#4-for-in-循环\" class=\"headerlink\" title=\"4 for-in 循环\"></a>4 for-in 循环</h4><p>用的时候最好使用 hasOwnPorperty 方法来过滤出实例属性，所以 for-in 是用来遍历实例对象和原型链中的 key 的</p>\n<h3 id=\"变量、函数和运算符\"><a href=\"#变量、函数和运算符\" class=\"headerlink\" title=\"变量、函数和运算符\"></a>变量、函数和运算符</h3><h4 id=\"1-变量声明\"><a href=\"#1-变量声明\" class=\"headerlink\" title=\"1 变量声明\"></a>1 变量声明</h4><p>建议将所有的 var 语句合并成一个语句，每个变量的初始化独占一行，赋值运算符应当对齐。对于那些没有初始值的变量来说，他们应当出现在 var 语句的尾部，合并之后可以让代码更短，下载更快</p>\n<h4 id=\"2-函数声明\"><a href=\"#2-函数声明\" class=\"headerlink\" title=\"2 函数声明\"></a>2 函数声明</h4><p>函数最好是先声明再使用，而且不能出现在块语句之内</p>\n<h4 id=\"3-函数调用间隔\"><a href=\"#3-函数调用间隔\" class=\"headerlink\" title=\"3 函数调用间隔\"></a>3 函数调用间隔</h4><p>一般情况下，在函数名和左括号之间没有空格没有空格，这样做是为了将它和块语句区分开来</p>\n<h4 id=\"4-立即调用的函数\"><a href=\"#4-立即调用的函数\" class=\"headerlink\" title=\"4 立即调用的函数\"></a>4 立即调用的函数</h4><p>js 中允许声明匿名函数，并将匿名函数赋值给变量或者属性</p>\n<h4 id=\"5-严格模式-strict-mode\"><a href=\"#5-严格模式-strict-mode\" class=\"headerlink\" title=\"5 严格模式 strict mode\"></a>5 严格模式 strict mode</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">use strict</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>希望通过这种方式来谨慎地解析 JavaScript，以减少错误。</p>\n<h4 id=\"6-相等\"><a href=\"#6-相等\" class=\"headerlink\" title=\"6 相等\"></a>6 相等</h4><p>1 我推荐除了 null 和 undefined 其余的都使用 === 进行判断<br>2 js 会发生强制类型转换，在运用 == 和 != 的时候</p>\n<h4 id=\"7-eval\"><a href=\"#7-eval\" class=\"headerlink\" title=\"7 eval\"></a>7 eval</h4><p>参数是一个字符串，eval 会将传入的字符串当做代码来执行。es5 严格模式禁止在一个封闭的作用域中使用它创建新变量和函数。这条限制帮助我们避免了 eval() 先天的安全漏洞，然而如果没有别的办法来完成当前任务，这个时候仍推荐使用 eval()</p>\n<h4 id=\"8-原始包装类型\"><a href=\"#8-原始包装类型\" class=\"headerlink\" title=\"8 原始包装类型\"></a>8 原始包装类型</h4><p>js 有三种包装类型 String Number Boolean<br>原始包装类型的主要作用是让原始值具有对象般的行为</p>\n<pre><code>var name = &#39;zhangsan&#39;\nconsole.log(name.toUpperCase())\n</code></pre>\n<p>这种做法之所以正确的原因就是因为，js 引擎创建了 String 类型的新实例，紧接着就被销毁了，当再次需要的时候就会创建另一个对象<br>尽管我们可以使用这些包装类型，当时强烈建议避免使用它们</p>\n","categories":["js"],"tags":["js","code-spec"]},{"title":"css堆叠上下文","url":"/blog-next/2019/05/09/css%E5%A0%86%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/","content":"<h3 id=\"堆叠顺序\"><a href=\"#堆叠顺序\" class=\"headerlink\" title=\"堆叠顺序\"></a>堆叠顺序</h3><ol start=\"0\">\n<li>z-index = -1</li>\n<li>background</li>\n<li>border</li>\n<li>div 块级元素</li>\n<li>浮动元素</li>\n<li>文字 内联元素</li>\n<li>position z-index=0</li>\n<li>position z-index&gt;0</li>\n</ol>\n<p>PS. 如果兄弟元素重叠，后面的盖在前面的身上</p>\n<h3 id=\"堆叠上下文\"><a href=\"#堆叠上下文\" class=\"headerlink\" title=\"堆叠上下文\"></a>堆叠上下文</h3><p><strong>我们知道一些属性能触发堆叠上下文，但是我们不知道堆叠上下文是什么</strong></p>\n<ol>\n<li>根元素 HTML</li>\n<li>z-index 不为 auto 的 relative absolute 定位</li>\n<li>opacity 小于 1 的元素</li>\n<li>transform 不为 none 的元素</li>\n<li>position: fixed 的元素</li>\n<li>-webkit-overflow-scrolling: touch 的元素</li>\n<li>isolation: isolute 的元素<br>...</li>\n</ol>\n<p>触发堆叠上下文后，会解决 z-index 的问题，上面 0 就会在 2 和 3 之间</p>\n","categories":["css"],"tags":["G","css"]},{"title":"ajax相关","url":"/blog-next/2019/03/19/ajax%E7%9B%B8%E5%85%B3/","content":"<h3 id=\"AJAX-功能\"><a href=\"#AJAX-功能\" class=\"headerlink\" title=\"AJAX 功能\"></a>AJAX 功能</h3><p>客户端用来发送请求</p>\n<ol>\n<li>js 设置请求头<br>第一部分: request.open(&#39;get&#39;, &#39;xxx&#39;)<br>第二部分: request.setHeader(&#39;Content-Type&#39;, &#39;x-www-form-urlencoded&#39;)<br>第四部分: request.send(&#39;a=1&amp;b=2&#39;)</li>\n<li>js 获取响应头<br>第一部分：request.status request.statusText<br>第二部分： request.getResponseHeader() 或者 request.getAllResponseHeaders()<br>第四部分： request.responseText</li>\n</ol>\n<p><strong>P.S.</strong> 注意第四部分纸盒第二部分的 content-type 有关</p>\n<h3 id=\"jQuery-也提供了-promise\"><a href=\"#jQuery-也提供了-promise\" class=\"headerlink\" title=\"jQuery 也提供了 promise\"></a>jQuery 也提供了 promise</h3><p><code>$.ajax().then(()=&gt;&#123;&#125;, ()=&gt;&#123;&#125;)</code></p>\n<blockquote>\n<p>promise 解决的问题是回调函数名称不一样的问题<br>好像上面这种说法也有道理，同时又解决了回调地狱</p>\n</blockquote>\n<h3 id=\"代码链接\"><a href=\"#代码链接\" class=\"headerlink\" title=\"代码链接\"></a>代码链接</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9ub2RlanMtdGVzdC1jb3JzL2NvbW1pdHMvbWFzdGVy\">自己实现的ajax<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["js"],"tags":["js","G","ajax"]},{"title":"css tricks","url":"/blog-next/2018/12/06/css-tricks/","content":"<h3 id=\"css-cascading-style-sheets\"><a href=\"#css-cascading-style-sheets\" class=\"headerlink\" title=\"css (cascading style sheets)\"></a>css (cascading style sheets)</h3><h4 id=\"color-inherit\"><a href=\"#color-inherit\" class=\"headerlink\" title=\"color inherit\"></a>color inherit</h4><p>  颜色要多用继承，这样可以统一修改</p>\n<h4 id=\"inline-block\"><a href=\"#inline-block\" class=\"headerlink\" title=\"inline-block\"></a>inline-block</h4><p>  最大的好处就是可以不写宽度，和 inline-flex 一样在行内具有块元素的属性<br>  用 vertical-align 或者 font-size 处理默认的高度</p>\n<h4 id=\"pseudo-class\"><a href=\"#pseudo-class\" class=\"headerlink\" title=\"pseudo class\"></a>pseudo class</h4><p>  唯一需要指定的就是 content</p>\n","categories":["css"],"tags":["G","css"]},{"title":"element-ui的一些表格处理","url":"/blog-next/2020/02/26/element-ui%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A1%A8%E6%A0%BC%E5%A4%84%E7%90%86/","content":"<p><em>2020 疫情到来，转眼就休息了两个月，是时候开始新的征程了，加油 XD</em></p>\n<h3 id=\"应用一（表格合并）\"><a href=\"#应用一（表格合并）\" class=\"headerlink\" title=\"应用一（表格合并）\"></a>应用一（表格合并）</h3><p>总体思路就是把需要合并索引放到一个二维数组里，这个二维数组代表每一列，每一列里不是 0 的就是合并的行数，<br>具体做法就是用类似于计数排序的思路（对应hash的每一个值去计数），如果下一行的某个属性和上一行的某个属性相同，我们就要索引值加 1，数组里也要相应的补 0，<br>如果不相同，就补 1，并定位到当前位置，这样我们就能得到我们的一个二维数组，再通过 objectSpanMethod 取到对应的值去合并表格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      position: 0,</span><br><span class=\"line\">      spanArr: [] // 二维数组</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    rowspan(idx, prop) &#123;</span><br><span class=\"line\">      this.spanArr[idx] = [];</span><br><span class=\"line\">      this.position = 0;</span><br><span class=\"line\">      this.tableData.forEach((item, index) =&gt; &#123;</span><br><span class=\"line\">        if (index === 0) &#123;</span><br><span class=\"line\">          this.spanArr[idx].push(1);</span><br><span class=\"line\">          this.position = 0;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          if (this.tableData[index][prop] === this.tableData[index - 1][prop]) &#123;</span><br><span class=\"line\">            this.spanArr[idx][this.position] += 1; // 有相同项</span><br><span class=\"line\">            this.spanArr[idx].push(0); // 名称相同后往数组里面加一项0</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            this.spanArr[idx].push(1); //同列的前后两行单元格不相同</span><br><span class=\"line\">            this.position = index;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    objectSpanMethod(&#123; row, column, rowIndex, columnIndex &#125;) &#123;</span><br><span class=\"line\">      if (columnIndex === 0) &#123;</span><br><span class=\"line\">        const row = this.spanArr[0][rowIndex];</span><br><span class=\"line\">        const col = row &gt; 0 ? 1 : 0;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">          rowspan: row,</span><br><span class=\"line\">          colspan: col</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (this.paramsType === 1) &#123;</span><br><span class=\"line\">        if (columnIndex === 1) &#123;</span><br><span class=\"line\">          if (this.spanArr[1]) &#123;</span><br><span class=\"line\">            const row = this.spanArr[1][rowIndex];</span><br><span class=\"line\">            const col = row &gt; 0 ? 1 : 0;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">              rowspan: row,</span><br><span class=\"line\">              colspan: col</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["vue"],"tags":["vue","element-ui"]},{"title":"ES6","url":"/blog-next/2017/10/04/es6/","content":"<p>最近用hexo搭建了一个博客，采用next主题，用来记录自己工作学习生活的点点滴滴<br>正好想巩固一下es6的基础知识，好了，现在开始</p>\n<p><img src=\"http://oxb2vhvil.bkt.clouddn.com/es6-logo.jpg\" alt=\"es6 Screenshot\" loading=\"lazy\"></p>\n<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><blockquote>\n<p>数据解构 对象解构</p>\n</blockquote>\n<h3 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h3><ul>\n<li><p><code>[a, b] = [1, 2]</code> // 1 2</p>\n</li>\n<li><p><code>[a, b, ...rest] = [1,2,3,4,5,6]</code> [3, 4, 5, 6]</p>\n</li>\n<li><p><code>[a, , , b] = [1, 2, 3, 4, 5]</code> // 1 4</p>\n</li>\n<li><p><code>默认值 [a, b, c=3] = [1, 2]</code>   </p>\n</li>\n</ul>\n<p><strong>使用场景</strong> 1/变量交换</p>\n<h3 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h3><ul>\n<li><p><code>&#123;a, b&#125; = &#123;a: 1, b: 2&#125;</code> // 1 2</p>\n</li>\n<li><p><code>&#123;a=2, b&#125; = &#123;a: 1, b: 2&#125;</code> // 1 2</p>\n</li>\n</ul>\n<ul>\n<li><strong>使用场景</strong>    </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">* let data = &#123;title: &#x27;abc&#x27;, test: [&#123;title: &#x27;test&#x27;&#125;]&#125;</span><br><span class=\"line\">* let &#123;title: f,test: [&#123;title: s&#125;]&#125;  = data        </span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"正则扩展\"><a href=\"#正则扩展\" class=\"headerlink\" title=\"正则扩展\"></a>正则扩展</h2><blockquote>\n<p>u y 修饰符</p>\n</blockquote>\n<ul>\n<li><p><code>reg= new RegExp(/xyz/i)</code></p>\n</li>\n<li><p><code>reg= new RegExp(/xyz/ig,&#39;i&#39;)</code> <strong>后面的修饰符覆盖前面的修饰符</strong></p>\n</li>\n<li><p><code>reg.flags</code> // &#39;i&#39;</p>\n</li>\n<li><p><code>/b+/y.exec(&#39;bbbbb_bbb&#39;)</code> // 只能匹配一次</p>\n</li>\n<li><p><code>/b+/g.exec(&#39;bbbbb_bbb&#39;)</code> // 可以匹配两次 <strong>reg.sticky可以判断是不是y</strong></p>\n</li>\n<li><p><code>/美&#123;2&#125;/u.test(&#39;美美&#39;)</code> <strong>如果不能识别多个字符串，要加u</strong></p>\n</li>\n</ul>\n<h2 id=\"字符串扩展\"><a href=\"#字符串扩展\" class=\"headerlink\" title=\"字符串扩展\"></a>字符串扩展</h2><blockquote>\n<p>unicode表示法  遍历接口  模板字符串 新增的十种方法</p>\n</blockquote>\n<h3 id=\"unicode\"><a href=\"#unicode\" class=\"headerlink\" title=\"unicode\"></a>unicode</h3><ul>\n<li><p><code>console.log(</code>\\u0061/<code>)</code></p>\n</li>\n<li><p><code>console.log(</code>\\u00617<code>)</code></p>\n</li>\n<li><p><code>console.log(</code>\\u{00617}<code>)</code> <strong>大于两个字符的需要用大括号包起来</strong></p>\n</li>\n<li><pre><code> ```\n  let str = `\\u&#123;20BB7&#125;`\n\n  str.charCodeAt(0) // 55362\n  str.charCodeAt(1) // 57271 \n\n  str.codePointAt(0) // 134071\n  str.codePointAt(1) // 57571 \n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">**codePointAt比charCode更智能，charCodeAt只能识别两位字节，fromCharCode也一样，fromCodePoint更能灵活识别unicode**</span><br><span class=\"line\"></span><br><span class=\"line\">### 遍历接口</span><br><span class=\"line\"></span><br><span class=\"line\">- ``\\u&#123;20BB7&#125;abc`通过for循环不能正常遍历，通过of可以正确识别`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### api</span><br><span class=\"line\"></span><br><span class=\"line\">- `&#x27;string&#x27;.includes(&#x27;t&#x27;)` // true</span><br><span class=\"line\"></span><br><span class=\"line\">- `&#x27;string&#x27;.startsWith(&#x27;s&#x27;)` // true</span><br><span class=\"line\"></span><br><span class=\"line\">- `&#x27;string&#x27;.endsWith(&#x27;ng&#x27;)` // true</span><br><span class=\"line\"></span><br><span class=\"line\">- `&#x27;string&#x27;.repeat(2)` // stringstring</span><br><span class=\"line\"></span><br><span class=\"line\">- `&#x27;1&#x27;.padStart(2, &#x27;0&#x27;)` // 01</span><br><span class=\"line\"></span><br><span class=\"line\">- `&#x27;1&#x27;.padEnd(2, &#x27;0&#x27;)` // 10</span><br><span class=\"line\"></span><br><span class=\"line\">- `String.raw `Hello \\n girl`` // 不能换行，raw会在&#x27;/&#x27;之前再一次转义</span><br><span class=\"line\"></span><br><span class=\"line\">### 字符串模板</span><br><span class=\"line\"></span><br><span class=\"line\">- `$&#123;str&#125;` // 很简单，不做赘述</span><br><span class=\"line\"></span><br><span class=\"line\">-\t\t```</span><br><span class=\"line\">\t\tlet str = &#123;</span><br><span class=\"line\">\t\t\tname: &#x27;ez&#x27;,</span><br><span class=\"line\">\t\t\tage: 1000</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tabc`i am $&#123;usr.name&#125;$&#123;usr.age&#125;`</span><br><span class=\"line\">\t\tfunction abc(s,v1,v2) &#123; console.log(s,v1, v2)</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n         \n</code></pre>\n</li>\n</ul>\n<ul>\n<li><strong>应用场景</strong> 1.处理标签，防止xss攻击  2.处理多语言标签渲染</li>\n</ul>\n<h2 id=\"数值扩展\"><a href=\"#数值扩展\" class=\"headerlink\" title=\"数值扩展\"></a>数值扩展</h2><blockquote>\n<p>新增的方法 方法调整</p>\n</blockquote>\n<ul>\n<li><p>二进制都是0b表示 <code>console.log(0b111)</code> 不分大小写 // 7</p>\n</li>\n<li><p>八进制都是0o表示 <code>console.log(0o111)</code>  // 73</p>\n</li>\n<li><p>判断是不是有尽 <code>Number.isFinite(19303295)</code>  // true</p>\n</li>\n<li><p>判断是不是数字 <code>Number.isNaN(NaN)</code> // 以上这两使用频率不是很高</p>\n</li>\n<li><p>判断是不是整数 <code>Number.isInteger(10.1)</code> // false     <code>Number.isInteger(10.0)</code> // true</p>\n</li>\n<li><p>取整数部分 <code>Math.trunc(5.2) Math.trunc(5.9)</code> // 5</p>\n</li>\n<li><p>判断正负  <code>Math.sign(3)</code> // 1 -1 0 NaN</p>\n</li>\n<li><p>返回平方和的平方根 <code>Math.hypot([value1[, value2[, ...]]])</code> //</p>\n</li>\n</ul>\n<h2 id=\"数组扩展\"><a href=\"#数组扩展\" class=\"headerlink\" title=\"数组扩展\"></a>数组扩展</h2><blockquote>\n<p>新增的方法 of from keys values entries</p>\n</blockquote>\n<h3 id=\"api\"><a href=\"#api\" class=\"headerlink\" title=\"api\"></a>api</h3><ul>\n<li><p><code>Array.of(0,2,3)</code> // [0, 2, 3]</p>\n</li>\n<li><p><code>Array.from(document.queryAll(&#39;p&#39;))</code> // []</p>\n</li>\n<li><p><code>Array.from(&#123;length: 100000&#125;, (v, i) =&gt; i)</code> // 会先生成 undefined，然后赋值</p>\n</li>\n<li><p><code>Array.from([1,2,4], (item) =&gt; &#123;return item*2&#125;)</code> // [2, 4, 8] 和map    一样</p>\n</li>\n<li><p><code>[1, &#39;a&#39;, undefined].fill(7)</code> // [7, 7, 7]</p>\n</li>\n<li><p><code>[1, &#39;a&#39;, undefined].fill(7, 1, 3)</code> // [1, 7, 7]</p>\n</li>\n<li><pre><code> ```\n  let b c\n  b = [1, &#39;a&#39;, undefined].keys() \n  // b = [1, &#39;a&#39;, undefined].values()\n  // c = [1, &#39;a&#39;, undefined].entries()\n  for (let index of b) &#123;console.log(index)&#125;\n  //for (let [index, value] of c) &#123;console.log(index, value)&#125;\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">* *复制数组元素到指定位置(一个比较有意思的api)*</span><br><span class=\"line\">- `[1,2,3,4,5].copyWithin(0, 2, 5)` // [3, 4, 5, 4, 5]</span><br><span class=\"line\"></span><br><span class=\"line\">**查找（比较重要）**      </span><br><span class=\"line\"></span><br><span class=\"line\">- `[3, 4, 5, 4, 5].findIndex((item) =&gt; &#123;return item&gt;4&#125;)` // 5</span><br><span class=\"line\"></span><br><span class=\"line\">- `[3, 4, 5, 4, 5].find((item) =&gt; &#123;return item&gt;4&#125;)` // 2</span><br><span class=\"line\"></span><br><span class=\"line\">`[1, NaN, 9].includes(NaN)` // true **可以判断NaN这个比较厉害**</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 函数扩展</span><br><span class=\"line\">&gt; 参数默认值 rest参数 扩展运算符 箭头函数 this绑定 尾调用</span><br><span class=\"line\"></span><br><span class=\"line\">### 默认值</span><br><span class=\"line\"></span><br><span class=\"line\">- 参数默认值要注意必须写在参数最后面</span><br><span class=\"line\"></span><br><span class=\"line\">- 函数参数是按值传递的</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>{<br>  let x=&#39;test&#39;;</p>\n<pre><code>function test2(x,y=x)&#123;\n  console.log(&#39;作用域&#39;,x,y);\n&#125;\ntest2(&#39;kill&#39;);\n</code></pre>\n<p>}      </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- rest参数可以通过 (...args) 来获取函数的 arguments</span><br><span class=\"line\"></span><br><span class=\"line\">- 箭头函数不做赘述</span><br><span class=\"line\"></span><br><span class=\"line\">- 尾调用就是把函数作为参数传入，返回另一个函数，类似于函数柯里化这种</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>{<br>function tail(x){<br>  console.log(&#39;tail&#39;,x);<br>}<br>function fx(x){<br>  return tail(x)<br>}<br>fx(123)<br>}</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 对象扩展</span><br><span class=\"line\">&gt; 对象新增特性： 简洁表示法 属性表达式 扩展预算符 新增api</span><br><span class=\"line\"></span><br><span class=\"line\">### 属性和方法的简洁表示</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>      let o=1;\n      let k=2;\n      let es5=&#123;\n          o:o,\n          k:k\n      &#125;;\n      let es6=&#123;\n          o,\n          k\n      &#125;;\n      console.log(es5,es6);\n\n      let es5_method=&#123;\n          hello:function()&#123;\n              console.log(&#39;hello&#39;);\n          &#125;\n      &#125;;\n      let es6_method=&#123;\n          hello()&#123;\n              console.log(&#39;hello&#39;);\n          &#125;\n      &#125;;\n      console.log(es5_method.hello(),es6_method.hello());\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 属性表达式（很重要）</span><br></pre></td></tr></table></figure>\n      let a=&#39;b&#39;;\n      let es5_obj=&#123;\n          a:&#39;c&#39;,\n          b:&#39;c&#39;\n      &#125;;\n\n      let es6_obj=&#123;\n          [a]:&#39;c&#39;\n      &#125;\n\n      console.log(es5_obj,es6_obj);\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 新增api</span><br><span class=\"line\">&gt; is assign entries</span><br><span class=\"line\"></span><br><span class=\"line\">- `console.log(&#x27;字符串&#x27;,Object.is(&#x27;abc&#x27;,&#x27;abc&#x27;),&#x27;abc&#x27;===&#x27;abc&#x27;);`  </span><br><span class=\"line\">\t`console.log(&#x27;数组&#x27;,Object.is([],[]),[]===[]);`</span><br><span class=\"line\"></span><br><span class=\"line\">- `console.log(&#x27;拷贝&#x27;,Object.assign(&#123;a:&#x27;a&#x27;&#125;,&#123;b:&#x27;b&#x27;&#125;));`</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>  let test={k:123,o:456};<br>for(let [key,value] of Object.entries(test)){<br>  console.log([key,value]);<br>}</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## symbol用法</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>{<br>let a1=Symbol.for(&#39;abc&#39;);<br>let obj={<br>  // 基础用法<br>  [a1]:&#39;123&#39;,<br>  &#39;abc&#39;:345,<br>  &#39;c&#39;:456<br>};<br>console.log(&#39;obj&#39;,obj);</p>\n</li>\n</ul>\n<p>// 只能取到普通属性<br>  for(let [key,value] of Object.entries(obj)){<br>    console.log(&#39;let of&#39;,key,value);<br>  }</p>\n<p>// 只能取到symbol声明<br>  Object.getOwnPropertySymbols(obj).forEach(function(item){<br>    console.log(obj[item]);<br>  })</p>\n<p>// 可以去到实例的所有属性<br>  Reflect.ownKeys(obj).forEach(function(item){<br>    console.log(&#39;ownkeys&#39;,item,obj[item]);<br>  })<br>}</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 数据结构</span><br><span class=\"line\">&gt; set weakset map weakmap</span><br><span class=\"line\"></span><br><span class=\"line\">### set</span><br><span class=\"line\"></span><br><span class=\"line\">#### new Set</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>let list = new Set();<br>list.add(5);<br>list.add(7);</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>let arr = [1,2,3,4,5];<br>let list = new Set(arr);</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">`长度 list.size`</span><br><span class=\"line\"></span><br><span class=\"line\">#### 去重</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>let arr = [1,2,3,1,&#39;2&#39;];<br>let list2 = new Set(arr);<br>list.add(1)<br>console.log(&#39;unique&#39;,list2);</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">**可以利用set这个特性去重**</span><br><span class=\"line\"></span><br><span class=\"line\">#### set实例的方法</span><br></pre></td></tr></table></figure>\n<p>let arr=[&#39;add&#39;,&#39;delete&#39;,&#39;clear&#39;,&#39;has&#39;];<br>let list=new Set(arr);</p>\n<p>console.log(&#39;has&#39;,list.has(&#39;add&#39;));<br>console.log(&#39;delete&#39;,list.delete(&#39;add&#39;),list);<br>list.clear();<br>console.log(&#39;list&#39;,list);</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### set实例遍历</span><br><span class=\"line\">**可以用对象遍历的所有方法**</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>let arr=[&#39;add&#39;,&#39;delete&#39;,&#39;clear&#39;,&#39;has&#39;];<br>let list=new Set(arr);</p>\n<p>for(let key of list.keys()){<br>    console.log(&#39;keys&#39;,key);<br>}<br>for(let value of list.values()){<br>    console.log(&#39;value&#39;,value);<br>}<br>for(let [key,value] of list.entries()){<br>    console.log(&#39;entries&#39;,key,value);<br>}</p>\n<p>list.forEach(function(item){console.log(item);})</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### weakSet</span><br><span class=\"line\">&gt; 1 元素必须是对象 </span><br><span class=\"line\">&gt; 2 只是对象的弱引用，不会被垃圾回收机制检测到</span><br><span class=\"line\">&gt; 3 没有clear方法</span><br><span class=\"line\">&gt; 4 不能遍历</span><br><span class=\"line\"></span><br><span class=\"line\">### map</span><br><span class=\"line\">&gt; 直接上代码，不好说</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>let map = new Map();<br>let arr=[&#39;123&#39;];</p>\n<p>map.set(arr,456);</p>\n<p>console.log(&#39;map&#39;,map,map.get(arr));</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">let map = new Map([[&#x27;a&#x27;,123],[&#x27;b&#x27;,456]]);</span><br><span class=\"line\">console.log(&#x27;map args&#x27;,map);</span><br><span class=\"line\">console.log(&#x27;size&#x27;,map.size);</span><br><span class=\"line\">console.log(&#x27;delete&#x27;,map.delete(&#x27;a&#x27;),map);</span><br><span class=\"line\">console.log(&#x27;clear&#x27;,map.clear(),map);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"weakmap\"><a href=\"#weakmap\" class=\"headerlink\" title=\"weakmap\"></a>weakmap</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let weakmap=new WeakMap();</span><br><span class=\"line\"></span><br><span class=\"line\">let o=&#123;&#125;;</span><br><span class=\"line\">weakmap.set(o,123);</span><br><span class=\"line\">console.log(weakmap.get(o));</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"有意思的代码\"><a href=\"#有意思的代码\" class=\"headerlink\" title=\"有意思的代码\"></a>有意思的代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. Distance between two points</span><br><span class=\"line\">const distance = (x0, y0, x1, y1) =&gt; Math.hypot(x1 - x0, y1 - y0)</span><br></pre></td></tr></table></figure>\n","categories":["js"],"tags":["es6"]},{"title":"gif 压缩工具 gifsicle","url":"/blog-next/2018/12/15/gif-%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7-gifsicle/","content":"<h3 id=\"gifsicle\"><a href=\"#gifsicle\" class=\"headerlink\" title=\"gifsicle\"></a>gifsicle</h3><p>gifsicle 是一个 gif 的压缩工具，可以使用 brew 安装</p>\n<pre><code>brew install gifsicle\n</code></pre>\n<p>使用下面命令可压缩 gif, optimize就是要压缩的百分比</p>\n<pre><code>gifsicle --batch --optimize=3 quicksort.gif -o newfile.gif\n</code></pre>\n<p>当然第一次用免不了不会用，这个时候可以安装 tldr，看这个简单的应用应该就可以满足了</p>\n<p><a href=\"https://i.loli.net/2018/12/15/5c14bdac195d5.jpg\"><img src=\"https://i.loli.net/2018/12/15/5c14bdac195d5.jpg\" alt=\"1544863126044.jpg\" loading=\"lazy\"></a></p>\n<p>最后感觉 gifsicle 这算什么单词，记不住，在 zshrc 中写一个 alias</p>\n<pre><code>alias gif3=&#39;gifsicle --batch --optimize=3&#39;\n</code></pre>\n<p>以后就可以这样用了</p>\n<pre><code>gif3 1.gif -o 2.gif\n</code></pre>\n<p>一般情况下呢都是写文档要用，直接压缩原图就可以了</p>\n<pre><code>gif3 x.gif\n</code></pre>\n","categories":["工具"],"tags":["command"]},{"title":"es6之promise","url":"/blog-next/2018/11/05/es6%E4%B9%8Bpromise/","content":"<h3 id=\"promise-功能\"><a href=\"#promise-功能\" class=\"headerlink\" title=\"promise 功能\"></a>promise 功能</h3><p>  首先讲一下 promise 为什么会出现<br>    在实际的场景中，有非常多的场景我们不能立即知道该如何继续往下执行，最重要的就是ajax，<br>    通俗来说，由于网速的不同，可能你得到返回值的时间也是不同的，这个时候我们就需要等待，结果出来了之后才知道怎么样继续下去<br>    这个时候我们就需要用回调函数来执行，但是如果里面还有一层 ajax 请求，请求需要的新的参数还是由第一次 ajax 请求获得的<br>    当出现第三个ajax(甚至更多)仍然依赖上一个请求的时候，我们的代码就变成了一场灾难。这场灾难，往往也被称为回调地狱<br>    因此我们需要一个称为 promise 的东西来解决这个问题<br>    当然 promise 解决的不仅仅是回调地狱的问题，使代码具有更好的可读性和可维护性，可以将数据请求和数据处理分割开<br>    当然回调函数的原理呢就是函数调用栈<br>    promise 的原理呢就是 micro-task 队列<br>    如果浏览器已经支持了 promise 对象，那么我们就知道浏览器的 js 引擎里已经有了 promise 队列，这样我们就可以将<br>    我们的任务放到 promise 队列中去<br>    {<br>      1<br>      promise 有三种状态<br>      1 pending 等待中，进行中，表示还没有结果<br>      2 resolved(Fulfilled) 已经完成，得到了我们想要的结果，可以继续往下执行<br>      3 rejected 表示得到结果，但是不是想要的，所以拒绝执行<br>      这三种状态不受外界影响，而且状态只能从pending改变为resolved或者rejected，并且不可逆。<br>      在Promise对象的构造函数中，将一个函数作为第一个参数。而这个函数，就是用来处理Promise的状态变化。<br>      <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">  if (true) &#123; resolve() &#125;;</span><br><span class=\"line\">  if (false) &#123; reject() &#125;;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br>    }<br>    {<br>      2<br>      promise 对象中的 then 方法， 可以接受构造函数中处理的状态变化，并分别对应执行<br>      then 方法有 2 个参数， 第一个函数接受 resolved 状态的执行，第二个参数接受 reject 状态的执行<br>      <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function fn(num) &#123;</span><br><span class=\"line\">  return new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">    if (typeof num == &#x27;number&#x27;) &#123;</span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      reject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).then(function () &#123;</span><br><span class=\"line\">    console.log(&#x27;参数是一个number值&#x27;);</span><br><span class=\"line\">  &#125;, function () &#123;</span><br><span class=\"line\">    console.log(&#x27;参数不是一个number值&#x27;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(&#x27;hahha&#x27;);</span><br><span class=\"line\">fn(1234);</span><br></pre></td></tr></table></figure><br>      then方法的执行结果也会返回一个Promise对象。因此我们可以进行then的链式执行，这也是解决回调地狱的主要方式。<br>    }<br>    {<br>      3 数据传递<br>      对 ajax 进行一个封装<br>      {<br>        var url = &#39;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ocS50aWdlcmJyb2tlcnMuY29tL2Z1bmRhbWVudGFsL2ZpbmFuY2VfY2FsZW5kYXIvZ2V0VHlwZS8yMDE3LTAyLTI2LzIwMTctMDYtMTAmIzM5Ow==\">https://hq.tigerbrokers.com/fundamental/finance_calendar/getType/2017-02-26/2017-06-10&#39;<i class=\"fa fa-external-link-alt\"></i></span>;<br>        封装一个get请求的方法<br>        <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function getJSON(url) &#123;</span><br><span class=\"line\">  return new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\">    var XHR = new XMLHttpRequest();</span><br><span class=\"line\">    XHR.open(&#x27;GET&#x27;, url, true);</span><br><span class=\"line\">    XHR.send();</span><br><span class=\"line\">    XHR.onreadystatechange = function () &#123;</span><br><span class=\"line\">      if (XHR.readyState == 4) &#123;</span><br><span class=\"line\">        if (XHR.status == 200) &#123;</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">            var response = JSON.parse(XHR.responseText);</span><br><span class=\"line\">            resolve(response);</span><br><span class=\"line\">          &#125; catch (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          reject(new Error(XHR.statusText));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getJSON(url).then(resp =&gt; console.log(resp));</span><br><span class=\"line\">window.getJSON = getJSON</span><br></pre></td></tr></table></figure><br>      }<br>      总之，就是正确的结果就 resolve 一下， 错误的结果就 reject 一下，<br>      并且利用上面的参数传递的方式，将正确的结果和错误的结果传递出来<br>    }<br>    {<br>      Promise.all<br>      当有一个 ajax 请求，他的参数需要另外两个甚至更多请求都有返回值之后才能确定，这个时候<br>      就需要 Promise.all 来帮我应对这个场景<br>      promise.all 接受一个 promise 数组作为参数，当这个数组的所有的 Promise 对象的状态都变成 resolved 和<br>      rejected 的时候，才会调用 then 方法<br>      <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var url = &#x27;https://hq.tigerbrokers.com/fundamental/finance_calendar/getType/2017-02-26/2017-06-10&#x27;;</span><br><span class=\"line\">var url1 = &#x27;https://hq.tigerbrokers.com/fundamental/finance_calendar/getType/2017-03-26/2017-06-10&#x27;;</span><br><span class=\"line\">function renderAll() &#123;</span><br><span class=\"line\">  return Promise.all([getJSON(url), getJSON(url1)]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">renderAll().then(function (value) &#123;</span><br><span class=\"line\">  建议大家在浏览器中看看这里的value值</span><br><span class=\"line\">  console.log(value);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br>    }<br>    {<br>      promise.race<br>      与Promise.all相似的是，Promise.race都是以一个Promise对象组成的数组作为参数，<br>      不同的是，只要当数组中的其中一个Promsie状态变成resolved或者rejected时，就可以调用.then方法了。<br>      而传递给then方法的值也会有所不同，大家可以再浏览器中运行下面的例子与上面的例子进行对比<br>      {<br>        <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function renderRace() &#123;</span><br><span class=\"line\">  return Promise.race([getJSON(url), getJSON(url1)]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">renderRace().then(function (value) &#123;</span><br><span class=\"line\">  console.log(value);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><br>      }<br>    }</p>\n<h3 id=\"promise-局限\"><a href=\"#promise-局限\" class=\"headerlink\" title=\"promise 局限\"></a>promise 局限</h3><ol>\n<li>错误被吃掉</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">let promise = new Promise(() =&gt; &#123;</span><br><span class=\"line\">    throw new Error(&#x27;error&#x27;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(2333333);</span><br></pre></td></tr></table></figure>\n<p>会正常的打印 233333，说明 Promise 内部的错误不会影响到 Promise 外部的代码，而这种情况我们就通常称为 “吃掉错误”</p>\n<ol start=\"2\">\n<li>无法取消</li>\n</ol>\n<p>promise 一旦新建它就会立即执行，无法中途取消</p>\n<ol start=\"3\">\n<li>无法得知 pending 状态</li>\n</ol>\n<p>当处于pending 状态时，无法得知目前进展到哪一个阶段</p>\n","categories":["js"],"tags":["es6"]},{"title":"git分支合并相关操作","url":"/blog-next/2019/12/03/git%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/","content":"<p>分支合并的一些操作我们经常会遇到</p>\n<a id=\"more\"></a>\n\n<h2 id=\"合并（git-merge）\"><a href=\"#合并（git-merge）\" class=\"headerlink\" title=\"合并（git merge）\"></a>合并（git merge）</h2><p>当项目中包含多条功能分支时，有时就需要 <code>git merge</code> 命令，指定将某个分支的提交合并到当前分支，git 有两个合并策略 fast-forword 和 no-fast-forward</p>\n<h3 id=\"fast-forward-ff\"><a href=\"#fast-forward-ff\" class=\"headerlink\" title=\"fast-forward(-ff)\"></a>fast-forward(-ff)</h3><p>如果当前分支在合并之前，没有做过额外提交，那么合并分支的过程不会产生新的提交记录，而是直接将分支上的提交添加进来，这成为 fast-forword 合并</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOtuyKTBrtvK9POh0ZicUNyIXv0ibWLFrc3LicMicWlicFhqlUV5qLcC0t1tw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"ff\" loading=\"lazy\"></p>\n<p>现在 dev 分支上的修改已全部合并到主分支 master 上</p>\n<h3 id=\"no-fast-forward-no-ff\"><a href=\"#no-fast-forward-no-ff\" class=\"headerlink\" title=\"no-fast-forward(--no-ff)\"></a>no-fast-forward(--no-ff)</h3><p>上面的场景很少遇到，基本是：在当前分支分离出子分支之后，做了一些修改；而分离出的子分支也做了修改，这个时候再使用 <code>git merge</code>, 就会触发 no-fast-forward 策略了<br>在 no-fast-forward 策略下， git 会在当前分支（active brach）额外创建一个新的合并提交，这条提交记录既指向当前分支，又指向合并分支</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOovc8FicicdbGMeIPQt2bFCq8xmucibxsQ7zWib2g8NDW5GWRq2arZ6sktA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"no-ff\" loading=\"lazy\"></p>\n<p>合并后，在当前主分支 master 上包含 dev 分支上的所有修改</p>\n<h3 id=\"合并冲突\"><a href=\"#合并冲突\" class=\"headerlink\" title=\"合并冲突\"></a>合并冲突</h3><p>如果两个分支的修改存在冲突：比如说同事修改了某个文件的同一行；或者一个分支删除了文件，而另一个分支修改了文件--对于这种情况，git 是无法决定合并策略的。这个时候，git 就会把合并操作交给我们。</p>\n<p>举个例子，两个分支对同一个 README 做了修改，如果此时将 dev 合并到 master，那么就存在合并冲突了，当在主分支上执行 <code>git merge</code>后，git 会提示存在合并冲突，并把冲突的地方标记出来，我们手工处理完毕后，保存修改、添加文件、然后提交修改就可以了</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOl4iaZmrUk2neawldGKz1LguRiaYtQQTFL4PzTwebj5GRfmW8UmOjL5TQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"合并冲突\" loading=\"lazy\"></p>\n<h3 id=\"变基（git-rebase）\"><a href=\"#变基（git-rebase）\" class=\"headerlink\" title=\"变基（git rebase）\"></a>变基（git rebase）</h3><p>除了 <code>git merge</code>, 还能使用<code>git rebase</code> 来合并分支</p>\n<p><code>git rebase</code> 指令会复制当前分支的所有最新提交，然后将这些提交添加到指定分支提交记录之上</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOs1pbHgKho3v46GZhMre3BDX1JHVicL4lTlzKOmVfpwiaqRdwVGZ9WsFA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"rebase\" loading=\"lazy\"></p>\n<p>如图，dev 分支是从主分支上分离出去的（在 i8fe5）处，之后主分支与 dev 分支上都有相应的修改，执行 <code>git rebase master</code> 后，dev 分支将自己的最新提交记录复制出来（提交 hash 也发生了改变），拼在了主分支最后一次提交之上，这种合并分支的方式，会令 git 提交历史看起来很清爽</p>\n<p>变基在开发功能（feature brach）分支时很有用--在开发功能时，主分支上可能也做了一些更新，我们可以将主分支上的最新更新通过变基合并到功能分支上来，这在未来在主分支上合并功能分支避免了冲突的发生</p>\n<h3 id=\"交互式变基\"><a href=\"#交互式变基\" class=\"headerlink\" title=\"交互式变基\"></a>交互式变基</h3><p>git rebase 时，我们还能对当前分支上的提交记录做修改，采用交互式变基形式（Interactive Rebase）形式<br>变基时提供了 6 种操作模式：</p>\n<ul>\n<li>reword 提交修改信息</li>\n<li>edit 修改此提交</li>\n<li>squash 将当前提交合并到之前的提交中</li>\n<li>fixup 将当前提交合并到之前的提交中，不保留提交日志消息</li>\n<li>exec 在每一个需要变基的提交上执行一条命令</li>\n<li>drop 删除提交</li>\n</ul>\n<p>drop 的例子：<br><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOBnJ7NwOgrzMIhcKXsME3PiaIaoVQyuNpUyduZk1CZ5s6SLfec8zfONA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"drop\" loading=\"lazy\"></p>\n<p>squash 的例子：<br><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOfOgVv8QmLumCzyvHzLutYBgWY5u1buC2ibGibfn8b7LLFg7bM92uB97g/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"squash\" loading=\"lazy\"></p>\n<p><strong>注意</strong></p>\n<ul>\n<li>squash 的时候，首条记录必须是还没有推送到远端的</li>\n<li>使用 <code>git rebase -i HEAD~3</code> 交互式修改最新的三条提交记录，参数在操作的时候会提示</li>\n<li>使用 <code>git rebase master</code> 变基为最新的 master 分支</li>\n<li>如果交互式变基出现下面错误<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">fatal: It seems that there is already a rebase-merge directory, and</span><br><span class=\"line\">I wonder <span class=\"keyword\">if</span> you are <span class=\"keyword\">in</span> the middle of another rebase.  If that is the</span><br><span class=\"line\">  <span class=\"keyword\">case</span>, please try</span><br><span class=\"line\">    git rebase (--<span class=\"built_in\">continue</span> | --abort | --skip)</span><br><span class=\"line\">  If that is not the <span class=\"keyword\">case</span>, please</span><br><span class=\"line\">    rm -fr <span class=\"string\">&quot;.git/rebase-merge&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>如果变基出现冲突，执行 <code>git add .</code>，不用 <code>commit</code>，接着执行 <code>git rebase --continue</code> 就可以变基完成</li>\n<li>还有出现任何错误，都可以执行 <code>git rebase --abort</code> 回到变基前的状态</li>\n</ul>\n<h2 id=\"分支覆盖\"><a href=\"#分支覆盖\" class=\"headerlink\" title=\"分支覆盖\"></a>分支覆盖</h2><ol>\n<li><p>切换分支</p>\n<pre><code> git checkout master\n</code></pre>\n</li>\n<li><p>本地覆盖为当前分支</p>\n<pre><code> git reset --hard feature/1.0\n</code></pre>\n</li>\n<li><p>强制推送的远端</p>\n<pre><code> git push origin master --force\n</code></pre>\n</li>\n<li><p>检查</p>\n<pre><code> git diff master feature/1.0\n</code></pre>\n</li>\n</ol>\n","categories":["工具"],"tags":["command","git"]},{"title":"git 常用命令","url":"/blog-next/2018/11/25/git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"<p><code>git clone git@github.com:xxxx</code> 下载仓库</p>\n<p><code>git init，初始化本地仓库</code> .git</p>\n<p><code>git status -sb</code> 显示当前所有文件的状态</p>\n<p><code>git add 文件路径</code> 用来将变动加到暂存区</p>\n<p><code>git commit -m &quot;信息&quot;</code> 用来正式提交变动，提交至 .git 仓库</p>\n<p><code>git log</code> 查看变更历史</p>\n<p><code>git fetch origin master</code> 从远程把别人的代码拉下来</p>\n<p><code>git pull</code> 就是 <code>git fetch and git merge</code> 的合并操作</p>\n<p><code>git push</code></p>\n<p><code>git remote add origin git@github.com:xxxxxxx.git</code> 将本地仓库与远程仓库关联</p>\n<p><code>git remote set-url origin git@github.com:xxxxx.git</code> 上一步手抖了，可以用这个命令来挽回</p>\n<p><code>git branch</code> 新建分支</p>\n<p><code>git merge</code> 合并分支</p>\n<p><code>git diff</code> 查看详细变化</p>\n<p><code>git rev-parse HEAD</code> 查看当前的 commit 记录</p>\n<p><code>git reset --hard xxxx</code> 回滚</p>\n<p><code>git push -f origin develop</code>  git 强制提交</p>\n<p><code>git push -u orgin dev</code> git 设置上游 --set-upstream</p>\n<p><code>git config core.ignorecase false</code> windows 设置大小写敏感</p>\n","categories":["工具"],"tags":["G","command","git"]},{"title":"git撤销node_modules","url":"/blog-next/2019/03/24/git%E6%92%A4%E9%94%80node-modules/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch .gitignore</span><br><span class=\"line\">echo /node_modules/ &gt;&gt; .gitignore</span><br><span class=\"line\">git rm -r --cached node_modules</span><br><span class=\"line\">git add . -A</span><br><span class=\"line\">git commit -m &quot;remove node_modules&quot;</span><br><span class=\"line\">git push</span><br><span class=\"line\">npm install 或者 yarn install</span><br></pre></td></tr></table></figure>\n","categories":["工具"],"tags":["G","command","git"]},{"title":"git撤销回退相关操作","url":"/blog-next/2020/04/15/git%E6%92%A4%E9%94%80%E5%9B%9E%E9%80%80%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/","content":"<p>分支回退的一些操作我们经常会遇到</p>\n<a id=\"more\"></a>\n\n<h2 id=\"重置（git-reset）\"><a href=\"#重置（git-reset）\" class=\"headerlink\" title=\"重置（git reset）\"></a>重置（git reset）</h2><p>如果因为某些原因（比如新提交导致了 BUG，或只是一个 WIP 提交），需要撤回提交，那么可以使用 git reset 指令。<br>git reset 可以控制当前分支回撤到某次提交时的状态。</p>\n<h3 id=\"软重置\"><a href=\"#软重置\" class=\"headerlink\" title=\"软重置\"></a>软重置</h3><p>使用软重置，我们可以撤销提交记录，但是保留新建的文件。（就是我们可以重新提交）<br><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO8dmv56PCuicTzZTVL6lVp541picccqwMAU36EhACmJCMttPvBJl8tXjQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"soft-reset\" loading=\"lazy\"></p>\n<h3 id=\"硬重置\"><a href=\"#硬重置\" class=\"headerlink\" title=\"硬重置\"></a>硬重置</h3><p>硬重置会把当前工作目录中的文件，以暂存的文件全部移除, <code>git reset --hard HEAD~2</code> 直接回退到两次提交之前的版本，<br>git 也会直接删除记录<br><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFOsiboiaLTHUnlyorlyicvxZtRT9tQD4fcX2VponJIcFUpZHbKKdP5p31vQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"hard-reest\" loading=\"lazy\"></p>\n<h2 id=\"还原（git-revert）\"><a href=\"#还原（git-revert）\" class=\"headerlink\" title=\"还原（git revert）\"></a>还原（git revert）</h2><p>还有一种撤销更改的方式，是使用 <code>git revert</code> 命令，用于还原某次提交的修改，会创建一个包含已还原更改的新提交记录（也就是在不修改分支历史的前提下，还原某次提交引入的更改）<br><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/meG6Vo0MeviaPS2ZgOV7sV3qpnhsB4LFO9KAj8ZGBkjDallvJibGfibgWnfa5ECCY2pOpf6tZwwicv6RGViazjibRiaAg/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1\" alt=\"revert\" loading=\"lazy\"></p>\n<h2 id=\"检出提交（git-cherry-pick）\"><a href=\"#检出提交（git-cherry-pick）\" class=\"headerlink\" title=\"检出提交（git cherry-pick）\"></a>检出提交（git cherry-pick）</h2><p><em>gitLab翻译为优选</em> 把其他分支的提交检出到当前分支，检出之后已经执行了commit</p>\n","categories":["工具"],"tags":["command","git"]},{"title":"h5项目总结（xl2）","url":"/blog-next/2019/12/06/h5%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%EF%BC%88xl2%EF%BC%89/","content":"<h2 id=\"在-xl-基础上做如下优化\"><a href=\"#在-xl-基础上做如下优化\" class=\"headerlink\" title=\"在 xl 基础上做如下优化\"></a>在 xl 基础上做如下优化</h2><h3 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h3><p>文件用 kebab case<br>变量 camel case<br>组件用 kebab case （个人偏好， 尤小右推荐用 Pascal case）</p>\n<p>html 部分<br>属性尽量用 kebab case<br>id 用 camel case<br>类名用 kebab case</p>\n<h3 id=\"关于-toast\"><a href=\"#关于-toast\" class=\"headerlink\" title=\"关于 toast\"></a>关于 toast</h3><p>在 vue.prototype 上注册一个全局的 Toast，方便在组件中和 js 文件的任何地方调用<br>主要是得益于 cube-ui 的 createAPI</p>\n<h3 id=\"关于-Loading\"><a href=\"#关于-Loading\" class=\"headerlink\" title=\"关于 Loading\"></a>关于 Loading</h3><p>也是利用 createAPI 的全局注册一个组件，可以用 api 调用组件</p>\n<h3 id=\"全局注入文件，以便每个文件使用\"><a href=\"#全局注入文件，以便每个文件使用\" class=\"headerlink\" title=\"全局注入文件，以便每个文件使用\"></a>全局注入文件，以便每个文件使用</h3><p>完成公共样式的抽离</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">css: &#123;</span><br><span class=\"line\">  loaderOptions: &#123;</span><br><span class=\"line\">    sass: &#123;</span><br><span class=\"line\">      data: `</span><br><span class=\"line\">        @import &quot;@/assets/css/variable.scss&quot;;</span><br><span class=\"line\">        @import &quot;@/assets/css/cover-cube.scss&quot;;</span><br><span class=\"line\">        @import &quot;@/assets/css/public.scss&quot;;</span><br><span class=\"line\">      `</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"退出多层路由\"><a href=\"#退出多层路由\" class=\"headerlink\" title=\"退出多层路由\"></a>退出多层路由</h3><h3 id=\"input-click\"><a href=\"#input-click\" class=\"headerlink\" title=\"input click\"></a>input click</h3><p>点击事件需要加 native</p>\n<h3 id=\"在-vuex-层做数据持久化\"><a href=\"#在-vuex-层做数据持久化\" class=\"headerlink\" title=\"在 vuex 层做数据持久化\"></a>在 vuex 层做数据持久化</h3><p>默认方式采用 sessionstorage 存储<br>需要挑出使用 localstorage 存储的属性和 不需要存储的属性</p>\n<p>下面贴出 vuex 配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import Vuex from &#x27;vuex&#x27;</span><br><span class=\"line\">import state from &#x27;./state&#x27;</span><br><span class=\"line\">import getters from &#x27;./getters&#x27;</span><br><span class=\"line\">import mutations from &#x27;./mutations&#x27;</span><br><span class=\"line\">import actions from &#x27;./actions&#x27;</span><br><span class=\"line\">import createPersistedstate from &#x27;vuex-persistedstate&#x27;</span><br><span class=\"line\">import createLogger from &#x27;vuex/dist/logger&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\">const debug = process.env.NODE_ENV !== &#x27;production&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 完全不需要存储的属性放在这里，默认的是要存储 sessionstorage</span><br><span class=\"line\">const pathWithoutLSAndSS = []</span><br><span class=\"line\"></span><br><span class=\"line\">// 需要 localstorage 不能存 sessionstorage 的放在这里</span><br><span class=\"line\">const pathWithoutSS = [&#x27;authToken&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">const vuexWithSS = createPersistedstate(&#123;</span><br><span class=\"line\">  key: &#x27;SS&#x27;,</span><br><span class=\"line\">  storage: window.sessionStorage,</span><br><span class=\"line\">  reducer: (vuexState) =&gt; &#123;</span><br><span class=\"line\">    let sessionState = Object.assign(&#123;&#125;, vuexState)</span><br><span class=\"line\">    let path = [...pathWithoutSS, ...pathWithoutLSAndSS]</span><br><span class=\"line\"></span><br><span class=\"line\">    path.forEach(item =&gt; &#123;</span><br><span class=\"line\">      if (sessionState.hasOwnProperty(item)) &#123;</span><br><span class=\"line\">        delete sessionState[item]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return vuexState</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const vuexWithLS = createPersistedstate(&#123;</span><br><span class=\"line\">  key: &#x27;LS&#x27;,</span><br><span class=\"line\">  storage: window.localStorage,</span><br><span class=\"line\">  reducer: (vuexState) =&gt; &#123;</span><br><span class=\"line\">    let storage = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pathWithoutSS.forEach(item =&gt; &#123;</span><br><span class=\"line\">      if (vuexState.hasOwnProperty(item)) &#123;</span><br><span class=\"line\">        storage[item] = vuexState[item]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return storage</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const store = new Vuex.Store(&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  actions,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 在开发环境打开严格模式，虽然还是可以被修改，但是会在控制台报错</span><br><span class=\"line\">  strict: debug,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 使用插件存储 vuex 数据到 storage, 同时要在开发环境打开 logger</span><br><span class=\"line\">  plugins: debug ? [createLogger(), vuexWithSS, vuexWithLS] : [vuexWithSS, vuexWithLS]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>vuex persist API 文档</p>\n<p><img src=\"https://i.loli.net/2019/07/09/5d2425ba6317133933.jpg\" alt=\"1562649994(1).jpg\" loading=\"lazy\"></p>\n<h3 id=\"利用-promise-解析-res-data\"><a href=\"#利用-promise-解析-res-data\" class=\"headerlink\" title=\"利用 promise 解析 res.data\"></a>利用 promise 解析 res.data</h3><p>优化前</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">post(url, data, options = &#123;&#125;) &#123;</span><br><span class=\"line\">  const instance = axios.create(this.getFixedConfig())</span><br><span class=\"line\">  this.interceptors(instance)</span><br><span class=\"line\">  return instance.post(url, data, options)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优化后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">post(url, data, options = &#123;&#125;) &#123;</span><br><span class=\"line\">  const instance = axios.create(this.getFixedConfig())</span><br><span class=\"line\">  this.interceptors(instance)</span><br><span class=\"line\">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    instance.post(url, data, options).then(res =&gt; &#123;</span><br><span class=\"line\">      resolve(res.data)</span><br><span class=\"line\">    &#125;, err =&gt; &#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取-accessToken-优化\"><a href=\"#获取-accessToken-优化\" class=\"headerlink\" title=\"获取 accessToken 优化\"></a>获取 accessToken 优化</h3><ul>\n<li><p>优化前<br>在 mian.js 中调用获取 accessToken 的接口</p>\n</li>\n<li><p>优化后<br>写一个 getToken 的 js 文件，在 login register getpass 三个页面调用，统一存储到 vuex</p>\n</li>\n<li><p>优化空间<br>再存储一个过期时间，没有过期就不再继续请求，直接读取 vuex 中的值</p>\n</li>\n</ul>\n<h3 id=\"xl-需要的改动\"><a href=\"#xl-需要的改动\" class=\"headerlink\" title=\"xl 需要的改动\"></a>xl 需要的改动</h3><ul>\n<li>意见反馈增加参数</li>\n<li>退出登录加类型</li>\n</ul>\n<h3 id=\"ljl-需要优化点\"><a href=\"#ljl-需要优化点\" class=\"headerlink\" title=\"ljl 需要优化点\"></a>ljl 需要优化点</h3><ul>\n<li>时间选择初始化</li>\n<li>数据可能获取比较慢，在表单数据获取之后 refresh scroll</li>\n</ul>\n","categories":["总结"],"tags":["项目总结"]},{"title":"jquery重温","url":"/blog-next/2019/03/09/jquery%E9%87%8D%E6%B8%A9/","content":"<h3 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h3><p>命名空间是一种设计模式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var dom = &#123;&#125;</span><br><span class=\"line\">dom.getSiblings(node)</span><br><span class=\"line\">dom.addClass(node, &#123;a: true, b: false&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><p>利用原型就可以使得实例化的对象都具有原型的方法<br>代码就可以写成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">node.getSiblings()</span><br><span class=\"line\">node.addClass(&#123;a: true, b: false&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"无侵入\"><a href=\"#无侵入\" class=\"headerlink\" title=\"无侵入\"></a>无侵入</h3><p>如果大家都修改原型就会有互相覆盖的风险<br>可以用无侵入的模式封装一个对象用来操作传入的元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function jquery(node) &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    element: node,</span><br><span class=\"line\">    getSiblings: function()&#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    addClass: function()&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let node = document.getElementById(&#x27;x&#x27;)</span><br><span class=\"line\">let node2 = jquery(node)</span><br><span class=\"line\">node2.siblings()</span><br><span class=\"line\">node2.addClass()</span><br></pre></td></tr></table></figure>\n<p><em>当然真实的 jquery 不是这样的</em></p>\n<h3 id=\"测试无侵入\"><a href=\"#测试无侵入\" class=\"headerlink\" title=\"测试无侵入\"></a>测试无侵入</h3><p>传入一个 dom 或者选择器，应用生成的对象操作对应的 api</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">window.jQuery = function(param) &#123;</span><br><span class=\"line\">  var nodes = &#123;&#125;</span><br><span class=\"line\">  if (typeof param === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">    nodes = document.querySelectorAll(param)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    nodes = &#123;</span><br><span class=\"line\">      0: param,</span><br><span class=\"line\">      length: 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  nodes.addClass = function(classes) &#123;</span><br><span class=\"line\">    for(var i=0;i&lt;nodes.length;i++) &#123;</span><br><span class=\"line\">      nodes[i].classList.add(classes)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  nodes.setText = function(text) &#123;</span><br><span class=\"line\">    for (var i = 0; i &lt; nodes.length; i++) &#123;</span><br><span class=\"line\">      nodes[i].textContent = text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  return nodes</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.$ = jQuery</span><br><span class=\"line\">var $div = $(&#x27;div&#x27;)</span><br><span class=\"line\">$div.addClass(&#x27;red&#x27;) // 可将所有 div 的 class 添加一个 red</span><br><span class=\"line\">$div.setText(&#x27;hi&#x27;)</span><br></pre></td></tr></table></figure>\n","categories":["js"],"tags":["G","jquery"]},{"title":"h5项目总结（xl）","url":"/blog-next/2019/04/24/h5%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/","content":"<!-- 思路 -->\n<!-- 1 项目搭建 -->\n<!-- 2 自适应的问题 -->\n<!-- 3 关于微信用户无感登录 -->\n<!-- 4 toast 不是全局的问题 -->\n<!-- 5 关于项目优化 -->\n\n<p>最近做了一个 h5 的项目，技术栈是 vue-cli3 vue 全家桶, UI 有用 cube-ui, NProgress, 用了一个 blueimp-md5 的 md5 库， 样式用的是 scss + postcss-px2rem, 在 vuex 层用 vuex-persistedstate 做数据持久化</p>\n<h3 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h3><ul>\n<li>用 vue-cli3 搭建项目，启动 vue ui，直接可以在网页上管理项目</li>\n<li>用 .env.production 这种文件提供环境变量，供 webpack 不同的 mode 打包使用</li>\n<li>向外暴露的只有一个 vue.config.js，其他都写到了 webpack 的包里，简单列几个这个文件的属性<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">BASE_URL 已经被废除了 重新用回了 publicPath 指定</span><br><span class=\"line\"></span><br><span class=\"line\">chainWebpack 是一个函数，可以对 webpack 的配置进行更细粒度的修改，而且可以链式调用</span><br><span class=\"line\">chainWebpack: config =&gt; &#123;</span><br><span class=\"line\">  config.resolve.alias</span><br><span class=\"line\">  .set(&#x27;@&#x27;, resolve(&#x27;src&#x27;))</span><br><span class=\"line\">  .set(&#x27;_c&#x27;, resolve(&#x27;src/components&#x27;))</span><br><span class=\"line\">  .set(&#x27;_api&#x27;, resolve(&#x27;src/api&#x27;))</span><br><span class=\"line\">  .set(&#x27;_lib&#x27;, resolve(&#x27;src/lib&#x27;))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">productionSourceMap: false 线上直接关闭 sourceMap</span><br><span class=\"line\"></span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  proxy: process.env.VUE_APP_API_URL</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>项目结构<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">|-- .editorconfig                         </span><br><span class=\"line\">|-- .env.development                          </span><br><span class=\"line\">|-- .env.porduction                       </span><br><span class=\"line\">|-- .env.stage                              </span><br><span class=\"line\">|-- .env.test1                              </span><br><span class=\"line\">|-- .env.test2</span><br><span class=\"line\">|-- package.json</span><br><span class=\"line\">|-- public</span><br><span class=\"line\">|   |-- data.json</span><br><span class=\"line\">|   |-- favicon.ico</span><br><span class=\"line\">|   `-- index.html</span><br><span class=\"line\">|-- src</span><br><span class=\"line\">|   |-- App.vue</span><br><span class=\"line\">|   |-- api</span><br><span class=\"line\">|   |-- assets</span><br><span class=\"line\">|   |-- components</span><br><span class=\"line\">|   |-- cube-ui.js</span><br><span class=\"line\">|   |-- lib</span><br><span class=\"line\">|   |-- main.js</span><br><span class=\"line\">|   |-- router</span><br><span class=\"line\">|   |-- store</span><br><span class=\"line\">|   |-- theme.styl</span><br><span class=\"line\">|   `-- views</span><br><span class=\"line\">|-- vue.config.js</span><br><span class=\"line\">`-- yarn.lock</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong><em>吐槽</em></strong> <strong>如果不指定 .env 文件的 NODE_ENV 为production，打包的时候都会按照 development 模式来，所以如果要线上环境打包的效果，就要显式得指定 NODE_ENV 为 production， 环境变量可以用 CURRNET_MODE 这种变量来代替</strong></p>\n<h3 id=\"自适应的问题\"><a href=\"#自适应的问题\" class=\"headerlink\" title=\"自适应的问题\"></a>自适应的问题</h3><p>项目中使用 postcss-px2rem 直接把 px 转成 rem 但是和 px 是一样的，我也不知道当时自己为啥要用 rem<br>当然遇到的问题就一个 login 的页面遇到了一个小键盘会导致页面缩小的 bug， 通过多方尝试，最终还是在入口把 window.innerHeight 记录下来， 在需要 100vh 的页面，渲染完毕后用 js 把 style.height 设置成 window.innerHeight</p>\n<h3 id=\"关于微信用户无感登录\"><a href=\"#关于微信用户无感登录\" class=\"headerlink\" title=\"关于微信用户无感登录\"></a>关于微信用户无感登录</h3><p>关于绑定微信主要是做了一个绑定的功能，用来做免密登录，而且这个方案我们用的是第一种，就是不用用户手动授权就可以拿到用户 code 的方式<br>实现的主要方式就是在 router 的 beforeEach 钩子判断 openid 是否已经存在，如果没有，就去重定向获取 code，然后利用 code 去获取 openid 然后存下来<br>在即将进入页面的 beforeEnter 的路由独享里面，可以根据是不是微信来实现去免密登录还是继续去登录</p>\n<p>这种方式就可以实现分治，不用在一大推的回调里面去判断之后的逻辑<br>通过这个需求，算是对 vue-router 的钩子有了一个相对完整的理解</p>\n<h3 id=\"toast-不是全局的问题\"><a href=\"#toast-不是全局的问题\" class=\"headerlink\" title=\"toast 不是全局的问题\"></a>toast 不是全局的问题</h3><p>项目中直接用的 cube-ui 的 toast 组件，虽然文档中所说的是通过 create-api 构造的，这样可以在组件或者 js 文件中，但是在组件中应用的话, 为啥把 append 到组件中呢，尽管我已经把 toast 创建好了 mixin 到了全局，也有可能是我使用方式不对，可能用插件的方式会解决这个问题</p>\n<h3 id=\"关于项目优化\"><a href=\"#关于项目优化\" class=\"headerlink\" title=\"关于项目优化\"></a>关于项目优化</h3><p>项目其实没有怎么优化，通过 chrome 的 audits 好想没看出啥来，项目资源最大的 文件 400 多k， 项目总共大小 1.7M，所有的静态资源都放在同一个域名在<br>项目开启了 ETag: &quot;5cc03a0b-45e9&quot; Cache-Control没有设置 Cache-Control: no-cache</p>\n<p>虽然自己都是可以修改 webapck 中的相关配置，但是默认的配置已经够强大了，基本能满足需求</p>\n","categories":["总结"],"tags":["项目总结"]},{"title":"jsDOM","url":"/blog-next/2019/03/03/jsDOM/","content":"<h3 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h3><p>数据结构就是树<br>在 DOM 树中，树上有节点（Node）<br>Node 主要有 Document Element text 等<br>DOM 树抽象为对象主要有三个构造函数 Document Element Text，他们都继承自 Node.prototype<br><img src=\"https://i.loli.net/2019/03/03/5c7bf21547e43.jpg\" alt=\"1551626734126.jpg\" loading=\"lazy\"></p>\n<p>上图就是 DOM 的大致原型链的关系<br>与此同时 Node 提供了一系列 API 用来操作 DOM</p>\n<h3 id=\"Node-接口\"><a href=\"#Node-接口\" class=\"headerlink\" title=\"Node 接口\"></a>Node 接口</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">属性：</span><br><span class=\"line\">childNodes // 返回 NodeList 继承自 Object</span><br><span class=\"line\">children // 返回 HTMLCollection 继承自 Object</span><br><span class=\"line\">firstChild</span><br><span class=\"line\">innerText</span><br><span class=\"line\">lastChild</span><br><span class=\"line\">nextSibiling</span><br><span class=\"line\">nodeName</span><br><span class=\"line\">nodeType</span><br><span class=\"line\">nodeValue</span><br><span class=\"line\">outerText</span><br><span class=\"line\">ownerDocument</span><br><span class=\"line\">parentElement</span><br><span class=\"line\">parentNode</span><br><span class=\"line\">previousSibiling</span><br><span class=\"line\">textContent</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">方法</span><br><span class=\"line\">appendChild()</span><br><span class=\"line\">cloneNode() // 参数为 true 就是深拷贝，否则为浅拷贝</span><br><span class=\"line\">contains()</span><br><span class=\"line\">hasChildNodes()</span><br><span class=\"line\">insertBefore()</span><br><span class=\"line\">insertAfter()</span><br><span class=\"line\">isEqualNode() // dom 一致</span><br><span class=\"line\">isSameNode() // 同一个 dom</span><br><span class=\"line\">removeChild()</span><br><span class=\"line\">replaceChild()</span><br><span class=\"line\">normalize() // 合并文本节点</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Document-接口\"><a href=\"#Document-接口\" class=\"headerlink\" title=\"Document 接口\"></a>Document 接口</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">属性</span><br><span class=\"line\">body</span><br><span class=\"line\">characterSet</span><br><span class=\"line\">childElementCount</span><br><span class=\"line\">children</span><br><span class=\"line\">doctype</span><br><span class=\"line\">domain</span><br><span class=\"line\">fullscreen</span><br><span class=\"line\">head</span><br><span class=\"line\">images</span><br><span class=\"line\">links</span><br><span class=\"line\">location</span><br><span class=\"line\">referrer</span><br><span class=\"line\">scripts</span><br><span class=\"line\">scrollingElement</span><br><span class=\"line\">title</span><br><span class=\"line\">documentElement</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">方法</span><br><span class=\"line\">createDocumentFragment()</span><br><span class=\"line\">createElement()</span><br><span class=\"line\">createTextNode()</span><br><span class=\"line\">execCommand()</span><br><span class=\"line\">exitFullscreen()</span><br><span class=\"line\">getElementById()</span><br><span class=\"line\">getElementsByClassName()</span><br><span class=\"line\">getElementsByName()</span><br><span class=\"line\">getElementsByTagName()</span><br><span class=\"line\">getSelection()</span><br><span class=\"line\">hasFocus()</span><br><span class=\"line\">open()</span><br><span class=\"line\">close()</span><br><span class=\"line\">querySelector()</span><br><span class=\"line\">querySelectorAll()</span><br><span class=\"line\">registerElement()</span><br><span class=\"line\">write()</span><br><span class=\"line\">writeln()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Element-接口\"><a href=\"#Element-接口\" class=\"headerlink\" title=\"Element 接口\"></a>Element 接口</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">offsetWidth</span><br><span class=\"line\">offsetHeight</span><br><span class=\"line\">clientLeft</span><br><span class=\"line\">clientTop</span><br><span class=\"line\">scrollHeight</span><br><span class=\"line\">scrollTop</span><br><span class=\"line\">getBoundingClientRect().left</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NodeList-和-HTMLCollection\"><a href=\"#NodeList-和-HTMLCollection\" class=\"headerlink\" title=\"NodeList 和 HTMLCollection\"></a>NodeList 和 HTMLCollection</h3><ul>\n<li>上述的 api 有的返回是 NodeList 实例，有的返回 collection 实例，这两者是有区别的</li>\n</ul>\n<p>HTMLCollection 实例对象的成员只能是 Element 节点，NodeList 实例对象的成员可以包含其他节点。<br>HTMLCollection 实例对象可以用 id 属性或 name 属性引用节点元素，NodeList 只能使用数字索引引用。<br>HTMLCollection 实例对象是静态的 NodeList 是动态的。(x) 两者都是动态的 -_-</p>\n","categories":["js"],"tags":["js","G","DOM"]},{"title":"js事件循环","url":"/blog-next/2020/06/16/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/","content":"<h2 id=\"JS运行机制\"><a href=\"#JS运行机制\" class=\"headerlink\" title=\"JS运行机制\"></a>JS运行机制</h2><p>JS 执行是单线程的，它是基于事件循环的，事件循环大致分为以下几个步骤</p>\n<ol>\n<li>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）</li>\n<li>主线程之外，还有一个任务队列（task quene），只要异步任务有了运行结果，就在任务队列中放置一个事件</li>\n<li>一旦执行栈中所有的同步任务执行完毕，系统就会读取任务队列，看看里面有哪些事件。哪些对应的异步任务，于是结束等待状态，进入执行栈，开始执行</li>\n<li>主线程不断重复上面三步</li>\n</ol>\n<p><img src=\"https://i.loli.net/2020/06/16/jB4M83ywUmRrtVK.jpg\" alt=\"event-loop.png\" loading=\"lazy\"></p>\n<h3 id=\"常见的-macro-task\"><a href=\"#常见的-macro-task\" class=\"headerlink\" title=\"常见的 macro-task\"></a>常见的 macro-task</h3><p>setTimeout MessageChannel postMessage setImmediate</p>\n<h3 id=\"常见的-micro-task\"><a href=\"#常见的-micro-task\" class=\"headerlink\" title=\"常见的 micro-task\"></a>常见的 micro-task</h3><p>MutationObsever Promise.then</p>\n<p>基本的顺序就是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (macroTask <span class=\"keyword\">of</span> macroTaskQueue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. Handle current MACRO-TASK</span></span><br><span class=\"line\">    handleMacroTask();</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">// 2. Handle all MICRO-TASK</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (microTask <span class=\"keyword\">of</span> microTaskQueue) &#123;</span><br><span class=\"line\">        handleMicroTask(microTask);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["js"],"tags":["js"]},{"title":"js函数curry","url":"/blog-next/2019/03/03/js%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function curry(func, fixedParams) &#123;</span><br><span class=\"line\">  if (!Array.isArray(fixedParams)) &#123;</span><br><span class=\"line\">    fixedParams = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    var newParams = Array.prototype.slice.call(arguments)</span><br><span class=\"line\">    if (newParams.length  + fixedParams.length &gt;= func.length) &#123;</span><br><span class=\"line\">      return func.apply(null, fixedParams.cancat(newParams))</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return curry(func, fixedParams.cancat(newParams))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["js-code"],"tags":["G","code"]},{"title":"js位运算符","url":"/blog-next/2019/07/17/js%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/","content":"<h3 id=\"js-中的数字\"><a href=\"#js-中的数字\" class=\"headerlink\" title=\"js 中的数字\"></a>js 中的数字</h3><ul>\n<li>所有 js 数字都被存储为 64 位浮点数，整数精度最多为 15 位，小数精度的对多为 17 位，浮点数的运算并不是百分之百的准确</li>\n<li>位运算直接对二进制位进行计算，位运算直接处理每一个 bit 位，是非常底层的运算，优点是速度非常快，缺点是不太直观，很多场合不能使用</li>\n<li>位运算只对整数起作用，如果一个运算数不是整数，会自动转为整数后再运行</li>\n<li>在 js 中数字是 64 位浮点数，但是在做位运算的时候，是以 32 位带符号的整数进行运算的，并且返回值也是一个带符号的 32 位的整数</li>\n</ul>\n<h3 id=\"js-中常用的七个位运算符\"><a href=\"#js-中常用的七个位运算符\" class=\"headerlink\" title=\"js 中常用的七个位运算符\"></a>js 中常用的七个位运算符</h3><h4 id=\"按位与-AND-amp\"><a href=\"#按位与-AND-amp\" class=\"headerlink\" title=\"按位与(AND) &amp;\"></a>按位与(AND) &amp;</h4><p>如果都是 1，返回 1，否则返回 0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span><br><span class=\"line\">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span><br><span class=\"line\">// -----------------------------</span><br><span class=\"line\">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span><br><span class=\"line\">console.log(1 &amp; 3)     // 1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"按位或（OR）\"><a href=\"#按位或（OR）\" class=\"headerlink\" title=\"按位或（OR）|\"></a>按位或（OR）|</h4><p>有 1 就返回 1，否则返回 0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span><br><span class=\"line\">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span><br><span class=\"line\">// -----------------------------</span><br><span class=\"line\">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span><br><span class=\"line\">console.log(1 | 3)     // 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"按位异传（XOR）\"><a href=\"#按位异传（XOR）\" class=\"headerlink\" title=\"按位异传（XOR）^\"></a>按位异传（XOR）^</h4><p>只有有一个 1 返回 1，否则返回 0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span><br><span class=\"line\">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span><br><span class=\"line\">// -----------------------------</span><br><span class=\"line\">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span><br><span class=\"line\">console.log(1 ^ 3)     // 2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"按位非（NOT）\"><a href=\"#按位非（NOT）\" class=\"headerlink\" title=\"按位非（NOT）~\"></a>按位非（NOT）~</h4><p>对位求反，1 变 0, 0 变 1，也就是求二进制的反码<br><em>简单记忆：一个数与自身的取反值相加等于-1</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span><br><span class=\"line\">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span><br><span class=\"line\">// -----------------------------</span><br><span class=\"line\">// 1反码二进制表示: 11111111 11111111 11111111 11111110</span><br><span class=\"line\">// 由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去1，再取一次反，然后加上负号，才能得到这个负数对应的10进制值。</span><br><span class=\"line\">// -----------------------------</span><br><span class=\"line\">// 1的反码减1：     11111111 11111111 11111111 11111101</span><br><span class=\"line\">// 反码取反：       00000000 00000000 00000000 00000010</span><br><span class=\"line\">// 表示为10进制加负号：-2</span><br><span class=\"line\">console.log(~ 1)     // -2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"左移-lt-lt\"><a href=\"#左移-lt-lt\" class=\"headerlink\" title=\"左移 &lt;&lt;\"></a>左移 &lt;&lt;</h4><p>使指定值的二进制数所有位都左移指定次数，其移动规则：丢弃高位，低位补 0</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span><br><span class=\"line\">// -----------------------------</span><br><span class=\"line\">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span><br><span class=\"line\">console.log(1 &lt;&lt; 1)     // 2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"右移-gt-gt\"><a href=\"#右移-gt-gt\" class=\"headerlink\" title=\"右移 &gt;&gt;\"></a>右移 &gt;&gt;</h4><p>将指定操作数的二进制位向右移动指定的位数。向右被移出的位被丢弃，拷贝最左侧的位以填充左侧。由于新的最左侧的位总是和以前相同，符号位没有被改变。所以被称作“符号传播”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span><br><span class=\"line\">// -----------------------------</span><br><span class=\"line\">// 0的二进制表示为: 00000000 00000000 00000000 00000000</span><br><span class=\"line\">console.log(1 &gt;&gt; 1)     // 0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"无符号右移-gt-gt-gt\"><a href=\"#无符号右移-gt-gt-gt\" class=\"headerlink\" title=\"无符号右移 &gt;&gt;&gt;\"></a>无符号右移 &gt;&gt;&gt;</h4><p>该操作符会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，左侧用 0 填充。因为符号位变成了 0，所以结果总是非负的。（译注：即便右移 0 个比特，结果也是非负的。）<br>对于非负数，有符号右移和无符号右移总是返回相同的结果。例如， 9 &gt;&gt;&gt; 2 得到 2 和 9 &gt;&gt; 2 相同。</p>\n<h3 id=\"js-中使用\"><a href=\"#js-中使用\" class=\"headerlink\" title=\"js 中使用\"></a>js 中使用</h3><ol>\n<li>判断一个数的奇偶</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 偶数 &amp; 1 = 0</span><br><span class=\"line\">// 奇数 &amp; 1 = 1</span><br><span class=\"line\">console.log(2 &amp; 1)    // 0</span><br><span class=\"line\">console.log(3 &amp; 1)    // 1</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用~, &gt;&gt;, &lt;&lt;, &gt;&gt;&gt;, |来取整</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(~~ 6.83)    // 6</span><br><span class=\"line\">console.log(6.83 &gt;&gt; 0)  // 6</span><br><span class=\"line\">console.log(6.83 &lt;&lt; 0)  // 6</span><br><span class=\"line\">console.log(6.83 | 0)   // 6</span><br><span class=\"line\">// &gt;&gt;&gt;不可对负数取整</span><br><span class=\"line\">console.log(6.83 &gt;&gt;&gt; 0)   // 6</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用&amp;, &gt;&gt;, |来完成 rgb 值和 16 进制颜色值之间的转换</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 16进制颜色值转RGB</span><br><span class=\"line\"> * @param  &#123;String&#125; hex 16进制颜色字符串</span><br><span class=\"line\"> * @return &#123;String&#125;     RGB颜色字符串</span><br><span class=\"line\"> */</span><br><span class=\"line\">  function hexToRGB(hex) &#123;</span><br><span class=\"line\">    var hexx = hex.replace(&#x27;#&#x27;, &#x27;0x&#x27;)</span><br><span class=\"line\">    var r = hexx &gt;&gt; 16</span><br><span class=\"line\">    var g = hexx &gt;&gt; 8 &amp; 0xff</span><br><span class=\"line\">    var b = hexx &amp; 0xff</span><br><span class=\"line\">    return `rgb($&#123;r&#125;, $&#123;g&#125;, $&#123;b&#125;)`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * RGB颜色转16进制颜色</span><br><span class=\"line\"> * @param  &#123;String&#125; rgb RGB进制颜色字符串</span><br><span class=\"line\"> * @return &#123;String&#125;     16进制颜色字符串</span><br><span class=\"line\"> */</span><br><span class=\"line\">function RGBToHex(rgb) &#123;</span><br><span class=\"line\">    var rgbArr = rgb.split(/[^\\d]+/)</span><br><span class=\"line\">    var color = rgbArr[1]&lt;&lt;16 | rgbArr[2]&lt;&lt;8 | rgbArr[3]</span><br><span class=\"line\">    return &#x27;#&#x27;+ color.toString(16)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// -------------------------------------------------</span><br><span class=\"line\">hexToRGB(&#x27;#ffffff&#x27;)               // &#x27;rgb(255,255,255)&#x27;</span><br><span class=\"line\">RGBToHex(&#x27;rgb(255,255,255)&#x27;)      // &#x27;#ffffff&#x27;</span><br></pre></td></tr></table></figure>\n","categories":["js"],"tags":["js"]},{"title":"js函数","url":"/blog-next/2019/03/02/js%E5%87%BD%E6%95%B0/","content":"<h4 id=\"函数的声明\"><a href=\"#函数的声明\" class=\"headerlink\" title=\"函数的声明\"></a>函数的声明</h4><p>具名函数 匿名函数 具名函数赋值 Function 箭头函数</p>\n<h3 id=\"this-和-arguments\"><a href=\"#this-和-arguments\" class=\"headerlink\" title=\"this 和 arguments\"></a>this 和 arguments</h3><p>this 是 fn.call(this, ...args) 的第一个参数，arguments 是第二个</p>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>按照语法树，就近原则<br>注意 js 是静态作用域<br>注意变量是事先生命的，但是是可以动态改变的</p>\n<h3 id=\"函数调用栈\"><a href=\"#函数调用栈\" class=\"headerlink\" title=\"函数调用栈\"></a>函数调用栈</h3><p>最多压 9641 超多就会报错</p>\n<h3 id=\"call-apply\"><a href=\"#call-apply\" class=\"headerlink\" title=\"call apply\"></a>call apply</h3><p>参数确定的时候函数用 call 调用，不确定个数的时候用 apply 调用</p>\n<h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h3><p>用一个新函数来绑定 this，保证 this 是确定的<br>fn.bind.call(fn, {}, 1,2,3)</p>\n<h3 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h3><p>每一个函数都有 return，如果没写相当于 return undefined</p>\n<h3 id=\"柯里化，偏函数\"><a href=\"#柯里化，偏函数\" class=\"headerlink\" title=\"柯里化，偏函数\"></a>柯里化，偏函数</h3><p>返回函数的函数, 可以将真实计算拖延到最后再做</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 柯里化之前</span><br><span class=\"line\">function sum(x, y) &#123;</span><br><span class=\"line\">  return x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 柯里化之后</span><br><span class=\"line\">funciton addy(y) &#123;</span><br><span class=\"line\">  return sum(1, y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 柯里化之前</span><br><span class=\"line\">function Handlebar(template, data)&#123;</span><br><span class=\"line\">    return template.replace(&#x27;&#123;&#123;name&#125;&#125;&#x27;, data.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 柯里化之后</span><br><span class=\"line\">function HandleBar(template) &#123;</span><br><span class=\"line\">  return function(data) &#123;</span><br><span class=\"line\">    return template.replace(&#x27;&#123;&#123;name&#125;&#125;&#x27;, data.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>满足下列任一情况</p>\n<ol>\n<li>接受一个或者多个函数作为输入<br> forEach map sort reduce filter<br> array.map.call(array, fn)</li>\n<li>输出一个函数<br> lodash.curry _.debounce</li>\n<li>满足两者<br> Function.prototype.bind</li>\n</ol>\n<h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p>作为参数被调用的函数就是回调函数<br>注意和异步没关系</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>返回对象的函数就是构造函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function Ex() &#123;</span><br><span class=\"line\">  this.name = &#x27;ex&#x27;</span><br><span class=\"line\">  return this</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var ex = new Ex()</span><br><span class=\"line\">// 加 return this 就可以写成 Ex.call(&#123;&#125;) </span><br></pre></td></tr></table></figure>\n\n","categories":["js"],"tags":["js","G","函数"]},{"title":"js数组求和","url":"/blog-next/2018/11/09/js%E6%95%B0%E7%BB%84%E6%B1%82%E5%92%8C/","content":"<h3 id=\"js-五种数组求和\"><a href=\"#js-五种数组求和\" class=\"headerlink\" title=\"js 五种数组求和\"></a>js 五种数组求和</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function sum1(arr) &#123;</span><br><span class=\"line\">  // 递归</span><br><span class=\"line\">  if (arr.length == 0) &#123;</span><br><span class=\"line\">    return 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (arr.length == 1) &#123;</span><br><span class=\"line\">    return arr[0]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (arr.length &gt; 1) &#123;</span><br><span class=\"line\">    return arr[0] + sum1(arr.slice(1))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function sum2(arr) &#123;</span><br><span class=\"line\">  // for</span><br><span class=\"line\">  var sum = 0</span><br><span class=\"line\">  for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    sum += arr[i]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function sum3(arr) &#123;</span><br><span class=\"line\">  // forEach</span><br><span class=\"line\">  var sum = 0</span><br><span class=\"line\">  arr.forEach(item =&gt; &#123;</span><br><span class=\"line\">    sum += item</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  return sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function sum4(arr) &#123;</span><br><span class=\"line\">  // reduce</span><br><span class=\"line\">  return arr.reduce(function(pre, next, index, arr) &#123;</span><br><span class=\"line\">    return pre + next</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function sum5(arr) &#123;</span><br><span class=\"line\">  // eval</span><br><span class=\"line\">  return eval(arr.join(&#x27;+&#x27;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["js-code"],"tags":["code"]},{"title":"js排序（更新中）","url":"/blog-next/2018/11/09/js%E6%8E%92%E5%BA%8F%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/","content":"<h3 id=\"sort-api\"><a href=\"#sort-api\" class=\"headerlink\" title=\"sort api\"></a>sort api</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function sort1(arr) &#123;</span><br><span class=\"line\">    // sort api</span><br><span class=\"line\">    return arr.sort((a, b) =&gt; &#123;</span><br><span class=\"line\">      return a - b</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bubble\"><a href=\"#bubble\" class=\"headerlink\" title=\"bubble\"></a>bubble</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function sort2(arr) &#123;</span><br><span class=\"line\">  // bubble</span><br><span class=\"line\">  for (var i = 0; i &lt; arr.length-1; i++) &#123;</span><br><span class=\"line\">    for (var j = 0; j &lt; arr.length-i-1; j++) &#123;</span><br><span class=\"line\">      var temp = &#x27;&#x27;</span><br><span class=\"line\">      if (arr[j+1] &lt; arr[j]) &#123;</span><br><span class=\"line\">        temp = arr[j+1]</span><br><span class=\"line\">        arr[j+1] = arr[j]</span><br><span class=\"line\">        arr[j] = temp</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://i.loli.net/2018/12/15/5c14b7b81b61f.gif\"><img src=\"https://i.loli.net/2018/12/15/5c14b7b81b61f.gif\" alt=\"bubblesort.gif\" loading=\"lazy\"></a></p>\n<h3 id=\"random-quickSort\"><a href=\"#random-quickSort\" class=\"headerlink\" title=\"random-quickSort\"></a>random-quickSort</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function quickSort(arr) &#123;</span><br><span class=\"line\">  if (arr.length &lt;= 1) &#123;</span><br><span class=\"line\">    return arr</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var pivotIndex = Math.floor(arr.length / 2)</span><br><span class=\"line\">  var pivot = arr.splice(pivotIndex, 1)[0]</span><br><span class=\"line\">  var left = []</span><br><span class=\"line\">  var right = []</span><br><span class=\"line\">  for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    if (arr[i] &lt; pivot) &#123;</span><br><span class=\"line\">      left.push(arr[i])</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      right.push(arr[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return quickSort(left).concat([pivot, quickSort(right)])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://i.loli.net/2018/12/15/5c14b72e4f8f2.gif\"><img src=\"https://i.loli.net/2018/12/15/5c14b72e4f8f2.gif\" alt=\"quicksort.gif\" loading=\"lazy\"></a></p>\n","categories":["js-code"],"tags":["code"]},{"title":"js对象相关","url":"/blog-next/2019/01/10/js%E5%AF%B9%E8%B1%A1%E7%9B%B8%E5%85%B3/","content":"<h3 id=\"四种对象\"><a href=\"#四种对象\" class=\"headerlink\" title=\"四种对象\"></a>四种对象</h3><ol>\n<li><p>数字<br>var n =1 和new Object() 的区别<br>1 内存<br>2 有一些内置的方法<br>当然字面量在使用的一些方法的时候会生成一个零时对象，这个对象有全部的内置方法，使用之后这个对象就会从内存中消失</p>\n</li>\n<li><p>字符串<br>var s = new String() 之后也会得到一个 hash<br>s[0] 就能获取到 hash 的第零项<br>s.charAt(0) 和 s[0] 等价<br>&#39;a&#39;.charCodeAt(0) 得到对应位置unicode编码  &#39;a&#39;.charCodeAt(0).toString(16) 利用 toSting(16) 就可以转换成16进制<br>&#39;s  &#39;.trim() 去掉空格</p>\n</li>\n<li><p>布尔<br>字面量和new Boolean()的区别最主要是 new 生成一个对象，这个对象原始值是false，但这个对象可以转化为true</p>\n</li>\n<li><p>object</p>\n</li>\n</ol>\n<p>上面这四种对象各有自己的一些属性，但是前三种有object的所有属性，<br>通过构造函数生成的对象又有各自对象的所有属性，</p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><p>他们是通过原型链继承的</p>\n<pre><code>var n = new Number(1)\nn.__proto__ == Number.prototype\nn.__proto__.__proto__== Object.prototype\nNumber.__proto__==Function.prototype\n\nvar obj = new Object()\nobj.__proto__ == Object.prototype\nObject.__proto__ == Function.prototype\n\nvar fn = new Function()\nfn.__proto__==Function.prototype\nFunction.__proto__==Function.prototype // Function 就是 Function 的构造函数\n</code></pre>\n<p>重要的就是</p>\n<pre><code>对象.__proto__ === 构造函数.prototype \n生成的对象之所以能够有 __proto__ 这个共有属性的引用就是因为 js 把原型（共有属性）的引用保存在了构造函数的 prototype 上\n</code></pre>\n","categories":["js"],"tags":["js","G","js数据类型"]},{"title":"js数据类型转换","url":"/blog-next/2019/01/09/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>JavaScript 是一种动态类型语言, 变量没有类型限制，虽然类型不确定，但是各种运算符对数据类型是有要求的。如果运算符发现运算子的类型与预期不符，就会自动转换类型。<br>先说总结的，再说一些啰嗦的</p>\n<h2 id=\"总结的常用的\"><a href=\"#总结的常用的\" class=\"headerlink\" title=\"总结的常用的\"></a>总结的常用的</h2><p>任意类型转字符串 <code>String(x) x.toString x+&#39;&#39;</code><br>  注意有个特例就是 <code>&#123;&#125;+&#39;&#39;</code> 返回 0<br>任意类型转换为数字 <code>Number(x) parseInt(x, 10) parseFloat(x) x-0 +x</code><br>任意类型转换为布尔 <code>Boolean(x) !!x</code></p>\n<h2 id=\"强制转换\"><a href=\"#强制转换\" class=\"headerlink\" title=\"强制转换\"></a>强制转换</h2><h3 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h3><ol>\n<li>原始类型值的转换规则就是 parseInt 和 Number 的规则</li>\n<li>Number 方法的参数是对象时返回 NaN, 除非参数是包含单个值的数组<blockquote>\n<p>这里就有Number()一个简单的规则了，首先调用valueof()，如果返回原始类型，就用Number，否则就调用toString(), 如果返回原始类型，就用Number，如果返回的是对象，就直接报错<br><img src=\"https://i.loli.net/2019/01/08/5c34b1d82a534.jpg\" alt=\"Number.jpg\" loading=\"lazy\"></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"toString-方法\"><a href=\"#toString-方法\" class=\"headerlink\" title=\"toString 方法\"></a>toString 方法</h3><p><code>[object Object]</code> 或者 <code>1,2,3</code> 或者 <code>function()&#123;&#125;</code></p>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><ol>\n<li>原始类型转换<br>数值就转换相应的字符串<br>字符串转为原来的值<br>布尔值 <code>true</code> 转为 <code>&#39;true&#39;</code>, <code>false</code> 转为 <code>&#39;false&#39;</code><br><code>undefined</code> 转为 <code>&#39;undefined&#39;</code><br><code>null</code> 转为 <code>&#39;null&#39;</code></li>\n<li>对象<br>方法的参数如果是对象，返回一个类型字符串；如果是数组，返回该数组的字符串形式,函数返回函数的字符串形式<blockquote>\n<p>String 的规则就正好和 Number 相反，首先调用 toString 如果返回原始类型就用 String，如果返回的是对象，就调用 valueOf，返回的是原始类型的值就调用 String 若返回的是对象就抛出错误<br><img src=\"https://i.loli.net/2019/01/08/5c34bc66642f4.jpg\" alt=\"String.jpg\" loading=\"lazy\"></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"valueOf-方法\"><a href=\"#valueOf-方法\" class=\"headerlink\" title=\"valueOf 方法\"></a>valueOf 方法</h3><p>返回数据本身的值，null 和 undefined 会报错</p>\n<h3 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h3><p>五个falsy值 <code>0 &#39;&#39; null undefined NaN</code> 会转化为 false<br>其余都是 true<br><img src=\"https://i.loli.net/2019/01/08/5c34bedc75d01.jpg\" alt=\"Boolean.jpg\" loading=\"lazy\"></p>\n<h2 id=\"自动转换\"><a href=\"#自动转换\" class=\"headerlink\" title=\"自动转换\"></a>自动转换</h2><blockquote>\n<p>自动转换的规则是这样的：预期什么类型的值，就调用该类型的转换函数。比如，某个位置预期为字符串，就调用String函数进行转换。如果该位置即可以是字符串，也可能是数值，那么默认转为数值。</p>\n</blockquote>\n<h3 id=\"自动转换为布尔值\"><a href=\"#自动转换为布尔值\" class=\"headerlink\" title=\"自动转换为布尔值\"></a>自动转换为布尔值</h3><p><code>if()</code><br><code>&amp;&amp;</code><br><code>!</code><br><code>expression ? true : false</code><br><code>!!expression</code></p>\n<h3 id=\"自动转换为字符串\"><a href=\"#自动转换为字符串\" class=\"headerlink\" title=\"自动转换为字符串\"></a>自动转换为字符串</h3><p>字符串的自动转换主要发生在字符串的加法运算时。当一个值为字符串，另一个值为非字符串，则后者转为字符串。<br><img src=\"https://i.loli.net/2019/01/08/5c34c3fb87011.jpg\" alt=\"Auto-string.jpg\" loading=\"lazy\"></p>\n<h3 id=\"自动转换为数值\"><a href=\"#自动转换为数值\" class=\"headerlink\" title=\"自动转换为数值\"></a>自动转换为数值</h3><p>除了加法运算符（+）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值<br><img src=\"https://i.loli.net/2019/01/09/5c34c9c6e5b85.jpg\" alt=\"Auto-number.jpg\" loading=\"lazy\"><br>一元运算符也会把运算子转换为数值<br><img src=\"https://i.loli.net/2019/01/09/5c34cd0f98921.jpg\" alt=\"Auto-number2.jpg\" loading=\"lazy\"></p>\n","categories":["js"],"tags":["js","G","js数据类型"]},{"title":"js数组部分api源码实现","url":"/blog-next/2019/09/02/js%E6%95%B0%E7%BB%84%E9%83%A8%E5%88%86api%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/","content":"<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h3><pre><code>Array.prototype.join = function (char) &#123;\n  let result = this[0] || &#39;&#39;\n  let length = this.length\n  for (let i = 1; i &lt; length; i++) &#123;\n    result += char + this[i]\n  &#125;\n  return result\n&#125;\n</code></pre>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h3><pre><code>Array.prototype.slice = function (begin, end) &#123;\n  let result = []\n  begin = begin || 0\n  end = end || this.length\n  for (let i = begin; i &lt; end; i++) &#123;\n    result.push(this[i])\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><pre><code>Array.prototype.sort = function (fn) &#123;\n  let x = (a, b) =&gt; a - b\n  fn = fn || x\n  for (let i = 0; i &lt; this.length - 1; i++) &#123;\n    for (let j = i + 1; j &lt; this.length; j++) &#123;\n      if (fn.call(null, this[j], this[i]) &lt; 0) &#123;\n        [this[i], this[j]] = [this[j], this[i]]\n      &#125;\n    &#125;\n  &#125;\n  return this\n&#125;\n</code></pre>\n<h3 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h3><pre><code>Array.prototype.forEach = function (fn) &#123;\n  for (let i = 0; i &lt; this.length; i++) &#123;\n    if (i in this) &#123;\n      fn.call(undefined, this[i], i, this)\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><pre><code>Array.prototype.map = function (fn) &#123;\n  let result = []\n  for (let i = 0; i &lt; this.length; i++) &#123;\n    if (i in this) &#123;\n      result[i] = (fn.call(undefined, this[i], i, this))\n    &#125;\n  &#125;\n  return result\n&#125;\n</code></pre>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><pre><code>Array.prototype.filter = function (fn) &#123;\n  let result = [], temp\n  for (let i = 0; i &lt; this.length; i++) &#123;\n    if (i in this) &#123;\n      if (temp = fn.call(undefined, this[i], i, this)) &#123;\n        result.push(temp)\n      &#125;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><pre><code>Array.prototype.reduce = function (fn, init) &#123;\n  let result = init\n  for (let i = 0; i &lt; this.length; i++) &#123;\n    if (i in this) &#123;\n      result = fn.call(undefined, result, this[i], i, this)\n    &#125;\n  &#125;\n  return result\n&#125;\n</code></pre>\n","categories":["js-code"],"tags":["code"]},{"title":"js最长递增子序列","url":"/blog-next/2020/10/12/js%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/","content":"<h2 id=\"vue3-DOM-diff-最长递增子序列的实现\"><a href=\"#vue3-DOM-diff-最长递增子序列的实现\" class=\"headerlink\" title=\"vue3 DOM diff 最长递增子序列的实现\"></a>vue3 DOM diff 最长递增子序列的实现</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://en.wikipedia.org/wiki/Longest_increasing_subsequence</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSequence</span>(<span class=\"params\">arr: number[]</span>): <span class=\"title\">number</span>[] </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 数组副本</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = arr.slice();</span><br><span class=\"line\">  <span class=\"comment\">// 最后返回的序列 存储的是长度为 i 的递增子序列最小末尾值的索引</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i, j, u, v, c;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保存数组第 i 项</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> arrI = arr[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arrI !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 取出现有的列表最后一个值</span></span><br><span class=\"line\">      j = result[result.length - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果第 i-1 项小于第 i 项，就要把下标 i 排列到 result 的最后，继续下一个循环</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[j] &lt; arrI) &#123;</span><br><span class=\"line\">        p[i] = j;</span><br><span class=\"line\">        result.push(i);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 否则就要挨个和前面的比较</span></span><br><span class=\"line\">      u = <span class=\"number\">0</span>; <span class=\"comment\">// 索引（放置的索引）</span></span><br><span class=\"line\">      <span class=\"comment\">// 保存现有 result 的长度</span></span><br><span class=\"line\">      v = result.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 利用二分查找出比 第 i 项小的值(最小差，也就是最接近) c，并把 result 的长度设为 c</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (u &lt; v) &#123;</span><br><span class=\"line\">        c = ((u + v) / <span class=\"number\">2</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[result[c]] &lt; arrI) &#123;</span><br><span class=\"line\">          u = c + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          v = c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 找到 位置 u 更新 result[u]</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arrI &lt; arr[result[u]]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (u &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          p[i] = result[u - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result[u] = i;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  u = result.length;</span><br><span class=\"line\">  v = result[u - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 回溯数组 p，找到最终的索引</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (u-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    result[u] = v;</span><br><span class=\"line\">    v = p[v];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"leetcode-300-最长上升子序列\"><a href=\"#leetcode-300-最长上升子序列\" class=\"headerlink\" title=\"leetcode 300 最长上升子序列\"></a>leetcode 300 最长上升子序列</h2><p>给定一个无序的整数数组，找到其中最长上升子序列的长度</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [10,9,2,5,3,7,101,18]</span><br><span class=\"line\">输出: 4</span><br><span class=\"line\">解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。</span><br></pre></td></tr></table></figure>\n\n<p>vue3 对应的是 O(nlogn) 的复杂度，下面写 O(n^2) 的复杂度<br>思路就是双层循环，动态规划<br>比如数组的第 i 项对应的最长子序列 就是 第 i - 1 项对应的最长子序列 + 1<br>[9,8,3,4,5] 的子序列长度数组就是 [1,1,1,2,3]</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLTS = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dp = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(len).fill(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class=\"line\">        dp[i] = <span class=\"built_in\">Math</span>.max(dp[i], dp[j] + <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(...dp);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","categories":["js"],"tags":["code","vue","算法","leetcode"]},{"title":"js标准库Array","url":"/blog-next/2019/07/16/js%E6%A0%87%E5%87%86%E5%BA%93Array/","content":"<h3 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h3><h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>构造函数一般传数组的长度，但是因为传不同的参数会导致不同的数组，所以一般不用构造函数生成<br>而且生成的数组连键名都是获取不到的</p>\n<h4 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h4><h5 id=\"Array-isArray\"><a href=\"#Array-isArray\" class=\"headerlink\" title=\"Array.isArray()\"></a>Array.isArray()</h5><p>返回 true 和 false</p>\n<h4 id=\"实例方法-1\"><a href=\"#实例方法-1\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h4><h5 id=\"valueOf-toString\"><a href=\"#valueOf-toString\" class=\"headerlink\" title=\"valueOf toString\"></a>valueOf toString</h5><p>valueOf 返回本身<br>toString 返回扁平化之后的字符串</p>\n<h5 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h5><p>后面追加一个或者多个，返回新数组长度，改变原数组</p>\n<h5 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop\"></a>pop</h5><p>后面删除最后一个，返回该元素，改变原数组</p>\n<h5 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"shift\"></a>shift</h5><p>前面删除一个，返回该元素，改变原数组</p>\n<h5 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift\"></a>unshift</h5><p>前面追加一个或者多个，返回数组长度，改变原数组</p>\n<h5 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h5><p>参数是分隔符，如果没有用逗号，返回字符串</p>\n<h5 id=\"cancat\"><a href=\"#cancat\" class=\"headerlink\" title=\"cancat\"></a>cancat</h5><p>多个数组合并，或者把其他参数合并到数组中，原数组不变，返回新数组</p>\n<h5 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse\"></a>reverse</h5><p>前后颠倒，改变原数组，返回改变后的数组</p>\n<h5 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h5><p>提取数组的一部分，返回新数组，原数组不变</p>\n<h5 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice\"></a>splice</h5><p>万能删除添加，返回删除的元素，改变原数组</p>\n<h5 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h5><p>排序，原数组会被改变<br>不传参数会根据字符串的顺序排序，传参数之后如果返回值大于 0，升序，否则降序</p>\n<h5 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h5><p>返回新数组，不改变原数组，有返回值</p>\n<h5 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h5><p>没有返回值，不改变原数组，而且无法中断执行，只有 for 循环能 break</p>\n<h5 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h5><p>参数也是一个函数，返回 true 的值组成一个新数组，不会改变原数组</p>\n<pre><code>[1,2,3,undefined].filter(Boolean)\n</code></pre>\n<h5 id=\"some-every\"><a href=\"#some-every\" class=\"headerlink\" title=\"some every\"></a>some every</h5><p>参数都是一个函数，返回 true 和 false</p>\n<h5 id=\"reduce-reduceRight\"><a href=\"#reduce-reduceRight\" class=\"headerlink\" title=\"reduce reduceRight\"></a>reduce reduceRight</h5><p>第一个参数是函数，第二个参数是初值</p>\n<h5 id=\"indexOf-lastIndexOf\"><a href=\"#indexOf-lastIndexOf\" class=\"headerlink\" title=\"indexOf lastIndexOf\"></a>indexOf lastIndexOf</h5><p>返回元素第一次和最后一次出现的位置，没有的话返回 -1<br>注意不能识别 NaN，因为内部用的 ===，所以找不到</p>\n","categories":["js"],"tags":["js","Array","标准库"]},{"title":"js标准库Object","url":"/blog-next/2019/02/15/js%E6%A0%87%E5%87%86%E5%BA%93Object/","content":"<h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><h4 id=\"Object-1\"><a href=\"#Object-1\" class=\"headerlink\" title=\"Object()\"></a>Object()</h4><p>本身是一个方法，用来将任意值转换为对象</p>\n<h4 id=\"new-Object\"><a href=\"#new-Object\" class=\"headerlink\" title=\"new Object()\"></a>new Object()</h4><p>根据传入的参数，生成一个新对象，和 Object 用法相似，都是对象就本身，原始类型就生成包装对象<br>但是语义是不同的，Object(value) 是把 value 转成一个对象，new Object(value) 生成一个对象，它的值是 value</p>\n<h4 id=\"Object-静态方法\"><a href=\"#Object-静态方法\" class=\"headerlink\" title=\"Object 静态方法\"></a>Object 静态方法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object.keys() </span><br><span class=\"line\">Object.getOwnPropertyNames() 可返回不可枚举的属性</span><br><span class=\"line\">Object.getOwnPropertyDescriptor() 获取某个属性的描述对象</span><br><span class=\"line\">Object.defineProperty()</span><br><span class=\"line\">Object.defineProperties()</span><br><span class=\"line\">Object.getPrototypeOf()</span><br><span class=\"line\">Object.create()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Object-实例方法\"><a href=\"#Object-实例方法\" class=\"headerlink\" title=\"Object 实例方法\"></a>Object 实例方法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object.prototype.valueOf()</span><br><span class=\"line\">Object.prototype.toString()  // 返回类型字符串</span><br><span class=\"line\">Object.prototype.toLocaleString()</span><br><span class=\"line\">Object.prototype.hasOwnProperty()</span><br><span class=\"line\">Object.prototype.isPrototypeOf()</span><br><span class=\"line\">Object.prototype.propertyIsEnnumerable() // 属性是否可枚举</span><br></pre></td></tr></table></figure>","categories":["js"],"tags":["js","标准库"]},{"title":"js标准库Date","url":"/blog-next/2019/07/16/js%E6%A0%87%E5%87%86%E5%BA%93Date/","content":"<h3 id=\"普通函数的用法\"><a href=\"#普通函数的用法\" class=\"headerlink\" title=\"普通函数的用法\"></a>普通函数的用法</h3><p>Date(2000, 1, 1) 或者 Date() 返回当前时间的字符串</p>\n<h3 id=\"构造函数的用法\"><a href=\"#构造函数的用法\" class=\"headerlink\" title=\"构造函数的用法\"></a>构造函数的用法</h3><p>New Date() 返回 Date 对象的实例<br>可以接受诸如 毫秒数 日期字符串 以及年月日这种多个整数的 等参数</p>\n<h3 id=\"日期的运算\"><a href=\"#日期的运算\" class=\"headerlink\" title=\"日期的运算\"></a>日期的运算</h3><ul>\n<li>就返回字符串相连（转为string）</li>\n</ul>\n<ul>\n<li><p>就返回毫秒数 （转为number）</p>\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><p>Date.parse<br>Date.now</p>\n</li>\n</ul>\n<h3 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h3><p>大概有 to get set 三类</p>\n","categories":["js"],"tags":["js","标准库"]},{"title":"js正则","url":"/blog-next/2020/03/06/js%E6%AD%A3%E5%88%99/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近系统性地过了一遍 js 正则，参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OWNjNjExNzZmYjlhMDBhNDM3YjI5MGI=\">《JavaScript 正则迷你书》<i class=\"fa fa-external-link-alt\"></i></span>,<br>很多人说，正则是反应程序员水平的侧面标准，这本书知识点非常到位，把核心的东西都梳理得很好</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9SZWdFeHAvYmxvYi9tYXN0ZXIvcmVnMS5qcw==\">正则表达式字符匹配<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9SZWdFeHAvYmxvYi9tYXN0ZXIvcmVnMi5qcw==\">正则表达式匹配位置<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9SZWdFeHAvYmxvYi9tYXN0ZXIvcmVnMy5qcw==\">正则表达式括号的应用<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9SZWdFeHAvYmxvYi9tYXN0ZXIvcmVnNC5qcw==\">正则表达式回溯法原理<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9SZWdFeHAvYmxvYi9tYXN0ZXIvcmVnNS5qcw==\">正则表达式的拆分<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9SZWdFeHAvYmxvYi9tYXN0ZXIvcmVnNi5qcw==\">正则表达式的构建<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9SZWdFeHAvYmxvYi9tYXN0ZXIvcmVnNy5qcw==\">正则表达式的编程<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"匹配-16-进制颜色值\"><a href=\"#匹配-16-进制颜色值\" class=\"headerlink\" title=\"匹配 16 进制颜色值\"></a>匹配 16 进制颜色值</h3><pre><code>const reg = /#([0-9a-fA-F]&#123;6&#125;)|([0-9a-fA-F]&#123;3&#125;)/g;\n</code></pre>\n<h3 id=\"匹配时间-hh-mm\"><a href=\"#匹配时间-hh-mm\" class=\"headerlink\" title=\"匹配时间 hh:mm\"></a>匹配时间 hh:mm</h3><pre><code>const reg = /^[01][0-9]|[2][0-3]:[0-5][0-9]$/g;\n</code></pre>\n<h3 id=\"匹配日期-yyyy-mm-dd\"><a href=\"#匹配日期-yyyy-mm-dd\" class=\"headerlink\" title=\"匹配日期 yyyy-mm-dd\"></a>匹配日期 yyyy-mm-dd</h3><pre><code>const reg = /^[0-9]&#123;4&#125;-(0[1-9]|1[12])-(0[1-9]|[12][0-9]|[3][01])$/g;\n</code></pre>\n<h3 id=\"windows-操作文件路径\"><a href=\"#windows-操作文件路径\" class=\"headerlink\" title=\"windows 操作文件路径\"></a>windows 操作文件路径</h3><pre><code>const reg = /^[a-zA-Z]:\\\\([^\\\\:*&lt;&gt;|&quot;?\\r\\n/]+\\\\)*([^\\\\:*&lt;&gt;|&quot;?\\r\\n/]+)?$/;\n</code></pre>\n<h3 id=\"匹配-id\"><a href=\"#匹配-id\" class=\"headerlink\" title=\"匹配 id\"></a>匹配 id</h3><pre><code>const reg = /id=&quot;[^&quot;]*&quot;/;\n</code></pre>\n<h3 id=\"匹配位置\"><a href=\"#匹配位置\" class=\"headerlink\" title=\"匹配位置\"></a>匹配位置</h3><pre><code>const reg = /^|$/g;\n</code></pre>\n<h3 id=\"不匹配任何东西\"><a href=\"#不匹配任何东西\" class=\"headerlink\" title=\"不匹配任何东西\"></a>不匹配任何东西</h3><pre><code>const reg = /.^/\n</code></pre>\n<h3 id=\"数字千位分隔符表示法\"><a href=\"#数字千位分隔符表示法\" class=\"headerlink\" title=\"数字千位分隔符表示法\"></a>数字千位分隔符表示法</h3><pre><code>const reg = /(?!^)(?=(\\d&#123;3&#125;)+$)/g\n</code></pre>\n<h3 id=\"验证密码\"><a href=\"#验证密码\" class=\"headerlink\" title=\"验证密码\"></a>验证密码</h3><pre><code>const reg = /(?=.*[0-9])(?=.*[a-zA-Z])^[0-9a-zA-Z]&#123;6,12&#125;$/;\nconst reg1 = /(?!^[0-9]&#123;6,12&#125;$)(?!^[a-z]&#123;6,12&#125;$)(?!^[A-Z]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$/;\n</code></pre>\n<h3 id=\"字符串trim方法模拟\"><a href=\"#字符串trim方法模拟\" class=\"headerlink\" title=\"字符串trim方法模拟\"></a>字符串trim方法模拟</h3><pre><code>const reg = /^\\s+|\\s+$/g\n</code></pre>\n<h3 id=\"将每个单词的首字母转换为大写\"><a href=\"#将每个单词的首字母转换为大写\" class=\"headerlink\" title=\"将每个单词的首字母转换为大写\"></a>将每个单词的首字母转换为大写</h3><pre><code>const reg = /(?:^|\\s)\\w/g\nconst string = &quot;i am gerritv&quot;.replace(reg, c =&gt; c.toUpperCase());\n</code></pre>\n<h3 id=\"驼峰化\"><a href=\"#驼峰化\" class=\"headerlink\" title=\"驼峰化\"></a>驼峰化</h3><pre><code>const reg = /[-_\\s]+(.)?/g;\nconst string = &quot;_si-uiw&quot;.replace(reg, (match, c) =&gt; &#123;\n    c ? c.toUpperCase() : &quot;&quot;;\n&#125;);\n</code></pre>\n<h3 id=\"中线化\"><a href=\"#中线化\" class=\"headerlink\" title=\"中线化\"></a>中线化</h3><pre><code>const reg = /([A-Z])/g;\nconst reg1 = /[-_\\s]+/g;\nconst string = &quot;MozTransform&quot;\n    .replace(reg, &quot;-$1&quot;)\n    .replace(reg1, &quot;-&quot;)\n    .toLowerCase();\n</code></pre>\n<h3 id=\"身份证正则\"><a href=\"#身份证正则\" class=\"headerlink\" title=\"身份证正则\"></a>身份证正则</h3><pre><code>const reg = /^\\d&#123;15&#125;|\\d&#123;17&#125;[\\dxX]$/;\n</code></pre>\n<h3 id=\"IPV4地址\"><a href=\"#IPV4地址\" class=\"headerlink\" title=\"IPV4地址\"></a>IPV4地址</h3><pre><code>const reg = /^((0&#123;0,2&#125;\\d|0?\\d&#123;2&#125;|1\\d&#123;2&#125;|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;(0&#123;0,2&#125;\\d|0?\\d&#123;2&#125;|1\\d&#123;2&#125;|2[0-4]\\d\n</code></pre>\n","categories":["js"],"tags":["RegExp"]},{"title":"js标准库String","url":"/blog-next/2019/07/16/js%E6%A0%87%E5%87%86%E5%BA%93String/","content":"<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><h4 id=\"fromCharCode\"><a href=\"#fromCharCode\" class=\"headerlink\" title=\"fromCharCode\"></a>fromCharCode</h4><p>如果参数为空，就返回&#39;&#39;,否则就返回 Unicode 对应的字符串</p>\n<h3 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h3><h4 id=\"charAt\"><a href=\"#charAt\" class=\"headerlink\" title=\"charAt\"></a>charAt</h4><p>返回指定位置的字符，大于长度或者负数都返回空字符串</p>\n<h4 id=\"charCodeAt\"><a href=\"#charCodeAt\" class=\"headerlink\" title=\"charCodeAt\"></a>charCodeAt</h4><p>返回指定位置的 unicode，大于或者负数都返回 NaN</p>\n<h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h4><p>返回一个新字符串，不改变原字符串, 都是字符串连接不是的话要改成字符串</p>\n<h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h4><p>返回一个字字符串，不改变原字符串，没有的话也是返回&#39;&#39;</p>\n<h4 id=\"substring\"><a href=\"#substring\" class=\"headerlink\" title=\"substring\"></a>substring</h4><p>substring(9, -3) 会把-3 变成 0，然后变成(0, 9)，违反直觉，所以不建议使用，依然返回新字符串，不改变原字符串</p>\n<h4 id=\"substr\"><a href=\"#substr\" class=\"headerlink\" title=\"substr\"></a>substr</h4><p>和 slice 的区别是第二个参数是要截取的长度，返回一个新的字符串，且不会改动原字符串。</p>\n<h4 id=\"indexOf-lastIndexOf\"><a href=\"#indexOf-lastIndexOf\" class=\"headerlink\" title=\"indexOf lastIndexOf\"></a>indexOf lastIndexOf</h4><p>indexOf(&#39;o&#39;, 6) 6 是开始的位置, 返回一个字符串在另一个字符串中出现的位置</p>\n<h4 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\"trim\"></a>trim</h4><p>去除两端的 \\s \\t \\v \\n \\r，返回新字符串，不改变原字符串</p>\n<h4 id=\"toLowerCase-toUpperCase\"><a href=\"#toLowerCase-toUpperCase\" class=\"headerlink\" title=\"toLowerCase toUpperCase\"></a>toLowerCase toUpperCase</h4><p>改变大小写，不改变原来字符串的大小</p>\n<h4 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h4><p>找到了返回数组，找不到返回 null</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27;cat, bat, sat, fat&#x27;.match(&#x27;at&#x27;) // [&quot;at&quot;]</span><br><span class=\"line\">&#x27;cat, bat, sat, fat&#x27;.match(&#x27;xt&#x27;) // null</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search\"></a>search</h4><p>和 match 基本一致，不同得是返回开始的位置</p>\n<h4 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h4><p>基本是替换第一个，除非是正则表达式加上了 g</p>\n<h4 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split\"></a>split</h4><p>返回一个按照指定分隔符分成的数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27;a|b|c&#x27;.split(&#x27;|&#x27;) // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class=\"line\">&#x27;a|b|c&#x27;.split(&#x27;&#x27;) // [&#x27;a&#x27;, &#x27;|&#x27;, &#x27;b&#x27;, &#x27;|&#x27;, &#x27;c&#x27;]</span><br><span class=\"line\">&#x27;a|b|c&#x27;.split() // [&#x27;a|b|c&#x27;]</span><br><span class=\"line\">&#x27;|b|c&#x27;.split(&#x27;|&#x27;) // [&#x27;&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class=\"line\">&#x27;a|b|c&#x27;.split(&#x27;|&#x27;, 2) // [&#x27;a&#x27;, &#x27;b&#x27;]</span><br><span class=\"line\">&#x27;a|b|c&#x27;.split(&#x27;|&#x27;, 4) // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat\"></a>repeat</h4><p>构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;abc&quot;.repeat(0)      // &quot;&quot;</span><br><span class=\"line\">&quot;abc&quot;.repeat(1)      // &quot;abc&quot;</span><br><span class=\"line\">&quot;abc&quot;.repeat(2)      // &quot;abcabc&quot;</span><br><span class=\"line\">&quot;abc&quot;.repeat(3.5)    // &quot;abcabcabc&quot; 参数count将会被自动转换成整数.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"localeCompare\"><a href=\"#localeCompare\" class=\"headerlink\" title=\"localeCompare\"></a>localeCompare</h4><p>比较两个字符的长度，转成 unicode 判断</p>\n","categories":["js"],"tags":["js","标准库"]},{"title":"js标准库RegExp","url":"/blog-next/2019/07/16/js%E6%A0%87%E5%87%86%E5%BA%93RegExp/","content":"<h3 id=\"实例属性（没什么用）\"><a href=\"#实例属性（没什么用）\" class=\"headerlink\" title=\"实例属性（没什么用）\"></a>实例属性（没什么用）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">RegExp.prototype.ignoreCase</span><br><span class=\"line\">RegExp.prototype.global</span><br><span class=\"line\">RegExp.prototype.multiline</span><br><span class=\"line\">RegExp.prototype.lastIndex</span><br><span class=\"line\">RegExp.prototype.source</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h3><ul>\n<li>RegExp.prototype.test()<br>如果带g， 每次都从 lastIndex 开始</li>\n<li>RegExp.prototype.exec()<br>参数很多，第一项是匹配的，第二项是捕获的</li>\n</ul>\n<h3 id=\"字符串实例方法\"><a href=\"#字符串实例方法\" class=\"headerlink\" title=\"字符串实例方法\"></a>字符串实例方法</h3><ul>\n<li>String.prototype.match()<br>返回一个数组，如果没有g，其结果基本和 exec 是一致的，还有就是对 lastIndex 无效<br>如果有 g， 则返回所有的匹配项</li>\n<li>String.prototype.search()<br>找到就返回位置，找不到就返回 -1</li>\n<li>String.prototype.replace()<br>接受两个参数，第一个是正则表达式，第二个是替换的内容，也可以是一个函数<br>最主要的应用就是修饰符 g 如果有则全部替换</li>\n<li>String.prototype.split()<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 非正则分隔</span><br><span class=\"line\">&#x27;a,  b,c, d&#x27;.split(&#x27;,&#x27;)</span><br><span class=\"line\">// [ &#x27;a&#x27;, &#x27;  b&#x27;, &#x27;c&#x27;, &#x27; d&#x27; ]</span><br><span class=\"line\"></span><br><span class=\"line\">// 正则分隔，去除多余的空格</span><br><span class=\"line\">&#x27;a,  b,c, d&#x27;.split(/, */)</span><br><span class=\"line\">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27; ]</span><br><span class=\"line\"></span><br><span class=\"line\">// 指定返回数组的最大成员</span><br><span class=\"line\">&#x27;a,  b,c, d&#x27;.split(/, */, 2)</span><br><span class=\"line\">[ &#x27;a&#x27;, &#x27;b&#x27; ]</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["js"],"tags":["js","标准库"]},{"title":"js设计模式之观察者模式","url":"/blog-next/2020/06/22/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/","content":"<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>一个典型的观察者模式应用场景是用户在一个网站订阅主题</p>\n<ol>\n<li>多个用户（观察者 observer）都可以订阅某个主题</li>\n<li>当主题内容更新时订阅该主题的用户都能收到通知</li>\n</ol>\n<p>以下是代码实现</p>\n<p>Subject 是构造函数， new Subject 创建一个主题对象，该对象内部维护订阅当前主题的观察者数组，主题对象上有一些方法，<br>如添加观察者（addObserver）,删除观察者（removeObserver）,通知观察者更新（notify），当 notify 时实际上调用全部观察者 observer 自身的 update 方法</p>\n<p>Observer 上构造函数，new Observer 创建一个观察者对象，该对象有一个 update 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.observers = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">addObserver</span>(<span class=\"params\">observer</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.observers.push(observer)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">addObserver</span>(<span class=\"params\">observer</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"built_in\">this</span>.observers.indexOf(observer)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.observers.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">notify</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.observers.forEach(<span class=\"function\"><span class=\"params\">observer</span> =&gt;</span> observer.update())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">udpate</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject = <span class=\"keyword\">new</span> Subject()</span><br><span class=\"line\"><span class=\"keyword\">let</span> observer1 = <span class=\"keyword\">new</span> Observer()</span><br><span class=\"line\">observer1.update = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observer1 update&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">subject.addObserver(observer1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> observer2 = <span class=\"keyword\">new</span> Observer(<span class=\"string\">&#x27;valley&#x27;</span>)</span><br><span class=\"line\">observer2.update = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observer2 update&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">subject.addObserver(observer2)</span><br><span class=\"line\"></span><br><span class=\"line\">subject.notify()</span><br></pre></td></tr></table></figure>\n\n<p>上面这段代码中，主题被观察者订阅的写法是 subject.addObserver(observer), 不是很直观，给观察者增加订阅方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">udpate</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">subscribeTo</span>(<span class=\"params\">subject</span>)</span> &#123;</span><br><span class=\"line\">    subject.addObserver(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> subject = <span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"keyword\">new</span> Observer();</span><br><span class=\"line\">observer.update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;observer update&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">observer.subscribeTo(subject); <span class=\"comment\">//观察者订阅主题</span></span><br><span class=\"line\"></span><br><span class=\"line\">subject.notify();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简化版（发布订阅）\"><a href=\"#简化版（发布订阅）\" class=\"headerlink\" title=\"简化版（发布订阅）\"></a>简化版（发布订阅）</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> eventManager = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> eventList = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">on</span>(<span class=\"params\">event, handler</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!eventList[event]) &#123;</span><br><span class=\"line\">      eventList[event] = [handler];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      eventList[event].push(handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">off</span>(<span class=\"params\">event, handler</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(eventList[event]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!handler) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> eventList[event]</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = eventList[event].indexOf(handler)</span><br><span class=\"line\">        eventList[event].splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span>(<span class=\"params\">event, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (eventList[event]) &#123;</span><br><span class=\"line\">      eventList.forEach(<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> event(data))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    on,</span><br><span class=\"line\">    off,</span><br><span class=\"line\">    trigger,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">eventManager.on(<span class=\"string\">&#x27;say&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;hello&#x27;</span> + data)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">eventManager.trigger(<span class=\"string\">&#x27;say&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>)</span><br></pre></td></tr></table></figure>\n","categories":["js"],"tags":["code","设计模式"]},{"title":"new start","url":"/blog-next/2017/10/02/new-start/","content":""},{"title":"js错误处理机制","url":"/blog-next/2019/01/10/js%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/","content":"<h3 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h3><pre><code>var error = new Error(&#39;error&#39;)\nerror 有三个属性 error.name error.message error.stack\n参数 error 就是 message 属性\n</code></pre>\n<p>抛出 Error 之后，整个程序就中断在发生错误的地方，不再往下执行</p>\n<h3 id=\"六个派生对象\"><a href=\"#六个派生对象\" class=\"headerlink\" title=\"六个派生对象\"></a>六个派生对象</h3><p>这六个对象是在 Error 对象的基础上生成的，这个六个对象同时也是函数 他们的 prototype 指向 Error 对象</p>\n<pre><code>var err = new Error(&#39;xx&#39;)\nSyntaxError.prototype == Error &#123;&#125; // js这个命名有时候真是不懂\nError.prototype == 错误 &#123;&#125;\nerr.__proto__ == 错误 &#123;&#125;\n错误.__proto__ == Object.prototype\n</code></pre>\n<h4 id=\"SyntaxError\"><a href=\"#SyntaxError\" class=\"headerlink\" title=\"SyntaxError\"></a>SyntaxError</h4><pre><code>var 1a\n</code></pre>\n<h4 id=\"ReferenceError\"><a href=\"#ReferenceError\" class=\"headerlink\" title=\"ReferenceError\"></a>ReferenceError</h4><pre><code>unknownVariable\n</code></pre>\n<h4 id=\"RangeError\"><a href=\"#RangeError\" class=\"headerlink\" title=\"RangeError\"></a>RangeError</h4><pre><code>new Array(-1)\n</code></pre>\n<h4 id=\"TypeError\"><a href=\"#TypeError\" class=\"headerlink\" title=\"TypeError\"></a>TypeError</h4><pre><code>new 123\n</code></pre>\n<h4 id=\"URIError\"><a href=\"#URIError\" class=\"headerlink\" title=\"URIError\"></a>URIError</h4><pre><code>decodeURI(&#39;%2&#39;)\n</code></pre>\n<h4 id=\"EvalError\"><a href=\"#EvalError\" class=\"headerlink\" title=\"EvalError\"></a>EvalError</h4><h4 id=\"当然你可以自定义错误\"><a href=\"#当然你可以自定义错误\" class=\"headerlink\" title=\"当然你可以自定义错误\"></a>当然你可以自定义错误</h4><pre><code>function UserError(message) &#123;\n  this.message = message || &#39;默认信息&#39;;\n  this.name = &#39;UserError&#39;;\n&#125;\n\nUserError.prototype = new Error();\nUserError.prototype.constructor = UserError;\n</code></pre>\n<h3 id=\"相关语法\"><a href=\"#相关语法\" class=\"headerlink\" title=\"相关语法\"></a>相关语法</h3><h4 id=\"throw-语句\"><a href=\"#throw-语句\" class=\"headerlink\" title=\"throw 语句\"></a>throw 语句</h4><p>throw 抛出一个错误，中断程序的执行，可以抛出任何的值<br>    throw 123</p>\n<h4 id=\"try-catch-结构\"><a href=\"#try-catch-结构\" class=\"headerlink\" title=\"try-catch 结构\"></a>try-catch 结构</h4><p>因为发生错误会中断程序的执行，js 提供 try-catch 用来捕获错误，选择是否往下执行</p>\n<h4 id=\"finally-代码块\"><a href=\"#finally-代码块\" class=\"headerlink\" title=\"finally 代码块\"></a>finally 代码块</h4><p>不论发生错误与否，都会执行<br>如果 catch 中有 return 或者 throw 就会先执行 finally 中的代码，而且 return 不会阻止 finally 代码的执行<br>如果没有 catch 报错就会中断程序，但这之前会执行 finally 中的代码</p>\n","categories":["js"],"tags":["js","G","Error对象"]},{"title":"js运算符","url":"/blog-next/2019/02/14/js%E8%BF%90%E7%AE%97%E7%AC%A6/","content":"<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p><code>+ - * / ** % + - ++ -- </code></p>\n<h4 id=\"加法运算符\"><a href=\"#加法运算符\" class=\"headerlink\" title=\"加法运算符\"></a>加法运算符</h4><p>加法运算符存在重载，当左右两边有字符串的时候会变成连接运算符<br>除了加法运算符其他都会变成数字进行加减乘除</p>\n<p>如果运算子是对象，必须先转成原始类型的值，规则之前都总结过先 valueOf 后 toString<br>当然也有一个例外就是如果是 Date 类型的时候要优先 toString</p>\n<h4 id=\"余数运算符\"><a href=\"#余数运算符\" class=\"headerlink\" title=\"余数运算符\"></a>余数运算符</h4><p>负数取余可以用绝对值<br>浮点数不是精确的值，所以无法取到精确的结果</p>\n<h4 id=\"自增和自减运算符\"><a href=\"#自增和自减运算符\" class=\"headerlink\" title=\"自增和自减运算符\"></a>自增和自减运算符</h4><p>需要注意的是如果是放在变量之后，要先返回变量操作的值，再进行运算（？）</p>\n<h4 id=\"数值运算符和负数值运算符\"><a href=\"#数值运算符和负数值运算符\" class=\"headerlink\" title=\"数值运算符和负数值运算符\"></a>数值运算符和负数值运算符</h4><p>也是用 + 但是他是一元运算符（与 Number 函数的作用相同）</p>\n<h4 id=\"指数运算符\"><a href=\"#指数运算符\" class=\"headerlink\" title=\"指数运算符\"></a>指数运算符</h4><p><code>2**3**2</code> 和 <code>2**(3**2)</code> 是一样的</p>\n<h4 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h4><p>以 = 为基础的一系列运算符</p>\n<h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><p><code>&gt; &lt; &gt;= &lt;= == != === !==</code></p>\n<h4 id=\"非相等运算符比较字符串\"><a href=\"#非相等运算符比较字符串\" class=\"headerlink\" title=\"非相等运算符比较字符串\"></a>非相等运算符比较字符串</h4><p>比较 unicode 码点</p>\n<h4 id=\"非相等运算符比较非字符串\"><a href=\"#非相等运算符比较非字符串\" class=\"headerlink\" title=\"非相等运算符比较非字符串\"></a>非相等运算符比较非字符串</h4><p>原始类型的值转为 Number 比较，注意 NaN<br>对象的话要转为原始类型，再开始比较，先调用 valueOf 再调用 toString</p>\n<h4 id=\"严格相等运算符\"><a href=\"#严格相等运算符\" class=\"headerlink\" title=\"严格相等运算符\"></a>严格相等运算符</h4><p>必须是同一个值才返回 true<br>undefined 和 null 与任何值比较都是返回 false<br>但是 undefined === undefined null === null undefined == null</p>\n<h4 id=\"严格不相等运算符\"><a href=\"#严格不相等运算符\" class=\"headerlink\" title=\"严格不相等运算符\"></a>严格不相等运算符</h4><p>就是执行严格相等运算符之后取反</p>\n<h4 id=\"相等运算符\"><a href=\"#相等运算符\" class=\"headerlink\" title=\"相等运算符\"></a>相等运算符</h4><p>数字比较的时候是一样的，其余情况都会发生隐式转换<br>隐式转换的规则就比较多了，列举几个</p>\n<ul>\n<li>如果是原始类型就转换成数值进行比较</li>\n<li>如果是和对象进行比较就转换成原始值进行比较，和字符串比就转换成字符串，其余一般转换成数值<br>undefined null 和其他类型进行比较时，返回 false</li>\n</ul>\n<h4 id=\"不相等运算符\"><a href=\"#不相等运算符\" class=\"headerlink\" title=\"不相等运算符\"></a>不相等运算符</h4><p>相等取反</p>\n<h3 id=\"布尔运算符\"><a href=\"#布尔运算符\" class=\"headerlink\" title=\"布尔运算符\"></a>布尔运算符</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">! &amp;&amp; || ?:</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"取反运算符-！\"><a href=\"#取反运算符-！\" class=\"headerlink\" title=\"取反运算符 ！\"></a>取反运算符 ！</h4><p>除了六个 falsy 值 返回 true 其他都返回 false</p>\n<h4 id=\"且运算符-amp-amp\"><a href=\"#且运算符-amp-amp\" class=\"headerlink\" title=\"且运算符 &amp;&amp;\"></a>且运算符 &amp;&amp;</h4><p>a &amp;&amp; b &amp;&amp; c 返回第一个布尔值为 false 的值，如果其他都是 true 就返回最后一个值<br>aa &amp;&amp; fn()</p>\n<h4 id=\"或运算符\"><a href=\"#或运算符\" class=\"headerlink\" title=\"或运算符 ||\"></a>或运算符 ||</h4><p>a || b || c 返回第一个值为 true 的值，如果其他都是 false 返回最后一个值</p>\n<h4 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符 ?:\"></a>三元运算符 ?:</h4><p>如果第一个表达式是 true 就返回第二个表达式，否则就返回第三个表达式的值<br>和 if else 唯一的区别就是，if else 是语句没有返回值，三元表达式是有返回值的，需要返回值的时候就要用三元表达式</p>\n<h3 id=\"其他运算符\"><a href=\"#其他运算符\" class=\"headerlink\" title=\"其他运算符\"></a>其他运算符</h3><h4 id=\"void-运算符\"><a href=\"#void-运算符\" class=\"headerlink\" title=\"void 运算符\"></a>void 运算符</h4><p>void(0) 执行一个表达式，不返回任何值</p>\n<h4 id=\"逗号运算符\"><a href=\"#逗号运算符\" class=\"headerlink\" title=\"逗号运算符\"></a>逗号运算符</h4><p>执行第一个表达式，返回第二个值</p>\n","categories":["js"],"tags":["js","G"]},{"title":"node.js server","url":"/blog-next/2018/11/30/node-js-server/","content":"<h3 id=\"TCP-传输控制协议（Transmission-Control-Protocal）\"><a href=\"#TCP-传输控制协议（Transmission-Control-Protocal）\" class=\"headerlink\" title=\"TCP 传输控制协议（Transmission Control Protocal）\"></a>TCP 传输控制协议（Transmission Control Protocal）</h3><p>1 TCP 和 UDP 的区别是什么？<br>TCP 可靠、面向连接，相对 UDP 较慢，对应的协议有 HTTP FTP 等<br>UDP 不可靠、不面向连接，相对 TCP 较快，对应的协议有 DNS</p>\n<p>2 TCP 三次握手<br>TCP 采用 flag 确认收到信息，发送端首先发送一个带有 SYN（synchronize）标志的包给对方，服务端确认收到之后回传一个带有（SYN/ACK）标志的数据包以示传达确认信息，最后发送端再回传一个带有 ACK 的数据包代表握手结束。</p>\n<h3 id=\"IP-网络协议（Internet-Protocol）\"><a href=\"#IP-网络协议（Internet-Protocol）\" class=\"headerlink\" title=\"IP 网络协议（Internet Protocol）\"></a>IP 网络协议（Internet Protocol）</h3><p>IP 协议位于网络层，基本分为内网 IP 和 外网 IP，需要通过路由器连接</p>\n<h3 id=\"端口-PORT\"><a href=\"#端口-PORT\" class=\"headerlink\" title=\"端口 PORT\"></a>端口 PORT</h3><p>访问一个设备需要制定 IP 和端口<br>一般一个端口对应一个服务<br>比如 http -&gt; 80 https -&gt;443 ftp -&gt; 21<br>每个机器有 65535（2^16-1） 个端口，0-1023（2^10-1） 需要管理员权限才能使用</p>\n<h3 id=\"Node-js-启动一个服务器\"><a href=\"#Node-js-启动一个服务器\" class=\"headerlink\" title=\"Node.js 启动一个服务器\"></a>Node.js 启动一个服务器</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9ub2RlLXNlcnZlci1kZW1vL2Jsb2IvbWFzdGVyL3NlcnZlci5qcw==\">node.js 简易 server<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var http = require(&#x27;http&#x27;)</span><br><span class=\"line\">var fs = require(&#x27;fs&#x27;)</span><br><span class=\"line\">var url = require(&#x27;url&#x27;)</span><br><span class=\"line\">var port = process.argv[2]</span><br><span class=\"line\"></span><br><span class=\"line\">if (!port) &#123;</span><br><span class=\"line\">  console.log(&#x27;请指定端口号？\\nnode server.js 端口号&#x27;)</span><br><span class=\"line\">  process.exit(1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var server = http.createServer(function(request, response) &#123;</span><br><span class=\"line\">  var parsedUrl = url.parse(request.url, true)</span><br><span class=\"line\">  var pathWithQuery = request.url</span><br><span class=\"line\">  var queryString = &#x27;&#x27;</span><br><span class=\"line\">  if (pathWithQuery.indexOf(&#x27;?&#x27;) &gt;= 0) &#123;</span><br><span class=\"line\">    queryString = pathWithQuery.substring(pathWithQuery.indexOf(&#x27;?&#x27;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var path = parsedUrl.pathname</span><br><span class=\"line\">  var query = parsedUrl.query</span><br><span class=\"line\">  var method = request.method</span><br><span class=\"line\"></span><br><span class=\"line\">  console.log(&#x27;含查询字符串的路径\\n&#x27; + pathWithQuery)</span><br><span class=\"line\"></span><br><span class=\"line\">  if (path === &#x27;/&#x27;) &#123;</span><br><span class=\"line\">    response.statusCode = 200</span><br><span class=\"line\">    response.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html;charset=utf-8&#x27;)</span><br><span class=\"line\">    response.write(</span><br><span class=\"line\">      &#x27;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;./style&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;script src=&quot;./main.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125; else if (path === &#x27;/style&#x27;) &#123;</span><br><span class=\"line\">    response.setHeader(&#x27;Content-Type&#x27;, &#x27;text/css;charset=utf-8&#x27;)</span><br><span class=\"line\">    response.write(&#x27;* &#123;color: #a37654;&#125;&#x27;)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125; else if (path === &#x27;/main.js&#x27;) &#123;</span><br><span class=\"line\">    response.setHeader(&#x27;Content-Type&#x27;, &#x27;text/javascript;charset=utf-8&#x27;)</span><br><span class=\"line\">    response.write(&#x27;alert(&quot;test&quot;)&#x27;)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    response.statusCode = 404</span><br><span class=\"line\">    response.setHeader(&#x27;Content-Type&#x27;, &#x27;text/html;charset=utf-8&#x27;)</span><br><span class=\"line\">    response.write(&#x27;Not Found&#x27;)</span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port)</span><br><span class=\"line\">console.log(&#x27;监听 &#x27; + port + &#x27; 成功\\n http://localhost:&#x27; + port)</span><br></pre></td></tr></table></figure>\n","categories":["js"],"tags":["G","HTTP","node"]},{"title":"nuxt 开发官网","url":"/blog-next/2019/05/23/nuxt-%E5%BC%80%E5%8F%91%E5%AE%98%E7%BD%91/","content":"<!-- 1. 刷文档 -->\n\n<h3 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h3><p>nuxt 不会扩展 components 下面的组件，意味着组件没有 asyncData 的方法特性</p>\n<p>layouts 的目录名字不能修改</p>\n<p>middleware 中间件允许自定义一个函数运行在一个页面或者一组页面渲染之前</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">export default function (context) &#123;</span><br><span class=\"line\">  context.userAgent = process.server ? context.req.headers[&#x27;user-agent&#x27;] : navigator.userAgent</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>pages 目录不可更改，nuxt 框架读取该目录下的所有 .vue 文件并自动生成路由配置文件<br>下面这张图就是 pages 最关键的一些属性 <img src=\"https://i.loli.net/2019/05/23/5ce6329c82dd231257.jpg\" alt=\"1558590067(1).jpg\" loading=\"lazy\"></p>\n<p>plugins 目录用于组织那些需要在 根 vue 实例化之前运行的 js 插件(有个疑问就是现在的项目没有使用 es6 编译的插件，这个先 mark 一下)</p>\n<p>static 下的文件直接映射到根目录下，不会用 webpack 进行编译</p>\n<p>nuxt.config.js 用于覆盖默认的配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">## babel 配置</span><br><span class=\"line\">默认为 @nuxt/babel-preset-app 在client构建中是ie：&#x27;9&#x27;，在server构建中是node:&#x27;current&#x27;。</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  babelrc: false,</span><br><span class=\"line\">  cacheDirectory: undefined,</span><br><span class=\"line\">  presets: [&#x27;@nuxt/babel-preset-app&#x27;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>... 配置有点多</p>\n<h3 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h3><p>其实项目都是vue，而且静态居多，好像没有什么特别有印象的问题</p>\n<p>其实最主要就是 nuxt.config.js, 有很多功能可以直接在这里实现</p>\n<p>最后上线的时候遇到了一个问题，有利于搜索引擎抓取的路径地图配置文件</p>\n<p>是一个 sitemap 的 xml 文件，以前没接触过，这个文件直接用抓取工具生成就可以</p>\n<p>还需要一个 robots.txt 文件制定 sitemap 的路径</p>\n<p>这两个文件都需要放到 static 下面，这样最后打包的时候会直接生成文件在项目的根目录下面</p>\n","categories":["总结"],"tags":["项目总结"]},{"title":"React生命周期","url":"/blog-next/2019/07/28/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","content":"<h3 id=\"react-生命周期\"><a href=\"#react-生命周期\" class=\"headerlink\" title=\"react 生命周期\"></a>react 生命周期</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RA11</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [x, setX] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [y, setY] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onclick = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    setX(x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleApp = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用来做销毁App</span></span><br><span class=\"line\">    setY(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onclick&#125;</span>&gt;</span>onclick<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleApp&#125;</span>&gt;</span>handleApp<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      &#123;y === 0 ? <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">x</span>=<span class=\"string\">&#123;x&#125;</span> /&gt;</span> : null&#125;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">params</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;创建 App&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123;</span><br><span class=\"line\">      <span class=\"attr\">n</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">handleClick</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`click-----------------------------<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">      <span class=\"attr\">n</span>: <span class=\"built_in\">this</span>.state.n + <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">testthis</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">updateApp</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">      <span class=\"attr\">n</span>: <span class=\"built_in\">this</span>.state.n + <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillMount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;将要挂载 App&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// update</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;渲染或者更新 App&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        &#123;this.state.n&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.handleClick()&#125;&gt;+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.updateApp()&#125;&gt;update+2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.testthis&#125;</span>&gt;</span>test this<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidMount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;挂载完毕 App&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">shouldComponentUpdate</span>(<span class=\"params\">newProps, newState</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组更新但是页面不更新</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newState.n % <span class=\"number\">3</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillUpdate</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;将要更新 App&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidUpdate</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;更新完成 App&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillReceiveProps</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;上级说话了 App&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.props);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentWillUnmount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;将要死亡 App&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">getDerivedStateFromError</span>(<span class=\"params\"></span>)</span> &#123; <span class=\"keyword\">return</span> &#123;&#125; &#125;<span class=\"comment\">// 会和 state 合并 </span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">componentDidCatch</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> RA11;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类比-vue-生命周期\"><a href=\"#类比-vue-生命周期\" class=\"headerlink\" title=\"类比 vue 生命周期\"></a>类比 vue 生命周期</h3><pre><code>- 类比\ncreated\nconstructor\n\nbeforeMount\ncomponentWillMount\n\nmounted\ncomponentDidMount\n\nbeforeUpdate\ncomponentWillUpdate\n\nupdated\ncomponentDidUpdated\n\nbeforeDestroy\ncomponentWillUnmount\n\n- 不同\nvue: props data computed watch （属性）\nreact: render shouldComponentUpdate componentWillReceiveProps （依然是钩子）\n</code></pre>\n<h3 id=\"代码仓库\"><a href=\"#代码仓库\" class=\"headerlink\" title=\"代码仓库\"></a>代码仓库</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9yZWFjdC1kZW1vLWFkdmFuY2UvYmxvYi9tYXN0ZXIvc3JjL3BhZ2VzL1JBMTEvaW5kZXguanN4\">react 生命周期<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["React"],"tags":["G","React"]},{"title":"nodejs基础","url":"/blog-next/2020/09/27/nodejs%E4%BB%8B%E7%BB%8D/","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Node.js 是一个 Javscript 运行环境(runtime)。它让 JavScript 可以开发后端程序，<br>它几乎能实现其他后端语言能实现的所有功能。</p>\n<p>Nodejs 是基于 Gogle V8 引擎，V8 引擎是 Gogle 发布的一款开源的 JavScript 引擎，<br>原来主要用于 Chrome 浏览器的 JS 解释部分，但是 Ryan Dahl 这哥们，鬼才般的，把这个 V8<br>引擎搬到了服务器上，用于做服务器的软件。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"nodejs-一些优势\"><a href=\"#nodejs-一些优势\" class=\"headerlink\" title=\"nodejs 一些优势\"></a>nodejs 一些优势</h2><ol>\n<li>Nodejs 用户量大</li>\n<li>Nodejs 是程序员必备技能</li>\n<li>Nodejs 最擅长高并发</li>\n<li>Nodejs 简单</li>\n<li>Nodejs 可实现的功能多：Nodejs 不仅可以像其他后端语言一样写动态网站、写接口，<br>还可以应用在云计算平台、游戏开发、区块链开发、即时通讯、跨平台 Ap 开发、桌面应用<br>开发（elctron）、云直播、物联网领域等</li>\n</ol>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p>一类是 Node 提供的模块，称为核心模块，另一类是用户编写的模块，称为文件模块</p>\n<p>遵照 commonJS 规范, module.exports 导出默认对象，exports.xx 导出对象 {xx}</p>\n<p>nodejs 的第三方模块由包组成，用包来管理有依赖关系的一些模块</p>\n<p>包目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">package.json :包描述文件。</span><br><span class=\"line\">bin :用于存放可执行二进制文件的目录。</span><br><span class=\"line\">lib :用于存放 JavScript 代码的目录。</span><br><span class=\"line\">doc :用于存放文档的目录。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>http</li>\n<li>url</li>\n</ul>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li>dependence</li>\n</ul>\n","categories":["nodejs"],"tags":["js","node"]},{"title":"relayout和repaint","url":"/blog-next/2020/04/03/relayout%E5%92%8Crepaint/","content":"<h2 id=\"浏览器和渲染树\"><a href=\"#浏览器和渲染树\" class=\"headerlink\" title=\"浏览器和渲染树\"></a>浏览器和渲染树</h2><p>在页面的生命周期中，一些效果的交互都有可能发生重排（Layout）和重绘（Painting），这些都会使我们付出高额的性能代价。 浏览器从下载文件至本地到显示页面是个复杂的过程，这里包含了重绘和重排。通常来说，渲染引擎会解析 HTML 文档来构建 DOM 树，与此同时，渲染引擎也会用 CSS 解析器解析 CSS 文档构建 CSSOM 树。接下来，DOM 树和 CSSOM 树关联起来构成渲染树（RenderTree），这一过程称为 Attachment。然后浏览器按照渲染树进行布局（Layout），最后一步通过绘制显示出整个页面。</p>\n<p><img src=\"https://i.loli.net/2020/04/03/AjnOINYaRJsrzdi.png\" alt=\"20200403173804.png\" loading=\"lazy\"></p>\n<p>其中重排和重绘是最耗时的部分，一旦触发重排，我们对 DOM 的修改引发了 DOM 几何元素的变化，渲染树需要重新计算， 而重绘只会改变 vidibility、outline、背景色等属性导致样式的变化，使浏览器需要根据新的属性进行绘制。更比而言，重排会产生比重绘更大的开销。所以，我们在实际生产中要严格注意减少重排的触发。</p>\n<h2 id=\"触发重排的操作主要是几何因素\"><a href=\"#触发重排的操作主要是几何因素\" class=\"headerlink\" title=\"触发重排的操作主要是几何因素\"></a>触发重排的操作主要是几何因素</h2><p>1.页面第一次渲染 在页面发生首次渲染的时候，所有组件都要进行首次布局，这是开销最大的一次重排。 2.浏览器窗口尺寸改变 3.元素位置和尺寸发生改变的时候 4.新增和删除可见元素 5.内容发生改变（文字数量或图片大小等等） 6.元素字体大小变化。 7.激活 CSS 伪类（例如：:hover）。 8.设置 style 属性 9.查询某些属性或调用某些方法。比如说：<code>offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft clientWidth、clientHeight</code></p>\n<p>除此之外，当我们调用 getComputedStyle 方法，或者 IE 里的 currentStyle 时，也会触发重排，原理是一样的，都为求一个“即时性”和“准确性”。</p>\n<h2 id=\"触发重绘的操作主要有\"><a href=\"#触发重绘的操作主要有\" class=\"headerlink\" title=\"触发重绘的操作主要有\"></a>触发重绘的操作主要有</h2><p>vidibility、outline、背景色等属性的改变<br>我们应当注意的是：重绘不一定导致重排，但重排一定会导致重绘。</p>\n<h2 id=\"那么我们可以采取哪些措施来避免或减少重排带来的巨大开销呢？\"><a href=\"#那么我们可以采取哪些措施来避免或减少重排带来的巨大开销呢？\" class=\"headerlink\" title=\"那么我们可以采取哪些措施来避免或减少重排带来的巨大开销呢？\"></a>那么我们可以采取哪些措施来避免或减少重排带来的巨大开销呢？</h2><h3 id=\"分离读写操作\"><a href=\"#分离读写操作\" class=\"headerlink\" title=\"分离读写操作\"></a>分离读写操作</h3><pre><code>div.style.top = &quot;10px&quot;;\ndiv.style.bottom = &quot;10px&quot;;\ndiv.style.right = &quot;10px&quot;;\ndiv.style.left = &quot;10px&quot;;\nconsole.log(div.offsetWidth);\nconsole.log(div.offseHeight);\nconsole.log(div.offsetRight);\nconsole.log(div.offsetLeft);\n</code></pre>\n<h3 id=\"样式集中改变\"><a href=\"#样式集中改变\" class=\"headerlink\" title=\"样式集中改变\"></a>样式集中改变</h3><p>通过 cssText 和 class 进行样式的集中改变（现代浏览器会有 flush 队列优化，会好很多）</p>\n<h3 id=\"缓存布局信息\"><a href=\"#缓存布局信息\" class=\"headerlink\" title=\"缓存布局信息\"></a>缓存布局信息</h3><pre><code>// bad 强制刷新 触发两次重排\ndiv.style.left = div.offsetLeft + 1 + &#39;px&#39;;\ndiv.style.top = div.offsetTop + 1 + &#39;px&#39;;\n\n// good 缓存布局信息 相当于读写分离\nvar curLeft = div.offsetLeft;\nvar curTop = div.offsetTop;\ndiv.style.left = curLeft + 1 + &#39;px&#39;;\ndiv.style.top = curTop + 1 + &#39;px&#39;;\n</code></pre>\n<h3 id=\"将-dom-离线\"><a href=\"#将-dom-离线\" class=\"headerlink\" title=\"将 dom 离线\"></a>将 dom 离线</h3><p>设置 display:none,元素不会存在于渲染树中，相当于将其从页面拿掉，我们之后的操作将不会触发 repaint 和 relayout</p>\n<ul>\n<li><p>通过使用 DocumentFragment 创建一个 dom 碎片,在它上面批量操作 dom，操作完成之后，再添加到文档中，这样只会触发一次重排。</p>\n</li>\n<li><p>复制节点，在副本上工作，然后替换它！</p>\n</li>\n</ul>\n<h3 id=\"将-position-属性设置为-absolute-或-fixed\"><a href=\"#将-position-属性设置为-absolute-或-fixed\" class=\"headerlink\" title=\"将 position 属性设置为 absolute 或 fixed\"></a>将 position 属性设置为 absolute 或 fixed</h3><p>position 属性为 absolute 或 fixed 的元素，重排开销比较小，不用考虑它对其他元素的影响</p>\n<h3 id=\"优化动画\"><a href=\"#优化动画\" class=\"headerlink\" title=\"优化动画\"></a>优化动画</h3><ul>\n<li>可以把动画应用到定位的元素上</li>\n<li>启用 GPU 加速</li>\n</ul>\n","categories":["css"],"tags":["css","C"]},{"title":"require和import","url":"/blog-next/2020/04/06/require%E5%92%8Cimport/","content":"<h2 id=\"require\"><a href=\"#require\" class=\"headerlink\" title=\"require\"></a>require</h2><p>特点：</p>\n<ul>\n<li>运行时加载</li>\n<li>拷贝到本页面</li>\n<li>全部引入</li>\n</ul>\n<h3 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h3><p>Node.js 就是 CommonJS 思想，在 CommonJS 中有一个全局性方法 require() 用于加载模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;math&#x27;</span>)</span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>模块写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">模块写法分<span class=\"built_in\">exports</span>和<span class=\"built_in\">module</span>.exports。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.add = <span class=\"function\">(<span class=\"params\">x,y</span>) =&gt;</span> x+y;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">math</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">x,y</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  x+y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;<span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### AMD</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">require.js cujo.js 就是 AMD 思想</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">&#x27;math&#x27;</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">math</span>) </span>&#123;</span><br><span class=\"line\">  math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>模块写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(id?, dependencies?, factory)</span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; add &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p>sea.js 就是 CMD 思想，类似于 require.js 但 seajs 是依赖就近，延迟执行，requirejs 是依赖前置，提前执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">seajs.config(&#123;</span><br><span class=\"line\">  <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">jquery</span>: <span class=\"string\">&#x27;http://modules.seajs.org/jquery/3/jquery.js&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">seajs.use([<span class=\"string\">&#x27;./hello&#x27;</span>, <span class=\"string\">&#x27;jquery&#x27;</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">hello, $</span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#beautiful-sea&#x27;</span>).click(hello.sayHello)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>模块写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>, <span class=\"built_in\">exports</span>, <span class=\"built_in\">module</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;jquery&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">exports</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;#hello&#x27;</span>).toggle(<span class=\"string\">&#x27;slow&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\">  b.doSomething() <span class=\"comment\">// 依赖就近，延迟执行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h2><p>特点：</p>\n<ul>\n<li>编译时加载</li>\n<li>只引用定义</li>\n<li>按需加载</li>\n</ul>\n<p><strong>对比发现 import 完胜 require，推荐用 import 取代 require</strong></p>\n<p>有两种用法 import 某块 和 import()</p>\n<p>import() 返回一个 promise 对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (x === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> MyModual <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myModual&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">所以引入了动态<span class=\"keyword\">import</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (x === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;myModual&#x27;</span>).then(<span class=\"function\"><span class=\"params\">MyModual</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MyModual()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["js"],"tags":["js","js模块化"]},{"title":"this关键字","url":"/blog-next/2019/02/14/this%E5%85%B3%E9%94%AE%E5%AD%97/","content":"<h3 id=\"this关键字\"><a href=\"#this关键字\" class=\"headerlink\" title=\"this关键字\"></a>this关键字</h3><p>总是返回一个对象，表示当前属性和方法所在的对象</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ul>\n<li>全局使用，this 就是代表顶层对象 window</li>\n<li>构造函数中使用就代表是实例对象</li>\n<li>对象的方法就是指这个对象</li>\n</ul>\n<p><strong>如果this所在的方法不在对象的第一层，这时this只是指向当前一层的对象，而不会继承更上面的层。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a = &#123;</span><br><span class=\"line\">  p: &#x27;Hello&#x27;,</span><br><span class=\"line\">  b: &#123;</span><br><span class=\"line\">    m: function() &#123;</span><br><span class=\"line\">      console.log(this.p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a.b.m() // undefined</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用注意点\"><a href=\"#使用注意点\" class=\"headerlink\" title=\"使用注意点\"></a>使用注意点</h3><h4 id=\"避免多层-this\"><a href=\"#避免多层-this\" class=\"headerlink\" title=\"避免多层 this\"></a>避免多层 this</h4><p>解决方法就是保存this对象</p>\n<h4 id=\"避免数组处理方法中的-this\"><a href=\"#避免数组处理方法中的-this\" class=\"headerlink\" title=\"避免数组处理方法中的 this\"></a>避免数组处理方法中的 this</h4><p>比如 map 和 forEach 方法<br>解决方法就是 js 提供了第二个参数可以用来绑定 this</p>\n<h4 id=\"避免回调函数中的-this\"><a href=\"#避免回调函数中的-this\" class=\"headerlink\" title=\"避免回调函数中的 this\"></a>避免回调函数中的 this</h4><h3 id=\"绑定-this-的方法\"><a href=\"#绑定-this-的方法\" class=\"headerlink\" title=\"绑定 this 的方法\"></a>绑定 this 的方法</h3><p>Function.prototype.call(obj, param)<br>如果传入的对象是空 null undefined, 则默认传入全局对象</p>\n<p>Function.prototype.apply()<br>几个应用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a = [10, 2, 4, 15, 9];  // 求数组最大值</span><br><span class=\"line\">Math.max.apply(null, a) // 15</span><br><span class=\"line\"></span><br><span class=\"line\">Array.apply(null, [&#x27;a&#x27;, ,&#x27;b&#x27;]) // 空位置格式化为 undefined</span><br><span class=\"line\"></span><br><span class=\"line\">Array.prototype.slice.apply(&#123;0: 1, length: 1&#125;) // 转换类数组对象</span><br></pre></td></tr></table></figure>\n\n<p>Function.prototype.bind()<br>每一次返回一个函数</p>\n","categories":["js"],"tags":["js","G","oop"]},{"title":"VS Code 插件管理","url":"/blog-next/2018/12/25/vscode-extensions/","content":"<h3 id=\"vscode-extensions\"><a href=\"#vscode-extensions\" class=\"headerlink\" title=\"vscode extensions\"></a>vscode extensions</h3><p><strong>持续更新中...</strong></p>\n<p>在项目的 .vscode 文件夹下，创建一个文件 extension.json, 你只需提供一个 key， recommendations, 在这个数据中把所有的插件的 ID 放进去，当别人打开这个项目的时候，如果没有安装这些插件，vscode 就会提示</p>\n<p>当然你可以直接安装到你的编辑器当中</p>\n<p>下面我分享一下我自己的插件</p>\n<pre><code>&#123;\n  &quot;extensions&quot;: &#123;\n    &quot;recommendations&quot;: [\n      &quot;atom one dark theme&quot;, // theme\n      &quot;atom one light theme&quot;,\n      &quot;auto close tag&quot;, // Automatically add HTML/XML close tag\n      &quot;auto rename tag&quot;, // 和上面这个差不多，很好理解\n      &quot;autoprefixer&quot;, // 手写 css 这个东西可以解决几乎所有的兼容问题\n      &quot;bookmarks&quot;, // 书签\n      &quot;barcket pair colorizer&quot;, // \b花括号有颜色 也有人用 Rainbow Brackets，\b这个可能是新写的，用的人还比较少\n      &quot;chinese&quot;, // 这个不用说\n      &quot;code Runner&quot;, // \b目前 \brun js\n      &quot;debugger for chrome&quot;, // \b说实话没怎么用过\n      &quot;document this&quot;, // 自动函数 class 注释\n      &quot;eslint&quot;,\n      &quot;RemoteHub&quot;, // 在 vscode 中直接看到 github 文件的改动\n      &quot;github pull requests&quot;, // git 管理器中 pull request\n      &quot;gitlens&quot;, // vscode 中的 sourcetree\n      &quot;import cost&quot;, // \b\b显示引入包的大小\n      &quot;es6 code snippets&quot;, // 暂时\b先留着吧，提示不好的时候最好去掉\n      &quot;lodash&quot;, // lodash snippets\n      &quot;miniapp&quot;, // 小程序原生的 snippets\n      &quot;npm Intellisense&quot;, // \b提示 npm 包\n      &quot;open in browser&quot;,\n      &quot;openChrome&quot;, // 这两个还是比较常用\n      &quot;path Intallisense&quot;, // 这个是相当好用的\n      &quot;perttier&quot;, // 目前在用的 code formatter\n      &quot;REST Client&quot;, // 直接发 http 请求  还在研究。。。\n      &quot;sass&quot;,\n      &quot;scss IntelliSense&quot;, // \b我写 c 版本的 sass\n      &quot;setting sync&quot;, // 同步 vscode \b设置到 github （有密码的要注意保密）\n      &quot;svn&quot;, // 为了工作，但是也没有怎么用，还是下了 smartSVN\n      &quot;typescript hero&quot;, // Additional toolings for typescript\n      &quot;vetur&quot;, // Vue tooling for VS Code\n      &quot;vscode-random&quot;, // Generates random data directly into VS Code (命令面板执行 random)\n      &quot;vscode-pigment&quot; // Previews colors used inside the editor\n    ]\n  &#125;\n&#125;\n</code></pre>\n","categories":["工具"],"tags":["vscode","compiler"]},{"title":"vNode最简单的实现","url":"/blog-next/2019/03/31/vNode%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%9E%E7%8E%B0/","content":"<p>vNode 基本原理</p>\n<ol>\n<li>用 json 表示 dom 树</li>\n<li>计算数据的差异，生成虚拟 dom</li>\n<li>给 dom 打补丁，渲染 dom 树</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @author GerritV</span><br><span class=\"line\"> * @description 虚拟 DOM Demo</span><br><span class=\"line\"> * @todo 暂时不考虑复杂情况</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\"> class VNode &#123;</span><br><span class=\"line\">   constructor(tag, children, text) &#123;</span><br><span class=\"line\">     this.tag = tag</span><br><span class=\"line\">     this.children = children</span><br><span class=\"line\">     this.text = text</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   render() &#123;</span><br><span class=\"line\">     if (this.tag === &#x27;#text&#x27;) &#123;</span><br><span class=\"line\">       return document.createTextNode(this.text)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     let el = document.createElement(this.tag)</span><br><span class=\"line\">     this.children.forEach(item =&gt; &#123;</span><br><span class=\"line\">       el.appendChild(item.render())</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">     return el</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function v(tag, children, text) &#123;</span><br><span class=\"line\">  if (typeof children === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">    text = children</span><br><span class=\"line\">    children = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return new VNode(tag, children, text)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let vNodes = v(&#x27;div&#x27;, [</span><br><span class=\"line\">  v(&#x27;p&#x27;, [</span><br><span class=\"line\">    v(&#x27;span&#x27;, [v(&#x27;#text&#x27;, &#x27;baidu.com&#x27;)])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  ),</span><br><span class=\"line\">  v(&#x27;span&#x27;, [</span><br><span class=\"line\">    v(&#x27;#text&#x27;, &#x27;joyowo.com&#x27;)</span><br><span class=\"line\">  ])</span><br><span class=\"line\">]</span><br><span class=\"line\">)</span><br><span class=\"line\">console.log(vNodes.render())</span><br><span class=\"line\"></span><br><span class=\"line\">function patchElement(parent, newNode, oldNode, index=0) &#123;</span><br><span class=\"line\">  if (!oldNode) &#123;</span><br><span class=\"line\">    parent.appendChild(newNode.render())</span><br><span class=\"line\">  &#125; else if (!newNode) &#123;</span><br><span class=\"line\">    parent.removeChild(parent.childNodes[index])</span><br><span class=\"line\">  &#125; else if (newNode.tag !== oldNode.tag || newNode.text !== oldNode.text) &#123;</span><br><span class=\"line\">    parent.replaceChild(newNode.render(), parent.childNodes[index])</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    for (let i = 0; i &lt; newVNode.children.length || i &lt; oldVNode.children.length; i++) &#123;</span><br><span class=\"line\">      patchElement(parent.childNodes[index], newVNode.children[i], oldVNode.children[i], i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var vNodes1 = v(&#x27;div&#x27;,[], &#x27;hello,world&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">const root = document.querySelector(&#x27;#root&#x27;)</span><br><span class=\"line\">patchElement(root, vNodes1)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi92Tm9kZS90cmVlL21hc3Rlcg==\">git仓库<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["js"],"tags":["js","vNode"]},{"title":"vue-router野生笔记","url":"/blog-next/2019/03/31/vue-router%E9%87%8E%E7%94%9F%E7%AC%94%E8%AE%B0/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 1. 导航被触发</span><br><span class=\"line\"> * 2. 在失活的组件（即将离开的页面组件）里调用离开守卫 beforeRouteLeave</span><br><span class=\"line\"> * 3. 调用全局的前置守卫 beforeEach</span><br><span class=\"line\"> * 4. 在重用的组件里调用 beforeRouteUpdate</span><br><span class=\"line\"> * 5. 调用路由独享的守卫 beforeEnter</span><br><span class=\"line\"> * 6. 解析异步路由组件</span><br><span class=\"line\"> * 7. 在被激活的组件（即将进入的页面组件）里调用 beforeRouteEnter</span><br><span class=\"line\"> * 8. 调用全局的解析守卫 beforeResolve</span><br><span class=\"line\"> * 9. 导航被确认</span><br><span class=\"line\"> * 10. 调用全局的后置守卫 afterEach</span><br><span class=\"line\"> * 11. 触发DOM更新</span><br><span class=\"line\"> * 12. 用创建好的实例调用beforeRouterEnter守卫里传给next的回调函数</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2019/03/31/5ca0c3b0c9e8c.jpeg\" alt=\"vue-router2.jpeg\" loading=\"lazy\"><br><img src=\"https://i.loli.net/2019/03/31/5ca0c3b0c7b92.jpeg\" alt=\"vue-router3.jpeg\" loading=\"lazy\"></p>\n","categories":["vue"],"tags":["vue","vue-router"]},{"title":"web性能优化（一）","url":"/blog-next/2019/04/23/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><p>chrome 会等 css 全部下载完毕才会渲染，所以 css 有可能阻塞页面，尽量写到前面<br>chrome 可以并行下载 8 个 css，解析只能挨个解析</p>\n<h3 id=\"DNS-查询\"><a href=\"#DNS-查询\" class=\"headerlink\" title=\"DNS 查询\"></a>DNS 查询</h3><p>减少 DNS 查询，比如所有资源放到同一个域名下</p>\n<h3 id=\"TCP-连接\"><a href=\"#TCP-连接\" class=\"headerlink\" title=\"TCP 连接\"></a>TCP 连接</h3><p>TCP 连接复用，<code>connection: keep-alive</code><br>HTTP 2.0 开启多路复用</p>\n<h3 id=\"HTTP-请求\"><a href=\"#HTTP-请求\" class=\"headerlink\" title=\"HTTP 请求\"></a>HTTP 请求</h3><p>减少 cookie （大小）<br>增加 cache-control （去掉请求）<br>增加域名 （同时发送多个请求，比如把静态资源放到 CDN）</p>\n<h3 id=\"接受响应\"><a href=\"#接受响应\" class=\"headerlink\" title=\"接受响应\"></a>接受响应</h3><p>ETag 304 （Etag是file的md5值，if-none-match能匹配就传输的内容很少，很快）<br>Gzip <code>Content-Encoding</code> （开启压缩）</p>\n<h3 id=\"接受完成\"><a href=\"#接受完成\" class=\"headerlink\" title=\"接受完成\"></a>接受完成</h3><p>DOCTYPE 指定<br>HTML 压缩，尽量减少标签<br>js css iamge 压缩合并<br>js 放到 body 最后</p>\n","categories":["web 性能"],"tags":["G","性能优化"]},{"title":"【转】为什么一些生活中很外向开朗的人会喜欢独来独往","url":"/blog-next/2016/12/24/why-introversion-like-alone/","content":"<p id=\"div-border-left-purple\">因为他是一个内向的人。\n    不要怀疑，很多人都是这样。\n\n<pre><code>内向的人，通过独处来恢复精力。\n所以他们不是喜欢孤独，而是，孤独才是他们的常态。\n他们跟别人交流、相处，其实都是在消耗精力。\n</code></pre>\n</p>\n\n\n\n<p>下面详述：</p>\n<a id=\"more\"></a>\n\n<p>心理学上有一个模型，叫「五因素模型」，又叫「大五人格模型」。是目前公认比较全面的人格分析模型。<br>这个模型中，把人的性格用五个维度来区分。<br>分别是：</p>\n<p><span id=\"inline-red\">外向性（Extraversion）</span><br><span id=\"inline-yellow\">神经质（Neuroticism）</span><br><span id=\"inline-green\">亲和性（Agreeableness）</span><br><span id=\"inline-blue\">负责性（Conscientiousness）</span><br><span id=\"inline-purple\">经验开放性（Openness to experience）</span></p>\n<p>在「外向性」维度量表上，高得分者被认为是「外向」的，而低得分者则被认为「内向」。<br>这里的「外向」和「内向」是有一定描述的。</p>\n<p>外向：倾向于人际交往，热情、爱说话、充满自信、喜欢交友。在社交聚会中感到快乐。大都愿意与他人共处而不是独处。在其他人面前精力充沛，而在独处时变得平淡或感到无聊。更愿意与别人交谈而不是独自思考。等等。</p>\n<p>内向：倾向于安静的、低调的、深思熟虑的，很少参加社交活动。他们在独自的活动中感到快乐，比如阅读、写作、绘画、编程，等等。典型内向的人大都愿意独处而不是与他人共处。习惯在一个时间只专注于一件事情。更愿意独自思考而不是与别人交谈。等等。</p>\n<p>可以看到，区分「外向」和「内向」，最关键是，是看他是更愿意跟别人在一起，还是一个人独处。而不是开朗、活泼、健谈，这些。</p>\n<p>因为：内向的人在跟亲密朋友相处时，也能表现出如上特质。</p>\n<p>更深入地说，外向与内向的差异，主要在于下面三点：</p>\n<h5 id=\"经验的广度和深度\"><a href=\"#经验的广度和深度\" class=\"headerlink\" title=\"经验的广度和深度\"></a>经验的广度和深度</h5><p>外向的人倾向于广度。<br>他们喜欢了解很多事物，对很多领域都抱有热情，喜欢交很多朋友（但也许都不够知心），喜欢尝试不同的东西。对他们而言，生活就是积累尽可能广泛的经验。</p>\n<p>内向的人则倾向于拓展某一方面的深度。<br>他们同样会对许多领域和事物抱有兴趣，但与外向的人不同，他们大多不会浅尝辄止，而是会深入钻研下去。他们的朋友不多，多数人跟他们只是点头之交，但他们会对朋友交心。<br>对他们而言，太多的经验会造成压力。</p>\n<h5 id=\"对刺激的反应\"><a href=\"#对刺激的反应\" class=\"headerlink\" title=\"对刺激的反应\"></a>对刺激的反应</h5><p>外向的人喜欢体验各种不同的刺激，并对刺激有较高的适应值和较高的恢复水平。也就是说，他们乐于接受刺激，并且对刺激有较高的适应能力。</p>\n<p>内向的人内心活动水平较高，对他们而言，任何进入大脑的刺激，都会引起紧张水平的迅速升高（相对于外向的人），引起「刺激过多」的不舒服感受。</p>\n<h5 id=\"精力的来源-（这是重点）\"><a href=\"#精力的来源-（这是重点）\" class=\"headerlink\" title=\"精力的来源 （这是重点）\"></a>精力的来源 （这是重点）</h5><p>外向的人会从外部世界获得精力。<br>对他们而言，聚会、聊天、一起做事情，都是获得精力的方式。而当他们独处时，亦即切断了他们的精力来源，很快就会感到精力耗尽和无聊疲倦。</p>\n<p>内向的人，则是自己制造精力。<br>对他们而言，聚会、聊天、一起做事情，都是在花费他们的精力。他们只有在独处时，才能恢复精力。所以有些人跟别人在一起时很容易疲倦，自个儿待着反而神采奕奕，就是这样。</p>\n<p>但是，内向的人绝非都安静、低调、不善言谈，当他们精力充沛时，他可以跟你聊上几个小时，眉飞色舞。<br>同样，外向的人也绝非一定开朗活泼。当他精力耗尽时，同样会一蹶不振。</p>\n<p>关键只在于精力的水平，以及恢复精力的方式。</p>\n<p>这里给一张图，帮助大家理解：</p>\n<p><img src=\"http://p1.bpimg.com/567571/0351c7f1aa17b88b.jpg\" loading=\"lazy\"></p>\n<p>作者：Lachel<br>原文：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI0MzAzNjcw\">https://www.zhihu.com/question/24303670<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["综合"],"tags":["essay"]},{"title":"《深入理解ES6》读书笔记ES6中较小的改动","url":"/blog-next/2019/12/12/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0ES6%E4%B8%AD%E8%BE%83%E5%B0%8F%E7%9A%84%E6%94%B9%E5%8A%A8/","content":"<h3 id=\"使用整数\"><a href=\"#使用整数\" class=\"headerlink\" title=\"使用整数\"></a>使用整数</h3><h4 id=\"判断整数-Number-isInteger\"><a href=\"#判断整数-Number-isInteger\" class=\"headerlink\" title=\"判断整数 Number.isInteger\"></a>判断整数 Number.isInteger</h4><p>如果有些数字看起来像浮点数，却存储为整数，这会让 Number.isInteger 方法判断失效而返回 true<br>在 javascript 中，只给数字添加小数点不会让整数变为浮点数，此处的 25.0 确实是 25，所以会按照整数的形式存储</p>\n<h4 id=\"安全整数-Number-isSafeInteger\"><a href=\"#安全整数-Number-isSafeInteger\" class=\"headerlink\" title=\"安全整数 Number.isSafeInteger\"></a>安全整数 Number.isSafeInteger</h4><p>Number.isSafeInteger 方法来识别语言可以准确得表示的整数，添加了 Number.MAX_SAFE_INTEGER 和 Number.MIN_SAFE_INTEGER 分别表示整数范围的上限和下限。Number.isSafeInteger 方法用来确保一个值是整数，并且落在整数值的安全范围内</p>\n<h3 id=\"新的-Math-方法\"><a href=\"#新的-Math-方法\" class=\"headerlink\" title=\"新的 Math 方法\"></a>新的 Math 方法</h3><p>ES6 引入定型数组来增强游戏和图形体验，这可以让 js 引擎做更有效的数字计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Math.hypot 求平方和根</span><br><span class=\"line\">Math.sign 返回 1 -1 0</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"正式化-proto-属性\"><a href=\"#正式化-proto-属性\" class=\"headerlink\" title=\"正式化 proto 属性\"></a>正式化 <strong>proto</strong> 属性</h3><p>不是所有的 js 引擎 都实现了 <strong>proto</strong>, 所以 ES6 正式添加了这个特性，但有一段警告</p>\n<blockquote>\n<p>这些特性本属于 es 核心语言的一部分，在编写新的 es 代码时，程序员不应该使用这些特性和功能，也不应假定它们是存在的。除非在 web 浏览器中或者需要像 web 浏览器一样执行遗留的 es 代码，否则不鼓励</p>\n</blockquote>\n<p>所以更应该用 <code>Object.getPrototype()</code> 和 <code>Object.setPrototype()</code></p>\n<p>在 es6 引擎中 <code>Object.prototype.__proto__</code> 被定义为一个访问器属性，其 get 方法会调用 <code>Object.getPrototype</code>，set 方法会调用 <code>Object.setPrototype</code>, 因此和使用 <strong>proto</strong> 的区别就是可以直接设置对象字面量的原型。</p>\n","categories":["读书笔记"],"tags":["js，es6"]},{"title":"《深入理解ES6》读书笔记了解ES7","url":"/blog-next/2019/12/12/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%86%E8%A7%A3%20ES7/","content":"<h2 id=\"指数运算符\"><a href=\"#指数运算符\" class=\"headerlink\" title=\"指数运算符\"></a>指数运算符</h2><pre><code>let result = 5 ** 2\nconsol.log(result === Math.pow(5,2))\n</code></pre>\n<h3 id=\"运算顺序\"><a href=\"#运算顺序\" class=\"headerlink\" title=\"运算顺序\"></a>运算顺序</h3><pre><code>let result = 2 * 5 ** 2 // 50\n</code></pre>\n<h3 id=\"运算限制\"><a href=\"#运算限制\" class=\"headerlink\" title=\"运算限制\"></a>运算限制</h3><p>取幂运算符的左侧的一元表达式只能使用 ++ 或者 --</p>\n<pre><code>let result = -5 ** 2 // error\nlet result = -(5**2)\n</code></pre>\n<h2 id=\"Array-prototype-includes-方法\"><a href=\"#Array-prototype-includes-方法\" class=\"headerlink\" title=\"Array.prototype.includes() 方法\"></a>Array.prototype.includes() 方法</h2><p>第一个参数是要搜索的值，第二个参数是开始搜索的位置，返回 true 或者 false</p>\n<h3 id=\"值的比较\"><a href=\"#值的比较\" class=\"headerlink\" title=\"值的比较\"></a>值的比较</h3><pre><code>let values = [1, NaN, 2]\nconsole.log(values.indexOf(NaN)) // -1\nconsole.log(values.includes(NaN)) // true\n</code></pre>\n<p>如果你只想检查数组中是否存在某个不知道索引的值，由于给 includes() 方法和 indexOf() 方法传入 NaN 的差异，这里建议使用 includes() 方法，如果你想知道某个值在数组的哪个位置，则必须使用 indexOf() 方法</p>\n","categories":["读书笔记"],"tags":["js，es6"]},{"title":"《高程三》读书笔记第六章面向对象","url":"/blog-next/2019/12/16/%E3%80%8A%E9%AB%98%E7%A8%8B%E4%B8%89%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%85%AD%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","content":"<h2 id=\"理解对象\"><a href=\"#理解对象\" class=\"headerlink\" title=\"理解对象\"></a>理解对象</h2><h3 id=\"对象属性\"><a href=\"#对象属性\" class=\"headerlink\" title=\"对象属性\"></a>对象属性</h3><p>分为两种 数据属性和访问器属性</p>\n<p>数据属性有 [[configurable]] [[Enumerable]] [[Writeable]] [[Value]] 四个特性，value 也是数据的值</p>\n<p>访问器属性有 [[Configurable]] [[Enumberable]] [[Get]] [[Set]] 四个特性，一般情况下包括一对 getter 和 setter<br>访问器属性不能直接定义，必须使用 Object.defineProperty</p>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>抽象了创建具体对象的过程的函数</p>\n<p>工厂模式虽然解决了创建多个相似对象的问题，但没有解决对象识别的问题</p>\n<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><p>构造函数的问题就是每个方法都要在构造函数上重新实现一遍</p>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>让所有对象实例共享它所包含的属性和方法<br>主要问题就是共享的引用类型的数据会有问题</p>\n<h3 id=\"组合使用构造函数模式和原型模式（最大限度地节省内存）\"><a href=\"#组合使用构造函数模式和原型模式（最大限度地节省内存）\" class=\"headerlink\" title=\"组合使用构造函数模式和原型模式（最大限度地节省内存）\"></a>组合使用构造函数模式和原型模式（最大限度地节省内存）</h3><p>这是目前在 js 中使用最广泛、认同度最高的一种创建自定义类型的方法</p>\n<h3 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h3><p>在构造函数中动态创建原型</p>\n<h3 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a>寄生构造函数模式</h3><p>就是返回一个函数，这个函数创建一个新的对象，对象做增强<br>（比如我们想创建一个具有额外方法的特殊数组。由于不能直接修改 Array 构造函数）</p>\n<h3 id=\"稳妥构造函数模式\"><a href=\"#稳妥构造函数模式\" class=\"headerlink\" title=\"稳妥构造函数模式\"></a>稳妥构造函数模式</h3><p>禁止使用的时候可以用</p>\n<h2 id=\"继承对象\"><a href=\"#继承对象\" class=\"headerlink\" title=\"继承对象\"></a>继承对象</h2><p>一般有接口继承和实现继承，js 是实现继承</p>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>基本思想就是利用原型让一个引用类型继承另一个引用类型的属性和方法</p>\n<h3 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"借用构造函数\"></a>借用构造函数</h3><p>主要是为了分开实例属性和原型属性，原型属性要公用，实例属性却不能<br>可以在子构造函数中调用 超类的构造函数</p>\n<h3 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h3><p>组合继承避免了原型链和构造函数的缺陷，融合了他们的优点，称为了 JavaScript 中最常用的继承模式</p>\n<h3 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function object(o) &#123;</span><br><span class=\"line\">  function F() &#123;&#125;</span><br><span class=\"line\">  F.prototype = o</span><br><span class=\"line\">  return new F()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和 <code>Object.create()</code> 的功效是一样的<br>在没有必要兴师动众地创建构造函数，而只想让一个对象与另一个对象保持类似的情况下，原型式继承是完全可以胜任的</p>\n<h3 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h3><p>该函数在内部以某种方式来增强对象，最后再像真的是它做了所有工作一样返回对象（感觉就是在原来的对象的基础上修改 就是返回另一个对象）</p>\n<h3 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h3><p>解决组合继承调用两次的问题，感觉也。。无所谓的呀</p>\n","categories":["读书笔记"],"tags":["js","oop"]},{"title":"《重构》读书笔记","url":"/blog-next/2020/09/26/%E3%80%8A%E9%87%8D%E6%9E%84%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","content":"<h2 id=\"重构，第一个实例\"><a href=\"#重构，第一个实例\" class=\"headerlink\" title=\"重构，第一个实例\"></a>重构，第一个实例</h2><blockquote>\n<p>是需求的变化使重构变得必要。如果一段代码能正常工作，并且他不会再被修改，那么完全可以不去重构它。能改进之当然很好，但若没人需要去理解它，它就不会真正妨碍什么。如果确实有人需要理解它的工作原理，并且理解起来很费劲，那你就需要改进一下代码了。<br>要将我的理解转化到代码里，得先将这块代码抽取成一个独立的函数，按它所干的事情给它命名，每次想将一块代码抽取成一个函数时，我都会遵循一个标准流程，最大程度减少犯错的可能，这个流程命名为提炼函数。</p>\n</blockquote>\n<ul>\n<li>分解 statement 函数</li>\n<li>移除 play 临时变量，以查询取代</li>\n<li>提炼计算观众量积分的逻辑</li>\n<li>移除 format 变量 (将函数赋值为临时变量，改为一个明确的函数)</li>\n<li>移除观众量积分总和 (提炼函数和应用内联变量) -&gt; 这两部称为以查询取代临时变量？</li>\n<li>拆分计算阶段和格式化阶段</li>\n<li>分离为两个文件（两个阶段）</li>\n<li>按类型重组计算过程，使用多态计算器来提供数据</li>\n</ul>\n<h2 id=\"重构的原则\"><a href=\"#重构的原则\" class=\"headerlink\" title=\"重构的原则\"></a>重构的原则</h2><h3 id=\"何谓重构\"><a href=\"#何谓重构\" class=\"headerlink\" title=\"何谓重构\"></a>何谓重构</h3><p>使用一系列重构手法，在不改变软件可观察行为的前提下，调整其结构。它和性能优化不同，重构是为了让代码更容易理解，更易于修改，这可能使程序运行得更快，也可能使程序运行得更慢</p>\n<h3 id=\"两顶帽子\"><a href=\"#两顶帽子\" class=\"headerlink\" title=\"两顶帽子\"></a>两顶帽子</h3><p>两顶帽子指添加新功能和重构，软件开发过程中经常变换帽子，但是无论何时都清楚自己戴的哪一顶帽子，并且明白不同的帽子对编程状态提出的不同要求</p>\n<h3 id=\"为何重构\"><a href=\"#为何重构\" class=\"headerlink\" title=\"为何重构\"></a>为何重构</h3><ul>\n<li>重构改进软件的设计</li>\n<li>重构使软件更容易理解</li>\n<li>重构帮助找到 bug</li>\n<li>重构提高编程速度</li>\n</ul>\n<h3 id=\"何时重构\"><a href=\"#何时重构\" class=\"headerlink\" title=\"何时重构\"></a>何时重构</h3><p>第三次做类似的事情，你就应该重构</p>\n<ul>\n<li>预备性重构：让添加新功能更容易</li>\n<li>帮助理解的重构： 使代码更易懂</li>\n<li>捡垃圾式重构（先记下来）</li>\n<li>有计划重构和见机行事的重构</li>\n</ul>\n<h4 id=\"长期重构\"><a href=\"#长期重构\" class=\"headerlink\" title=\"长期重构\"></a>长期重构</h4><p>可以让整个团队达成共识，在未来几周时间里逐步解决这个问题，这经常是一个有效的策略</p>\n<h4 id=\"复审代码时重构\"><a href=\"#复审代码时重构\" class=\"headerlink\" title=\"复审代码时重构\"></a>复审代码时重构</h4><p>与原作者肩并肩坐在一起，一边浏览代码一边重构，体验是最佳的。这种工作方式很自然地导向结对编程：在编程的过程中持续不断地进行代码复审</p>\n<h4 id=\"怎么对经理说\"><a href=\"#怎么对经理说\" class=\"headerlink\" title=\"怎么对经理说\"></a>怎么对经理说</h4><p>不要告诉经理！</p>\n<h3 id=\"重构的挑战\"><a href=\"#重构的挑战\" class=\"headerlink\" title=\"重构的挑战\"></a>重构的挑战</h3><h4 id=\"延缓新功能开发\"><a href=\"#延缓新功能开发\" class=\"headerlink\" title=\"延缓新功能开发\"></a>延缓新功能开发</h4><p>重构的唯一目的就是让我们开发更快，用更少的<br>工作量创造更大的价值。</p>\n<p>有些人试图用“整洁的代码”“良好的工程实践”之类<br>道德理由来论证重构的必要性，我认为这是个陷阱。重构的<br>意义不在于把代码库打磨得闪闪发光，而是纯粹经济角度出<br>发的考量。我们之所以重构，因为它能让我们更快——添加<br>功能更快，修复 bug 更快。<br>一定要随时记住这一点，与别人<br>交流时也要不断强调这一点。重构应该总是由经济利益驱<br>动。程序员、经理和客户越理解这一点，<br>“好的设计”那条<br>曲线就会越经常出现。</p>\n<h4 id=\"代码所有权\"><a href=\"#代码所有权\" class=\"headerlink\" title=\"代码所有权\"></a>代码所有权</h4><h4 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h4><h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><h4 id=\"遗留代码\"><a href=\"#遗留代码\" class=\"headerlink\" title=\"遗留代码\"></a>遗留代码</h4><h3 id=\"重构、架构和-YAGNI\"><a href=\"#重构、架构和-YAGNI\" class=\"headerlink\" title=\"重构、架构和 YAGNI\"></a>重构、架构和 YAGNI</h3><h3 id=\"重构与软件开发过程\"><a href=\"#重构与软件开发过程\" class=\"headerlink\" title=\"重构与软件开发过程\"></a>重构与软件开发过程</h3><h3 id=\"重构与性能\"><a href=\"#重构与性能\" class=\"headerlink\" title=\"重构与性能\"></a>重构与性能</h3><h3 id=\"重构起源何处\"><a href=\"#重构起源何处\" class=\"headerlink\" title=\"重构起源何处\"></a>重构起源何处</h3><h3 id=\"自动化重构\"><a href=\"#自动化重构\" class=\"headerlink\" title=\"自动化重构\"></a>自动化重构</h3><p>IDE</p>\n<h2 id=\"代码的坏味道\"><a href=\"#代码的坏味道\" class=\"headerlink\" title=\"代码的坏味道\"></a>代码的坏味道</h2><blockquote>\n<p>你必须培养自己的判断力，学会判断一个类内有多少实例变量算是太大、一个函数内有多少行代码才算太长。</p>\n</blockquote>\n<h3 id=\"神秘命名-Mysterious-Name\"><a href=\"#神秘命名-Mysterious-Name\" class=\"headerlink\" title=\"神秘命名 Mysterious Name\"></a>神秘命名 Mysterious Name</h3><p>整洁代码最重要的一环就是好的名字</p>\n<p>为一个恼人的名字所付出的纠结，常常能推动我们对代码进行精简。</p>\n<h3 id=\"重复代码-Duplicated-Code\"><a href=\"#重复代码-Duplicated-Code\" class=\"headerlink\" title=\"重复代码 Duplicated Code\"></a>重复代码 Duplicated Code</h3><p>最单纯的重复代码就是“同一个类的两个函数含有相同的表达式”。这时候你需要做的就是采用提炼函数（106）提炼出重复的代码</p>\n<p>如果重复代码只是相似而不是完全相同，请首先尝试用移动语句（223）重组代码顺序，把相似的部分放在一起以便提炼。如果重复的代码段位于同一个超类的不同子类中，可以使用函数上移（350）来避免在两个子类之间互相调用。</p>\n<h3 id=\"过长函数-Long-Function\"><a href=\"#过长函数-Long-Function\" class=\"headerlink\" title=\"过长函数 Long Function\"></a>过长函数 Long Function</h3><p>你应该更积极地分解函数。我们遵循这样一条原则：每当感觉需要以注释来说明点什么的时候，我们就把需要说明的东西写进一个独立函数中，并以其用途（而非实现手法）命名。我们可以对一组甚至短短一行代码做这件事。关键不在于函数的长度，而在于函数“做什么”和“如何做”之间的语义距离。</p>\n<p>你可以经常运用以查询取代临时变量（178）来消除临时元素。引入参数对象（140）和保持对象完整（319）则可以将过长的参数列表变得更简洁一些。</p>\n<p>条件表达式和循环常常也是提炼的信号。</p>\n<h3 id=\"过长的参数列表-Long-Parameter-List\"><a href=\"#过长的参数列表-Long-Parameter-List\" class=\"headerlink\" title=\"过长的参数列表 Long Parameter List\"></a>过长的参数列表 Long Parameter List</h3><p>如果可以向某个参数发起查询而获得另一个参数的值，那么就可以使用以查询取代参数（324）<br>如果你发现自己正在从现有的数据结构中抽出很多数据项，就可以考虑使用保持对象完整（319）手法<br>如果有几项参数总是同时出现，可以用引入参数对象（140）将其合并成一个对象<br>如果某个参数被用作区分函数行为的标记（flag），可以使用移除标记参数（314）<br>使用类可以有效地缩短参数列表。如果多个函数有同样的几个参数，引入一个类就尤为有意义。你可以使用函数组<br>合成类（144），将这些共同的参数变成这个类的字段</p>\n<h3 id=\"全局数据-Global-Data\"><a href=\"#全局数据-Global-Data\" class=\"headerlink\" title=\"全局数据 Global Data\"></a>全局数据 Global Data</h3><h3 id=\"可变数据-Mutable-Data\"><a href=\"#可变数据-Mutable-Data\" class=\"headerlink\" title=\"可变数据 Mutable Data\"></a>可变数据 Mutable Data</h3><p>对数据的修改经常导致出乎意料的结果和难以发现的 bug。我在一处更新数据，却没有意识到软件中的另一处期望着完全不同的数据，于是一个功能失效了</p>\n<h3 id=\"发散式变化-Divergent-Change\"><a href=\"#发散式变化-Divergent-Change\" class=\"headerlink\" title=\"发散式变化 Divergent Change\"></a>发散式变化 Divergent Change</h3><p>如果某个模块经常因为不同的原因在不同的方向上发生变化，发散式变化就出现了</p>\n<h3 id=\"霰弹式修改-Shotgun-Surgery\"><a href=\"#霰弹式修改-Shotgun-Surgery\" class=\"headerlink\" title=\"霰弹式修改 Shotgun Surgery\"></a>霰弹式修改 Shotgun Surgery</h3><p>如果每遇到某种变化，你都必须在许多不同的类内做出许多小修改，你所面临的坏味道就是霰弹式修改</p>\n<h3 id=\"依赖情节-Feature-Envy\"><a href=\"#依赖情节-Feature-Envy\" class=\"headerlink\" title=\"依赖情节 Feature Envy\"></a>依赖情节 Feature Envy</h3><p>一个函数跟另一个模块中的函数或者数据交流格外频繁，远胜于在自己所处模块内部的交流，这就是依恋情结的典型情况</p>\n<h3 id=\"数据泥团-Data-Clumps\"><a href=\"#数据泥团-Data-Clumps\" class=\"headerlink\" title=\"数据泥团 Data Clumps\"></a>数据泥团 Data Clumps</h3><p>两个类中相同的字段、许多函数签名中相同的参数。这些总是绑在一起出现的数据真应该拥有属于它们自己的对象</p>\n<h3 id=\"基本类型偏执-Primitive-Obsession\"><a href=\"#基本类型偏执-Primitive-Obsession\" class=\"headerlink\" title=\"基本类型偏执 Primitive Obsession\"></a>基本类型偏执 Primitive Obsession</h3><p>很多程序员不愿意创建对自己的问题域有用的基本类型，如钱、坐标、范围等。于是，我们看到了把钱当作普通数字来计算的情况、计算物理量时无视单位（如把英寸与毫米相加）的情况以及大量类似 if (a &lt; upper<br>&amp;&amp; a &gt; lower)这样的代码</p>\n<h3 id=\"重复的-switch-Repeated-Switches\"><a href=\"#重复的-switch-Repeated-Switches\" class=\"headerlink\" title=\"重复的 switch Repeated Switches\"></a>重复的 switch Repeated Switches</h3><p>重复的 switch 的问题在于：每当你想增加一个选择分支时，必须找到所有的 switch，并逐一更新。多态给了我们对抗这种黑暗力量的武器，使我们得到更优雅的代码库</p>\n<h3 id=\"循环语句-Loops\"><a href=\"#循环语句-Loops\" class=\"headerlink\" title=\"循环语句 Loops\"></a>循环语句 Loops</h3><p>用以管道取代循环（231）来让这些老古董退休。我们发现，管道操作（如 filter 和 map）可以帮助我们更快地看清被处理的元素以及处理它们的动作</p>\n<h3 id=\"冗赘的元素-Lazy-Element\"><a href=\"#冗赘的元素-Lazy-Element\" class=\"headerlink\" title=\"冗赘的元素 Lazy Element\"></a>冗赘的元素 Lazy Element</h3><p>程序元素（如类和函数）能给代码增加结构，从而支持变化、促进复用或者哪怕只是提供更好的名字也好，但有时我们真的不需要这层额外的结构。可能有这样一个函数，它的名字就跟实现代码看起来一模一样；也可能有这样一个类，根本就是一个简单的函数。</p>\n<h3 id=\"夸夸其谈通用性-Speculative-Generality\"><a href=\"#夸夸其谈通用性-Speculative-Generality\" class=\"headerlink\" title=\"夸夸其谈通用性 Speculative Generality\"></a>夸夸其谈通用性 Speculative Generality</h3><p>当有人说“噢，我想我们总有一天需要做这事”，并因而企图以各式各样的钩子和特殊情况来处理一些非必要的事情，这种坏味道就出现了</p>\n<h3 id=\"临时字段-Temporary-Field\"><a href=\"#临时字段-Temporary-Field\" class=\"headerlink\" title=\"临时字段 Temporary Field\"></a>临时字段 Temporary Field</h3><p>有时你会看到这样的类：其内部某个字段仅为某种特定情况而设，这样的代码让人不易理解，因为你通常认为对象在所有时候都需要它的所有字段</p>\n<h3 id=\"过长的消息链-Message-Chains\"><a href=\"#过长的消息链-Message-Chains\" class=\"headerlink\" title=\"过长的消息链 Message Chains\"></a>过长的消息链 Message Chains</h3><p>如果你看到用户向一个对象请求另一个对象，然后再向后者请求另一个对象，然后再请求另一个对象……这就是消息链。</p>\n<h3 id=\"中间人-Middle-Man\"><a href=\"#中间人-Middle-Man\" class=\"headerlink\" title=\"中间人  Middle Man\"></a>中间人  Middle Man</h3><p>你也许会看到某个类的接口有一半的函数都委托给其他类，这样就是过度运用。这时应该使用移除中间人（192），直接和真正负责的对象打交道</p>\n<h3 id=\"内幕交易-Insider-trading\"><a href=\"#内幕交易-Insider-trading\" class=\"headerlink\" title=\"内幕交易 Insider trading\"></a>内幕交易 Insider trading</h3><p>软件开发者喜欢在模块之间建起高墙，极其反感在模块之间大量交换数据，因为这会增加模块间的耦合。在实际情况里，一定的数据交换不可避免，但我们必须尽量减少这种情况，并把这种交换都放到明面上来</p>\n<h3 id=\"过大的类-Large-Class\"><a href=\"#过大的类-Large-Class\" class=\"headerlink\" title=\"过大的类 Large Class\"></a>过大的类 Large Class</h3><p>如果想利用单个类做太多事情，其内往往就会出现太多字段。一旦如此，重复代码也就接踵而至了</p>\n<h3 id=\"异曲同工的类-Alternative-Class-with-Different-Interface\"><a href=\"#异曲同工的类-Alternative-Class-with-Different-Interface\" class=\"headerlink\" title=\"异曲同工的类 Alternative Class with Different Interface\"></a>异曲同工的类 Alternative Class with Different Interface</h3><p>使用类的好处之一就在于可以替换：今天用这个类，未来可以换成用另一个类</p>\n<h3 id=\"纯数据类-Data-Class\"><a href=\"#纯数据类-Data-Class\" class=\"headerlink\" title=\"纯数据类 Data Class\"></a>纯数据类 Data Class</h3><p>所谓纯数据类是指：它们拥有一些字段，以及用于访问（读写）这些字段的函数，除此之外一无长物。这样的类只是一种不会说话的数据容器，它们几乎一定被其他类过分细琐地操控着。这些类早期可能拥有public字段，若果真如此，你应该在别人注意到它们之前，立刻运用封装记录（162）将它们封装起来。对于那些不该被其他类修改的字段，请运用移除设值函数（331）</p>\n<p>纯数据类常常意味着行为被放在了错误的地方</p>\n<h3 id=\"被拒绝的遗赠-Refused-Bequest\"><a href=\"#被拒绝的遗赠-Refused-Bequest\" class=\"headerlink\" title=\"被拒绝的遗赠 Refused Bequest\"></a>被拒绝的遗赠 Refused Bequest</h3><p>子类应该继承超类的函数和数据。但如果它们不想或不需要继承，又该怎么办呢？</p>\n<p>按传统说法，这就意味着继承体系设计错误。你需要为这个子类新建一个兄弟类，再运用函数下移（359）和字段下移（361）把所有用不到的函数下推给那个兄弟</p>\n<h3 id=\"注释-Comments\"><a href=\"#注释-Comments\" class=\"headerlink\" title=\"注释 Comments\"></a>注释 Comments</h3><p>当你感觉需要撰写注释时，请先尝试重构，试着让所有注释都变得多余</p>\n<h2 id=\"构筑测试体系\"><a href=\"#构筑测试体系\" class=\"headerlink\" title=\"构筑测试体系\"></a>构筑测试体系</h2>","categories":["读书笔记"],"tags":["js","笔记"]},{"title":"从「从输入URL到页面加载」谈及Web性能优化","url":"/blog-next/2019/12/12/%E4%BB%8E%E3%80%8C%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E3%80%8D%E8%B0%88%E5%8F%8AWeb%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/","content":"<h3 id=\"如何理解-web-性能优化\"><a href=\"#如何理解-web-性能优化\" class=\"headerlink\" title=\"如何理解 web 性能优化\"></a>如何理解 web 性能优化</h3><p>一个网站的性能，可以分为两个方面，一个叫做 Loading Performance（加载性能），一个叫做 Rendering Performce（渲染性能），说白了就是用户觉得页面加载很快</p>\n<p><img src=\"https://user-images.githubusercontent.com/25027560/46640041-5703be80-cb9c-11e8-8974-5cd0d71ead5f.png\" alt=\"浏览器原理\" loading=\"lazy\"></p>\n<h3 id=\"从输入-URL-到页面加载发生了什么\"><a href=\"#从输入-URL-到页面加载发生了什么\" class=\"headerlink\" title=\"从输入 URL 到页面加载发生了什么\"></a>从输入 URL 到页面加载发生了什么</h3><p>从各个阶段寻求优化</p>\n<h4 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h4><p><img src=\"https://user-gold-cdn.xitu.io/2018/5/28/163a4d01fdd197b6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"浏览器缓存\" loading=\"lazy\"></p>\n<p>输入地址后又缓存直接读缓存，没有就直接请求</p>\n<h4 id=\"DNS-查询\"><a href=\"#DNS-查询\" class=\"headerlink\" title=\"DNS 查询\"></a>DNS 查询</h4><p>DNS 查询就像电话簿，你再浏览器地址输入地址，通过 DNS 查询得到域名的真实 IP<br>DNS 查询完成之前，浏览器无法从服务器下载任何资源</p>\n<p>优化：就需要减少 DNS 查询</p>\n<ul>\n<li>DNS 缓存</li>\n<li>减少域名</li>\n</ul>\n<h4 id=\"TCP-连接\"><a href=\"#TCP-连接\" class=\"headerlink\" title=\"TCP 连接\"></a>TCP 连接</h4><p><img src=\"https://i.loli.net/2019/12/12/W2kKG78ybpLvcPu.png\" alt=\"20191212171414.png\" loading=\"lazy\"></p>\n<p>优化：</p>\n<ul>\n<li>http 请求头 <code>Connection:keep-alive</code></li>\n<li>http2.0 多路复用</li>\n</ul>\n<h4 id=\"http-请求\"><a href=\"#http-请求\" class=\"headerlink\" title=\"http 请求\"></a>http 请求</h4><h5 id=\"不要滥用-cookie\"><a href=\"#不要滥用-cookie\" class=\"headerlink\" title=\"不要滥用 cookie\"></a>不要滥用 cookie</h5><ul>\n<li>去除不必要的 cookie</li>\n<li>尽量压缩 cookie</li>\n<li>注意 设置 cookie 的 domain 级别，不要影响 sub-domain</li>\n<li>设置合适的过期时间</li>\n<li>静态资源使用无 cookie 的域名</li>\n</ul>\n<h5 id=\"添加-Expires-或-Cache-Control-响应头\"><a href=\"#添加-Expires-或-Cache-Control-响应头\" class=\"headerlink\" title=\"添加 Expires 或 Cache-Control 响应头\"></a>添加 Expires 或 Cache-Control 响应头</h5><ul>\n<li>静态内容：将 Expires 响应头设置为将来很远的时间，实现「永不过期」策略</li>\n<li>动态内容：设置合适的 Cache-Control 响应头，让浏览器有条件地发起请求。</li>\n</ul>\n<h5 id=\"设置-Etag\"><a href=\"#设置-Etag\" class=\"headerlink\" title=\"设置 Etag\"></a>设置 Etag</h5><p>通过如 MD5 等加密算法，设置缓存体的 Etag 配合 3.3 的缓存时间使用，这样 Cache-Control 就可以设置较长时间（max-age 设置个十年半载 ），只要浏览器缓存中资源与源服务器中的资源 Etag 不一致，说明内容更新了，此时再下载新资源；Etag 匹配成功则直接响应 304，不用重复下载了用户自然感觉很快。</p>\n<h5 id=\"使用-Gzip\"><a href=\"#使用-Gzip\" class=\"headerlink\" title=\"使用 Gzip\"></a>使用 Gzip</h5><p>使用 Gzip 就是将 HTML CSS JS XML JSON 等资源进行 Gzip 高效压缩，减少资源体积那么下载就会更快，Gzip 压缩通常可以达到 70%，对某些文件可以达到 90%，比 Deflate 更高效。主流服务器都有相应的模块，绝大多数浏览器支持 Gzip 解码，从 http1.1 开始客户端就有了支持压缩的 <code>Accept-Encoding:gzip,deflate</code> 请求头</p>\n<p>服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。web 服务器通过 Content-Encoding 响应头来通知客户端。<code>Content-Encoding: gzip</code></p>\n<p><strong>注意</strong>已经压缩过的内容如图片和 pdf 不要使用 Gzip，另外还有文件内容本身就很小，这些资源再使用 Gzip 反而会增加资源下载时间，浪费 cpu 资源，可能还会增加文件体积</p>\n<h5 id=\"请求数量\"><a href=\"#请求数量\" class=\"headerlink\" title=\"请求数量\"></a>请求数量</h5><p>http 请求的另一个优化方案是增加同时请求的数量，浏览器会同时发送多个请求（cdn），但是同一个域名最多发动 4-8 个，那么当资源过多时，就可以通过增加域名的方法增加并发下载，当然这和上面的 DNS 查询相悖，真实的线上要做权衡</p>\n<h5 id=\"延迟加载\"><a href=\"#延迟加载\" class=\"headerlink\" title=\"延迟加载\"></a>延迟加载</h5><p>因为一次发送的请求有限，所以重要的资源要优先加载，动态的要异步加载</p>\n<!-- TODO: script module -->\n\n<h5 id=\"预加载\"><a href=\"#预加载\" class=\"headerlink\" title=\"预加载\"></a>预加载</h5><p>预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。</p>\n<!-- TODO: script module -->\n\n<h4 id=\"接受相应\"><a href=\"#接受相应\" class=\"headerlink\" title=\"接受相应\"></a>接受相应</h4><p>同样是压缩 Gzip 和利用缓存 Etag 等，响应完成就代表浏览器下载完资源了</p>\n<h4 id=\"接受完成，解析-HTML\"><a href=\"#接受完成，解析-HTML\" class=\"headerlink\" title=\"接受完成，解析 HTML\"></a>接受完成，解析 HTML</h4><p>（Gzip 压缩）<br>接受完成后开始逐行解析 html 文件</p>\n<h5 id=\"DOCTYPE\"><a href=\"#DOCTYPE\" class=\"headerlink\" title=\"DOCTYPE\"></a>DOCTYPE</h5><p>一定要写对 DOCTYPE<br>这个声明的目的是防止浏览器在渲染文档时，切换到我们称为“怪异模式(兼容模式)”的渲染模式。“<!DOCTYPE html>&quot; 确保浏览器按照最佳的相关规范进行渲染，而不是使用一个不符合规范的渲染模式。</p>\n<h5 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h5><p>合并css 减少请求数<br>浏览器会并行下载css，然后逐个解析<br>把样式表放在 head 中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉，有些浏览器会在 css 加载完成之后才会渲染页面<br>我们知道不管是 css 还是 js 都会阻塞页面的渲染（比如chrome中css就会）<br>而且 GUI 线程和 js引擎是互斥的，只有一方能工作，所以一般 css 写上面， js写下面，这样更加符合浏览器的工作原理</p>\n<h5 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h5><p>合并js，减少请求数<br>浏览器会并行下载 js，然后逐个解析<br>而且 <code>&lt;script&gt;</code> 一定阻塞页面 // 待确认<br>放在body最后，可以尽早显示页面，还可以获取节点</p>\n","categories":["web 性能"],"tags":["性能优化"]},{"title":"一道有趣的 js 面试题","url":"/blog-next/2019/04/14/%E4%B8%80%E9%81%93%E6%9C%89%E8%B6%A3%E7%9A%84-js-%E9%9D%A2%E8%AF%95%E9%A2%98/","content":"<p>周末早上起来想起官网的架构，于是打开知乎寻找大神的方案，看到了一个大神的博客点进来了，被大神的博客吸引遂开始刷了起来，感慨于人和人差距的巨大<br>看到一道题的各种解法实在是经典，所以做一个记录</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>解析字符串模板</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var greeting = &#x27;My name is $&#123;name&#125;, age $&#123;age&#125;, I am a $&#123;job.jobName&#125;&#x27;;</span><br><span class=\"line\">var employee = &#123;</span><br><span class=\"line\">    name: &#x27;XiaoMing&#x27;,</span><br><span class=\"line\">    age: 11,</span><br><span class=\"line\">    job: &#123;</span><br><span class=\"line\">        jobName: &#x27;designer&#x27;,</span><br><span class=\"line\">        jobLevel: &#x27;senior&#x27;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var result = greeting.render(employee);</span><br><span class=\"line\">console.log(result);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解法一（正则）\"><a href=\"#解法一（正则）\" class=\"headerlink\" title=\"解法一（正则）\"></a>解法一（正则）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">String.prototype.render = function(obj) &#123;</span><br><span class=\"line\">  return this.replace(/\\$\\&#123;(\\w+|\\w+\\.\\w+)\\&#125;/g, match =&gt; &#123;</span><br><span class=\"line\">    var keys = match.replace(&#x27;$&#123;&#x27;, &#x27;&#x27;).replace(&#x27;&#125;&#x27;, &#x27;&#x27;).split(&#x27;.&#x27;)</span><br><span class=\"line\">    return keys.reduce((acc, cv) =&gt; acc[cv], obj)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解法二（es6字符串模板，解构）\"><a href=\"#解法二（es6字符串模板，解构）\" class=\"headerlink\" title=\"解法二（es6字符串模板，解构）\"></a>解法二（es6字符串模板，解构）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">String.prototype.render = function(obj) &#123;</span><br><span class=\"line\">    // 利用了ES6的解构、对象keys新方法，在函数内部解构并自动展开变量</span><br><span class=\"line\">    eval(`var &#123;$&#123;Object.keys(obj).join(&#x27;,&#x27;)&#125;&#125; = obj`)</span><br><span class=\"line\">    // 利用eval使字符串直接作为ES6解析</span><br><span class=\"line\">    return eval(&#x27;`&#x27; + this + &#x27;`&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解法三-（with）\"><a href=\"#解法三-（with）\" class=\"headerlink\" title=\"解法三 （with）\"></a>解法三 （with）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">String.prototype.render = function (obj) &#123;</span><br><span class=\"line\">    with(obj) &#123;</span><br><span class=\"line\">        return eval(&#x27;`&#x27; + this + &#x27;`&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["js"],"tags":["js","code","面试题"]},{"title":"中庸之第十四篇","url":"/blog-next/2019/09/28/%E4%B8%AD%E5%BA%B8%E4%B9%8B%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AF%87/","content":"<p>君子素其位而行，不愿乎其外。素富贵，行乎富贵；素贫贱，行乎贫贱；素夷狄，行乎夷狄；素患难，行乎患难。君子无入而不自得焉。在上位，不陵下；在下位，不援上。正己而不求于人，则无怨。上不怨天，下不尤人。故君子居易以俟命，小人行险以侥幸。子曰：“射有似乎君子，失诸正鹄，反求诸其身。”</p>\n","categories":["综合"],"tags":["essay","中庸"]},{"title":"关于JSON","url":"/blog-next/2019/03/20/%E5%85%B3%E4%BA%8EJSON/","content":"<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><p>JSON 是一种结构化语言，抄自 JavaScript，用来做数据交换<br>可以由解释引擎直接处理</p>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p><span class=\"exturl\" data-url=\"aHR0cDovL2pzb24ub3JnLw==\">JSON<i class=\"fa fa-external-link-alt\"></i></span><br>每个 JSON 对象就是一个值，可能是一个数组或对象，也可能是一个原始类型的值。总之，只能是一个值，不能是两个或更多的值。</p>\n<ul>\n<li>复合类型的值只能是数组或对象，不能是函数，正则表达式，日期表达式</li>\n<li>原始类型的值只有四种 字符串 十进制数字 布尔值 null，不能是 undefined NaN 等</li>\n<li>字符串必须用双引号表示，不能用单引号</li>\n<li>最后一项不能加逗号</li>\n</ul>\n<h3 id=\"JSON-对象\"><a href=\"#JSON-对象\" class=\"headerlink\" title=\"JSON 对象\"></a>JSON 对象</h3><p>JSON 也是 JavaScript 对象，有两个静态方法 JSON.stringify JSON.parse</p>\n<h4 id=\"JSON-stringify\"><a href=\"#JSON-stringify\" class=\"headerlink\" title=\"JSON.stringify\"></a>JSON.stringify</h4><ul>\n<li>把符合 JSON 格式的值转为 JSON 字符串<br>不符合的会转为 &#39;&#39; 或者 null</li>\n<li>它有第二个参数，用来指定转换后的包含的属性，也就是把指定的属性转换，接受一个数组</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  &#x27;prop1&#x27;: &#x27;value1&#x27;,</span><br><span class=\"line\">  &#x27;prop2&#x27;: &#x27;value2&#x27;,</span><br><span class=\"line\">  &#x27;prop3&#x27;: &#x27;value3&#x27;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var selectedProperties = [&#x27;prop1&#x27;, &#x27;prop2&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.stringify(obj, selectedProperties)</span><br><span class=\"line\">// &quot;&#123;&quot;prop1&quot;:&quot;value1&quot;,&quot;prop2&quot;:&quot;value2&quot;&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第三个参数用来格式化字符串</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">JSON.stringify(&#123; p1:1, p2:2 &#125;, null, &#x27;|-&#x27;);</span><br><span class=\"line\">/*</span><br><span class=\"line\">&quot;&#123;</span><br><span class=\"line\">|-&quot;p1&quot;: 1,</span><br><span class=\"line\">|-&quot;p2&quot;: 2</span><br><span class=\"line\">&#125;&quot;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JSON-parse\"><a href=\"#JSON-parse\" class=\"headerlink\" title=\"JSON.parse\"></a>JSON.parse</h4><p>解析 JSON 字符串<br>第二个参数是一个函数，用来处理解析的对象</p>\n","categories":["js"],"tags":["G","json"]},{"title":"关于 HTML","url":"/blog-next/2018/12/02/%E5%85%B3%E4%BA%8Ehtml/","content":"<h3 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h3><ol>\n<li>现在大部分都是 HTML5</li>\n<li>规范文档（specifications）由 w3c（consortium） 编写</li>\n<li>必须指定 DOCTYPE </li>\n<li>最简单的 html 应该由 DOCTYPE + title + 内容 组成</li>\n<li>工作中常用的标签<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">inline &gt; a span img input label button em strong b i big small </span><br><span class=\"line\">       iframe ...</span><br><span class=\"line\">block &gt; div article h1~h6 p ul ol section nav header </span><br><span class=\"line\">       footer ...</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"比较重要的一些标签\"><a href=\"#比较重要的一些标签\" class=\"headerlink\" title=\"比较重要的一些标签\"></a>比较重要的一些标签</h3><h4 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h4><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nZXRoZWFkLmluZm8v\">head标签内的标签<i class=\"fa fa-external-link-alt\"></i></span></p>\n<pre><code>&lt;base&gt; 元素 指定用于一个文档中包含的所有相对URL的基本URL。一份中只能有一个&lt;base&gt;元素\n</code></pre>\n<h4 id=\"空元素\"><a href=\"#空元素\" class=\"headerlink\" title=\"空元素\"></a>空元素</h4><blockquote>\n<p>不存在子节点的 element</p>\n</blockquote>\n<pre><code>&lt;area&gt;\n&lt;img&gt;\n&lt;br&gt;\n&lt;col&gt;\n&lt;command&gt;\n&lt;hr&gt;\n&lt;input&gt;\n&lt;link&gt;\n&lt;meta&gt;\n&lt;param&gt;\n</code></pre>\n<h4 id=\"可替换元素\"><a href=\"#可替换元素\" class=\"headerlink\" title=\"可替换元素\"></a>可替换元素</h4><blockquote>\n<p>元素是一类外观渲染独立于 css 的外部对象，不是由 css 控制</p>\n</blockquote>\n<pre><code>img\nvideo\ntextarea\ninput\naudio\ncanvas\n</code></pre>\n<h4 id=\"iframe\"><a href=\"#iframe\" class=\"headerlink\" title=\"iframe\"></a>iframe</h4><p>主要用来嵌套页面</p>\n<pre><code>frameborder 默认 1\nname 可以用作 a 标签 和 form 标签的 target 值\n</code></pre>\n<h4 id=\"a\"><a href=\"#a\" class=\"headerlink\" title=\"a\"></a>a</h4><p>跳转页面（HTTP GET 请求）</p>\n<pre><code>target  四个值 _blank _self _parent _top, 后两个在 iframe 中才有作用\nhref  &#39;http&#39; 或者 &#39;//&#39; 或者 &#39;./&#39; 或者 &#39;?name=xx&#39; 或者 &#39;#1&#39; 或者 &#39;mailto:xx@xx.com&#39;\ndownload  下载指定的地址 (如果是下载地址需要指定 Content-type 为 application/octet-stream)\n</code></pre>\n<h4 id=\"form\"><a href=\"#form\" class=\"headerlink\" title=\"form\"></a>form</h4><p>跳转页面（HTTP POST 请求）post 提交 Content-Type 为 application/x-www-form-urlencoded</p>\n<pre><code>action  请求地址\nenctype  提交 form 给服务器的 MIME 类型\nmethod  post 或者 get\nname \ntarget  _blank _self _parent _top\n</code></pre>\n<h4 id=\"input-button\"><a href=\"#input-button\" class=\"headerlink\" title=\"input button\"></a>input button</h4><p>主要区别就是 input 是空标签，button 不是空标签</p>\n<h4 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h4><pre><code>- 子元素\n&lt;caption&gt;\n&lt;colgroup&gt; &gt; &lt;col bgcolor=red&gt; -&gt; 指定对应列的颜色\n&lt;thead&gt;\n&lt;tbody&gt;\n&lt;tfoot&gt;\n&lt;tr&gt;\n</code></pre>\n","categories":["html"],"tags":["G","HTML"]},{"title":"内存泄漏和一次移动端导致的页面崩溃","url":"/blog-next/2019/11/29/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%92%8C%E4%B8%80%E6%AC%A1%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AF%BC%E8%87%B4%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%B4%A9%E6%BA%83/","content":"<h3 id=\"工作中遇到的内存泄漏\"><a href=\"#工作中遇到的内存泄漏\" class=\"headerlink\" title=\"工作中遇到的内存泄漏\"></a>工作中遇到的内存泄漏</h3><p>最近在做一个数据图表的项目，有用阿里的 AntV 移动端组件 F2，项目是 vue 的 spa 项目，起初的状况就是切换页面大概在30次左右就会导致 F2 不渲染，白屏。刚开始分析是因为脚本加载阻塞导致的，后来打开 chrome 的 performance 测了一下才知道原来是比较严重的内存泄漏，由 F2 创建的图表上的事件和属性在页面切换的时候并不会被 GC，经过查找文档，尝试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">chart.clear() // 清除画布</span><br><span class=\"line\">chart.destroy() // 销毁 chart 对象以及监听的事件</span><br><span class=\"line\">chart = null // 指向 null，在下个周期 GC</span><br></pre></td></tr></table></figure>\n<p>终于在 vue 的 beforeDestory 生命周期执行上述操作，终于把内存占用稍稍稳定了<br><img src=\"https://i.loli.net/2019/11/29/fn3eFaY7ubUsWqP.png\" alt=\"60快照.png\" loading=\"lazy\"></p>\n<h3 id=\"什么是内存泄漏？\"><a href=\"#什么是内存泄漏？\" class=\"headerlink\" title=\"什么是内存泄漏？\"></a>什么是内存泄漏？</h3><blockquote>\n<p>不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。<br>大多数语言提供自动内存管理，减轻程序员的负担，这被称为&quot;垃圾回收机制&quot;（garbage collector）。</p>\n</blockquote>\n<h3 id=\"怎么识别内存泄漏\"><a href=\"#怎么识别内存泄漏\" class=\"headerlink\" title=\"怎么识别内存泄漏\"></a>怎么识别内存泄漏</h3><ol>\n<li>使用 Chrome 任务管理器实时监视内存使用 打开 chrome 浏览器，点击右上角主菜单，选择更多工具-&gt;任务管理器，这样就开启了任务管理器面板，然后再右键点击任务管理器的表格标题并启用 JavaScript 使用的内存</li>\n</ol>\n<p>内存占用空间(Memory) 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。<br>JavaScript 使用的内存(JavaScript Memory) 列表示 JS 堆。此列包含两个值。 您感兴趣的值是实时数字（括号中的数字）。实时数字表示您的页面上的可到达对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。</p>\n<ol start=\"2\">\n<li>利用 chrome 时间轴记录可视化内存泄漏</li>\n<li>使用堆快照发现已分离 DOM 树的内存泄漏</li>\n</ol>\n<h3 id=\"内存泄漏发生的原因\"><a href=\"#内存泄漏发生的原因\" class=\"headerlink\" title=\"内存泄漏发生的原因\"></a>内存泄漏发生的原因</h3><h4 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h4><p>有时候为了方便数据的快捷复用，我们会使用缓存，但是魂村必须有一个大小上仙才有用，高内存消耗将会导致缓存突破上限，因为缓存内容无法被回收</p>\n<h4 id=\"队列销毁不及时\"><a href=\"#队列销毁不及时\" class=\"headerlink\" title=\"队列销毁不及时\"></a>队列销毁不及时</h4><p>当浏览器队列销毁不及时时，会导致一些作用域变量得不到及时的释放，因而导致内存泄漏</p>\n<h4 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h4><p>除了常规设置了比较大的对象在全局变量中，还可能是意外导致的全局变量</p>\n<pre><code>  function foo(arg) &#123;\n      bar = &quot;this is a hidden global variable&quot;;\n  &#125;\n</code></pre>\n<h4 id=\"计时器中引用没有清除\"><a href=\"#计时器中引用没有清除\" class=\"headerlink\" title=\"计时器中引用没有清除\"></a>计时器中引用没有清除</h4><h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><h4 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h4><p>例如，Node.js 中 Agent 的 keepAlive 为 true 时，可能造成的内存泄漏。当 Agent keepAlive 为 true 的时候，将会复用之前使用过的 socket，如果在 socket 上添加事件监听，忘记清除的话，因为 socket 的复用，将导致事件重复监听从而产生内存泄漏。</p>\n<h3 id=\"避免内存泄漏的方法\"><a href=\"#避免内存泄漏的方法\" class=\"headerlink\" title=\"避免内存泄漏的方法\"></a>避免内存泄漏的方法</h3><ol>\n<li><p> 少用全局变量，避免意外产生的全局变量</p>\n</li>\n<li><p> 使用闭包要及时注意，有 dom 元素的引用要及时清理</p>\n</li>\n<li><p> 计时器里的回调没用的时候要记得销毁</p>\n</li>\n<li><p>为了避免疏忽导致的遗忘，我们可以用 WeakSet 和 WeakMap 结构，他们对于值的引用都是不计入垃圾回收机制的，表示这是弱引用</p>\n<pre><code> const wm = new WeakMap();\n\n const element = document.getElementById(&#39;example&#39;);\n\n wm.set(element, &#39;some information&#39;);\n wm.get(element) // &quot;some information&quot;\n</code></pre>\n</li>\n</ol>\n<p>这种情况下，一旦消除对该节点的引用，它占用的内存就会被垃圾回收机制释放。Weakmap 保存的这个键值对，也会自动消失。</p>\n<p>基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。</p>\n","categories":["web 性能"],"tags":["项目总结","性能优化"]},{"title":"前端工程化实践笔记","url":"/blog-next/2020/08/18/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/","content":"<h2 id=\"什么是浏览器的热更新\"><a href=\"#什么是浏览器的热更新\" class=\"headerlink\" title=\"什么是浏览器的热更新\"></a>什么是浏览器的热更新</h2><h3 id=\"Auto-Compile-保存后自动编译\"><a href=\"#Auto-Compile-保存后自动编译\" class=\"headerlink\" title=\"Auto Compile 保存后自动编译\"></a>Auto Compile 保存后自动编译</h3><p>配置 watch:true 实现代码 auto compile</p>\n<h3 id=\"live-reload-自动刷新浏览器\"><a href=\"#live-reload-自动刷新浏览器\" class=\"headerlink\" title=\"live reload 自动刷新浏览器\"></a>live reload 自动刷新浏览器</h3><p>为了每次代码修改页面都能自动刷新而无需手动点击，我们需要一种通讯机制来连接浏览器中的预览页面与本地监控代码变更的进程</p>\n<p>官方的 devServer 通过 websocket 链接，就可以使打开的网页和本地服务间建立持久化的通信。当源代码发生变更时，我们就可以通过 Socket 通知到网页端，网页端在接到通知后会自动触发页面刷新。</p>\n<h3 id=\"Hot-Module-Replacement-模块热替换\"><a href=\"#Hot-Module-Replacement-模块热替换\" class=\"headerlink\" title=\"Hot Module Replacement 模块热替换\"></a>Hot Module Replacement 模块热替换</h3><p>为了解决页面刷新导致的状态丢失问题，webpack 提出了模块热替换的概念，完整的 HMR 功能主要包含了三方面的技术：</p>\n<p>watch 示例中体现的，对本地源代码文件内容变更的监控。</p>\n<p>instant reload 示例中体现的，浏览器网页端与本地服务器端的 Websocket 通信。</p>\n<p>hmr 示例中体现的，也即是最核心的，模块解析与替换功能。</p>\n<p><img src=\"https://i.loli.net/2020/08/19/WVbzCnZMirKQL3B.png\" alt=\"hmr.png\" loading=\"lazy\"></p>\n<p>也就是说在这三种技术中，我们可以基于 Node.js 中提供的文件模块 fs.watch 来实现对文件和文件夹的监控，同样也可以使用 sockjs-node 或 socket.io 来实现 Websocket 的通信。</p>\n<h3 id=\"webpack-中的打包流程\"><a href=\"#webpack-中的打包流程\" class=\"headerlink\" title=\"webpack 中的打包流程\"></a>webpack 中的打包流程</h3><h4 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h4><ul>\n<li><p>module：指在模块化编程中我们把应用程序分割成的独立功能的代码模块。</p>\n</li>\n<li><p>chunk：指模块间按照引用关系组合成的代码块，一个 chunk 中可以包含多个 module 。</p>\n</li>\n<li><p>chunk group：指通过配置入口点（entry point）区分的块组，一个 chunk group 中可包含一到多个 chunk 。</p>\n</li>\n<li><p>bundling：webpack 打包的过程。</p>\n</li>\n<li><p>asset/bundle：打包产物。</p>\n</li>\n</ul>\n<h4 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h4><ol>\n<li>一切源代码文件均可通过各种 Loader 转换为 JS 模块 （module），模块之间可以互相引用。</li>\n<li>webpack 通过入口点（entry point）递归处理各模块引用关系，最后输出为一个或多个产物包 js(bundle) 文件。</li>\n<li>每一个入口点都是一个块组（chunk group），在不考虑分包的情况下，一个 chunk group 中只有一个 chunk，该 chunk 包含递归分析后的所有模块。每一个 chunk 都有对应的一个打包后的输出文件（asset/bundle）。</li>\n</ol>\n<p>在上面的 hmr 示例中，从 entry 中的 &#39;./src/index1.js&#39; 到打包产物的 dist/main.js ，以模块的角度而言，其基本流程是：</p>\n<ol>\n<li>唯一 entry 创建一个块组（chunk group）， name 为 main ，包含了 ./src/index1.js 这一个模块。</li>\n<li>在解析器中处理 ./src/index1.js 模块的代码，找到了其依赖的 &#39;./style.css&#39; ，找到匹配的 loader: css-loader 和 style-loader 。</li>\n<li>首先通过 css-loader 处理，将 css-loader/dist/cjs.js!./src/style.css 模块（即把 CSS 文件内容转化为 js 可执行代码的模块，这里简称为 Content 模块）和 css-loader/dist/runtime/api.js 模块打入 chunk 中。// ?</li>\n<li>然后通过 style-loader 处理，将 style-loader/dist/runtime/injectStylesIntoStyleTag.js 模块 （我们这里简称为 API 模块），以及处理后的 .src/style.css 模块（作用是运行时中通过 API 模块将 Content 模块内容注入 Style 标签）导入 chunk 中。</li>\n<li>依次类推，直到将所有依赖的模块均打入到 chunk 中，最后输出名为 main.js 的产物（我们称为 Asset 或 Bundle）。</li>\n</ol>\n<p>style-loader 中的热替换代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cssContentPath = <span class=\"string\">&quot;./node_modules/css-loader/dist/cjs.js!./src/style.css&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> api = __webpack_require__(<span class=\"string\">&quot;./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> content = __webpack_require__(cssContentPath);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> update = api(content, options);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.hot.accept(</span><br><span class=\"line\">  cssContentPath,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    content = __webpack_require__(cssContentPath);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    update(content);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.hot.dispose(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  update();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HotModuleReplacementPlugin-模块热替换插件\"><a href=\"#HotModuleReplacementPlugin-模块热替换插件\" class=\"headerlink\" title=\"HotModuleReplacementPlugin 模块热替换插件\"></a>HotModuleReplacementPlugin 模块热替换插件</h3><p>对指定的 js 文件实现热替换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//./text.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> text = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//./index2.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; text &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./text.js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(div);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  div.innerHTML = text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">module</span>.hot) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.hot.accept(<span class=\"string\">&quot;./text.js&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    render();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的例子中我们可以看到，热替换的实现，既依赖 webpack 核心代码中 HotModuleReplacementPlugin 所提供的相关 API，也依赖在具体模块的加载器中实现相应 API 的更新替换逻辑</p>\n<h2 id=\"正确使用-Source-Map\"><a href=\"#正确使用-Source-Map\" class=\"headerlink\" title=\"正确使用 Source Map\"></a>正确使用 Source Map</h2><p>一种在调试时将产物代码显示回源代码的功能</p>\n<h3 id=\"关键字：\"><a href=\"#关键字：\" class=\"headerlink\" title=\"关键字：\"></a>关键字：</h3><ul>\n<li><p><code>false</code>：即不开启 <code>source map</code> 功能，其他不符合上述规则的赋值也等价于 <code>false</code> 。</p>\n</li>\n<li><p><code>eval</code>：是指在编译器中使用 <code>EvalDevToolModulePlugin</code> 作为 <code>sourcemap 的处理插件</code>。</p>\n</li>\n<li><p><code>[xxx-...]source-map</code>：根据 <code>devtool</code> 对应值中是否有 <code>eval</code> 关键字来决定使用 <code>EvalSourceMapDevToolPlugin</code> 或 <code>SourceMapDevToolPlugin</code> 作为 <code>sourcemap</code> 的处理插件，其余关键字则决定传入到插件的相关字段赋值。</p>\n</li>\n<li><p><code>inline</code>：决定是否传入插件的 <code>filename</code> 参数，作用是决定单独生成 <code>source map</code> 文件还是在行内显示，该参数在<code> eval-</code> 参数存在时无效。</p>\n</li>\n<li><p><code>hidden</code>：决定传入插件 <code>append</code> 的赋值，作用是判断是否添加 <code>SourceMappingURL</code> 的注释，该参数在 <code>eval-</code> 参数存在时无效。</p>\n</li>\n<li><p><code>module</code>：为 <code>true</code> 时传入插件的 <code>module</code> 为 <code>true</code> ，作用是为加载器（Loaders）生成 <code>source map</code> 。</p>\n</li>\n<li><p><code>cheap</code>：这个关键字有两处作用。首先，当 <code>module</code> 为 <code>false</code> 时，它决定插件 <code>module</code> 参数的最终取值，最终取值与 <code>cheap</code> 相反。其次，它决定插件 <code>columns</code> 参数的取值，作用是决定生成的 <code>source map</code> 中是否包含列信息，在不包含列信息的情况下，调试时只能定位到指定代码所在的行而定位不到所在的列。</p>\n</li>\n<li><p><code>nosource</code>：<code>nosource</code> 决定了插件中 <code>noSource</code> 变量的取值，作用是决定生成的 <code>source map</code> 中是否包含源代码信息，不包含源码情况下只能显示调用堆栈信息。</p>\n</li>\n</ul>\n<h3 id=\"Source-Map-处理插件\"><a href=\"#Source-Map-处理插件\" class=\"headerlink\" title=\"Source Map 处理插件\"></a>Source Map 处理插件</h3><p>从上面的规则中我们还可以看到，根据不同规则，实际上 webpack 是从三种插件中选择其一作为 source map 的处理插件</p>\n<ul>\n<li><p><code>EvalDevToolModulePlugin</code>：模块代码后添加 <code>sourceURL=webpack:///+ 模块引用路径</code>，不生成 <code>source map</code> 内容，模块产物代码通过 <code>eval()</code> 封装。</p>\n</li>\n<li><p><code>EvalSourceMapDevToolPlugin</code>：生成 <code>base64</code> 格式的 <code>source map</code> 并附加在模块代码之后， <code>source map</code> 后添加 <code>sourceURL=webpack:///+ 模块引用路径</code>，不单独生成文件，模块产物代码通过 <code>eval()</code> 封装。</p>\n</li>\n<li><p><code>SourceMapDevToolPlugin</code>：生成单独的 <code>.map</code> 文件，模块产物代码不通过 <code>eval</code> 封装。</p>\n</li>\n</ul>\n<h3 id=\"开发环境下-Source-Map-推荐预设\"><a href=\"#开发环境下-Source-Map-推荐预设\" class=\"headerlink\" title=\"开发环境下 Source Map 推荐预设\"></a>开发环境下 Source Map 推荐预设</h3><ul>\n<li><p>通常来说，开发环境首选哪一种预设取决于 <code>source map</code> 对于我们的帮助程度。</p>\n</li>\n<li><p>如果对项目代码了如指掌，查看产物代码也可以无障碍地了解对应源代码的部分，那就可以关闭 <code>devtool</code> 或使用 <code>eval</code> 来获得最快构建速度。</p>\n</li>\n<li><p>反之如果在调试时，需要通过 <code>source map</code> 来快速定位到源代码，则优先考虑使用 <code>eval-cheap-module-source-map</code>，它的质量与初次/再次构建速度都属于次优级，以牺牲定位到列的功能为代价换取更快的构建速度通常也是值得的。</p>\n</li>\n<li><p>在其他情况下，根据对质量要求更高或是对速度要求更高的不同情况，可以分别考虑使用 <code>eval-source-map</code> 或 <code>eval-cheap-source-map</code>。</p>\n</li>\n</ul>\n<p>了解了开发环境下如何选择 source map 预设后，我们再来补充几种工具和脚手架中的默认预设：</p>\n<ul>\n<li><p><code>webpack</code> 配置中，如果不设定 <code>devtool</code> ，则使用默认值 <code>eval</code> ，即速度与 <code>devtool:false</code> 几乎相同、但模块代码后多了 <code>sourceURL</code> 以帮助定位模块的文件名称。</p>\n</li>\n<li><p><code>create-react-app</code> 中，在生产环境下，根据 <code>shouldUseSourceMap</code> 参数决定使用 <code>‘source-map’</code> 或 <code>false</code> ；在开发环境下使用 <code>cheap-module-source-map</code>（不包含列信息的源代码，但更快）。</p>\n</li>\n<li><p><code>vue-cli-service</code> 中，与 <code>creat-react-app</code> 中相同。</p>\n</li>\n</ul>\n<h3 id=\"不同预设的效果总结\"><a href=\"#不同预设的效果总结\" class=\"headerlink\" title=\"不同预设的效果总结\"></a>不同预设的效果总结</h3><ul>\n<li><p>质量：生成的 source map 的质量分为 5 个级别，对应的调试便捷性依次降低：源代码 &gt; 缺少列信息的源代码 &gt; loader 转换后的代码 &gt; 生成后的产物代码 &gt; 无法显示代码（具体参见下面的不同质量的源码示例小节）。对应对质量产生影响的预设关键字优先级为 <code>souce-map = eval-source-map &gt; cheap-module- &gt; cheap- &gt; eval = none &gt; nosource-</code></p>\n</li>\n<li><p>构建的速度：<br>开发环境下 eval- 对应的 <code>EvalSourceMapDevToolPlugin</code> 整体要快于不带 <code>eval-</code> 的 <code>SourceMapDevToolPlugin</code> 。尤其在质量最佳的配置下，<code>eval-source-map</code> 的再次构建速度要远快于其他几种<br>在生产环境下：通常不会开启再次构建，因此相比再次构建，初次构建的速度更值得关注，甚至对构建速度以外因素的考虑要优先于对构建速度的考虑</p>\n</li>\n<li><p>包的大小和生成方式：在开发环境下我们并不需要关注这些因素，正如在开发环境下也通常不考虑使用分包等优化方式。我们需要关注速度和质量来保证我们的高效开发体验，而其他的部分则是在生产环境下需要考虑的问题。</p>\n</li>\n</ul>\n<h3 id=\"EvalSourceMapDevToolPlugin-的使用\"><a href=\"#EvalSourceMapDevToolPlugin-的使用\" class=\"headerlink\" title=\"EvalSourceMapDevToolPlugin 的使用\"></a>EvalSourceMapDevToolPlugin 的使用</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">webpack.config.js </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"comment\">//devtool: &#x27;eval-source-map&#x27;, </span></span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"literal\">false</span>, </span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [ </span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.EvalSourceMapDevToolPlugin(&#123; </span><br><span class=\"line\">      <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>, </span><br><span class=\"line\">      <span class=\"built_in\">module</span>: <span class=\"literal\">true</span>, </span><br><span class=\"line\">      <span class=\"attr\">columns</span>: <span class=\"literal\">false</span> </span><br><span class=\"line\">    &#125;) </span><br><span class=\"line\">  ], </span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>我们将 <code>devtool</code> 设为 <code>false</code> ，而直接使用 <code>EvalSourceMapDevToolPlugin</code> ，通过传入 <code>module: true</code> 和 <code>column:false</code>，达到和预设 <code>eval-cheap-module-source-map</code> 一样的质量，同时传入 <code>exclude</code> 参数，排除第三方依赖包的 <code>source map</code> 生成。保存设定后通过运行可以看到，在文件体积减小（尽管开发环境并不关注文件大小）的同时，再次构建的速度相比上面表格中的速度提升了将近一倍，达到了最快一级。</p>\n","categories":["前端工程化"],"tags":["笔记","scaffold"]},{"title":"千字文第八课","url":"/blog-next/2019/03/26/%E5%8D%83%E5%AD%97%E6%96%87%E7%AC%AC%E5%85%AB%E8%AF%BE/","content":"<p>女慕贞洁 男效才良<br>知错必改 得能莫忘<br>罔谈彼短 靡恃己长<br>信使可复 器欲难量</p>\n","categories":["综合"],"tags":["essay","千字文"]},{"title":"天生爱你","url":"/blog-next/2020/02/26/%E5%A4%A9%E7%94%9F%E7%88%B1%E4%BD%A0/","content":"<blockquote>\n<p>特别喜欢幼杀的这首歌，心目中评价很高</p>\n</blockquote>\n<h3 id=\"verse\"><a href=\"#verse\" class=\"headerlink\" title=\"verse\"></a>verse</h3><p>[00:14.20]幼稚园杀手 天生爱你<br>[00:24.22]还记得那天 你离开的画面<br>[00:27.16]转身之后开始了无尽的挂念<br>[00:30.17]那是个充满希望而又伤感的夏天<br>[00:33.23]你陪伴在我身边已整整十八年<br>[00:36.31]忍不住留下眼泪却怕被对方发现<br>[00:39.15]望着你远去的背影我舍不得眨眼<br>[00:42.10]你只不过是站在了车窗的那边<br>[00:45.18]但我感觉我们之间相隔了那么远<br>[00:48.21]你也曾像那些美丽的女孩一样年轻着<br>[00:51.38]爱上了一个男孩你愿为他付出全心了<br>[00:54.41]原来爱和奉献是不需要任何原因的<br>[00:57.41]再也回不到从前就像列车一直前进着<br>[01:00.48]这世界上也许我是最渺小的那一个<br>[01:03.36]后到来是你生命中最幸福的那一个<br>[01:06.48]我知道你的心一直在呼唤着我回家<br>[01:09.34]在那些想你的夜我也不停潸然泪下<br>[01:36.38]生命只有一次 我只能爱你一世<br>[01:39.02]这种爱不会因为时间无情的流失而遗失<br>[01:42.02]总想听到你亲切的声音 每当我迷失<br>[01:45.05]虽然对于生活我有多么地难以启齿<br>[01:47.97]在电话里牵强的告诉你我过得很好<br>[01:51.17]尽管太多事情不尽人意总让我心情很糟<br>[01:53.94]直到你告诉我她的病最终无法医治<br>[01:56.95]没有留下一声告别就这样悄悄的去世<br>[01:59.85]汹涌的悲伤没办法医治<br>[02:01.61]放声的哭喊失去了理智<br>[02:03.07]一切太突然却没有预示<br>[02:04.54]不断的失去人们却从未意识</p>\n<h3 id=\"hook\"><a href=\"#hook\" class=\"headerlink\" title=\"hook\"></a>hook</h3><p>郭采洁的《I Remenber》</p>\n<p>Do you know that I&#39;m OK?<br>Are there things you wanna say?<br>Thinking of you night and day<br>Hopping you&#39;ll come back and stay<br>I remember when you told me<br>I&#39;ll be all right<br>Don&#39;t worry...<br><em>I try and try to understand...<br>Is all this just a sad good bye?<br>Thinking of you night and day...<br>No matter if you&#39;ll come and stay<br>I remember when you told me<br>I&#39;ll be all right<br>Just hold me...<br>I don&#39;t wanna close my eyes tonight<br>Missing you make me cry<br>Your love will give me strengths<br>to carry on<br>You&#39;ll always be my heart<br>and mind<br>So I don&#39;t wanna close my<br>eyes tonight<br>I know it&#39;s just a miss<br>match in time...<br>Why...oh ...why<br>Miss match in time</em></p>\n","categories":["综合"],"tags":["essay","幼稚园杀手"]},{"title":"如何成为公司独当一面的工程师（转）","url":"/blog-next/2020/09/27/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E5%85%AC%E5%8F%B8%E7%8B%AC%E5%BD%93%E4%B8%80%E9%9D%A2%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88/","content":"<p>下面的文章引入自黄轶老师的公众号，我们很多时候都会发现自己对于技术处于不是特别良好的状态，或满足，或迷茫，或焦虑，或踌躇不前，我希望这篇文章能够让我在舒适圈的时候提醒自己，也能经常回头看自己对标以下之能力有没有提高</p>\n<blockquote>\n<p>如今的互联网市场对高阶技术岗位的需求越来越多，成为独当一面的工程师已经成为很多一二线互联网公司招聘的标准门槛了。那么如何成长为独当一面的工程师呢，我会从技术能力和业务能力 2 个方面去阐述。</p>\n</blockquote>\n<h2 id=\"技术能力\"><a href=\"#技术能力\" class=\"headerlink\" title=\"技术能力\"></a>技术能力</h2><p>技术能力无疑是衡量一个工程师水平最重要的依据，那么对于独当一面的工程师技术能力的要求是怎样的呢。</p>\n<h3 id=\"职业技能\"><a href=\"#职业技能\" class=\"headerlink\" title=\"职业技能\"></a>职业技能</h3><p>职业技能就是工作中依赖的技术栈，下面我们以前端工程师为例，看一下有需要掌握哪些职业技能。</p>\n<h4 id=\"熟练掌握-HTML、CSS、JavaScript\"><a href=\"#熟练掌握-HTML、CSS、JavaScript\" class=\"headerlink\" title=\"熟练掌握 HTML、CSS、JavaScript\"></a>熟练掌握 HTML、CSS、JavaScript</h4><p>用语义化的 HTML 标签配合 CSS 百分百还原设计稿，并使用 JavaScript 完成各种交互逻辑。这是前端的基本功，除了通过书籍、视频等渠道学习之外，你可以通过做大量业务，不断写代码去应用所学知识，不断积累。</p>\n<h4 id=\"熟练掌握一门-MVVM-框架\"><a href=\"#熟练掌握一门-MVVM-框架\" class=\"headerlink\" title=\"熟练掌握一门 MVVM 框架\"></a>熟练掌握一门 MVVM 框架</h4><p>Vue、React、Angular 其一，随着前端的日益复杂，大部分场景都离不开它们。你需要清楚的了解框架出现的意义，框架的职责边界，你能轻松应用框架提供的各种能力辅助开发工作。除了不断在工作中应用，你还可以主动去学习框架源码，了解框架的实现原理。</p>\n<h4 id=\"至少要学会一种打包工具\"><a href=\"#至少要学会一种打包工具\" class=\"headerlink\" title=\"至少要学会一种打包工具\"></a>至少要学会一种打包工具</h4><p>以 webpack 为例，你需要熟练掌握 webpack 的配置，学会利用 webpack 辅助我们的开发、部署和优化。你可以尝试去编写 webpack 的 loader 和 plugin。例如我们平时开发工作中需要 mock 数据，那么我们可以编写一个 webpack 插件，在不改源码的情况下，实现在开发环境请求 mock 接口，测试环境请求线上接口。</p>\n<h4 id=\"熟练掌握前端的一些广度知识\"><a href=\"#熟练掌握前端的一些广度知识\" class=\"headerlink\" title=\"熟练掌握前端的一些广度知识\"></a>熟练掌握前端的一些广度知识</h4><p>例如HTTP、Web 安全、性能优化、数据结构和算法等。除了通过书籍、视频等渠道学习之外，你可以在平时工作中不断去应用和验证。例如性能优化，你可以去分析页面的性能瓶颈，在前端还是后端？如果是在前端，你还可以进一步分析白屏时间、首屏渲染时间、JS 加载时间、JS 执行时间等等，最后通过统计的手段做性能监控和报警。</p>\n<h3 id=\"开发效率\"><a href=\"#开发效率\" class=\"headerlink\" title=\"开发效率\"></a>开发效率</h3><p>开发效率的高低，直接决定你的工作产出比，那么如何提升开发效率呢。</p>\n<h4 id=\"给自己设一个免打扰时间\"><a href=\"#给自己设一个免打扰时间\" class=\"headerlink\" title=\"给自己设一个免打扰时间\"></a>给自己设一个免打扰时间</h4><p>例如下午的 2点-4点，这个时间专心 coding，不看微信不刷微博不开会，这样的编码会很高效。</p>\n<h4 id=\"工作中善于提炼可复用的代码和逻辑\"><a href=\"#工作中善于提炼可复用的代码和逻辑\" class=\"headerlink\" title=\"工作中善于提炼可复用的代码和逻辑\"></a>工作中善于提炼可复用的代码和逻辑</h4><p>例如当你在开发过程中发现某组件在其它项目中实现过，这个时候千万不要想着去 CV 代码，而是把它抽象成可复用的业务组件，对外设计好输入和输出接口，并抽取到专门的仓库中管理，业务通过 npm 私服的方式去引入。</p>\n<h4 id=\"善于通过技术的手段去提升效率\"><a href=\"#善于通过技术的手段去提升效率\" class=\"headerlink\" title=\"善于通过技术的手段去提升效率\"></a>善于通过技术的手段去提升效率</h4><p>例如当你去开发和维护多个项目的时候，每个项目都包含一些类似的代码和配置，你就可以想着去开发一个脚手架，自动帮助你去初始化项目代码和一些配置文件。</p>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><p>每个工程师都会在工作中遇到各种问题，解决问题的能力侧面反映了一个人的技术能力。</p>\n<h4 id=\"线上问题-case-study\"><a href=\"#线上问题-case-study\" class=\"headerlink\" title=\"线上问题 case study\"></a>线上问题 case study</h4><p>当遇到线上问题，你可以配合一些报错日志快速定位问题出，找到快速修复的方案，并且在每次出线上问题后都认真的做 case study，找出引发问题的多方面原因，并给出对应的解决方案，避免日后再出现类似问题。</p>\n<h4 id=\"探究问题的本质\"><a href=\"#探究问题的本质\" class=\"headerlink\" title=\"探究问题的本质\"></a>探究问题的本质</h4><p>在开发过程中遇到报错，你可以通过代码执行堆栈和报错信息找到引起错误的根本原因，从而找到最合理的修复方案，如果报错的源头是第三方插件，你应该趁机去了解第三方实现的原理。</p>\n<h3 id=\"学会提问\"><a href=\"#学会提问\" class=\"headerlink\" title=\"学会提问\"></a>学会提问</h3><p>并不是所有问题都要自己独立解决，有些时候也可以求助于他人，好的提问方式非常重要。例如你在提问之前，自己应该经过充分的思考，并学会把问题拆解，在拆解的过程中就会把问题的复杂度降低。要善用搜索引擎，把关键字提取出来去搜索引擎上去搜索，先尝试自己去解决问题。如果仍然不能解决，可以将问题的相关上下文、截图及必要标识及自己的思考过程、查找到的相关资料，以及自己的分析发送给想要帮助你的人，并能提供最小化复现的问题。</p>\n<h3 id=\"代码重构\"><a href=\"#代码重构\" class=\"headerlink\" title=\"代码重构\"></a>代码重构</h3><p>曾经有个大佬跟我说过，如果每半年去回顾你之前写的代码，都会觉得像坨屎的话，那说明你在进步。</p>\n<h4 id=\"不要过度设计\"><a href=\"#不要过度设计\" class=\"headerlink\" title=\"不要过度设计\"></a>不要过度设计</h4><p>有些人喜欢一次性把代码写好，预留各种扩展接口，过度设计，但由于需求的的变化往往不可预测，非常容易导致花了大量的时间却写了大量无用的代码，产出低下。在高速发展的互联网公司是绝对不能容忍这种情况的，而应该是敏捷开发，快速迭代。</p>\n<h4 id=\"及时重构\"><a href=\"#及时重构\" class=\"headerlink\" title=\"及时重构\"></a>及时重构</h4><p>通常我们为了一个项目快速上线，第一版的代码可能会有很多问题，当我们在基于之前版本的代码开发新功能的时候，如果遇到之前代码实现不合理的地方要及时重构，而不要敷衍了事，如果等到代码量已经很大的时候去重构，会非常困难和痛苦，并且还可能有 regression 风险。</p>\n<h4 id=\"codereview\"><a href=\"#codereview\" class=\"headerlink\" title=\"codereview\"></a>codereview</h4><p>找比自己厉害的同事帮助自己的代码做 codereview，吸取他们的一些好的建议，也可以去 review 其他同事的代码，觉得写的好的代码要学习，觉得写的不好的地方可以  ”挑刺“，引起讨论，追寻最佳实践。并且一个团队要制定统一的代码规范和风格。</p>\n<h4 id=\"学习优秀源码\"><a href=\"#学习优秀源码\" class=\"headerlink\" title=\"学习优秀源码\"></a>学习优秀源码</h4><p>如何去写出优秀的代码，首先要学会模仿，你应该经常去 GitHub 去阅读一些优秀的源码，把好的编程思想和代码实现借鉴到自己的工作项目中。</p>\n<h3 id=\"技术沉淀\"><a href=\"#技术沉淀\" class=\"headerlink\" title=\"技术沉淀\"></a>技术沉淀</h3><p>技术是一个长期学习并积累的过程，需要经常做一些技术沉淀。</p>\n<h3 id=\"技术分享\"><a href=\"#技术分享\" class=\"headerlink\" title=\"技术分享\"></a>技术分享</h3><p>把工作中遇到的一些问题的解决方案、学习的一些新技术，产出的一些技术项目总结下来，作为对内或者对外（公司允许的话）技术分享和输出。对内分享的话可以让大家能知道你做的东西，并活跃内部技术氛围，锻炼表述能力，这个能力在大公司的晋升述职中非常重要；对外分享可以锻炼写作能力，提升个人或者是团队的技术影响力。</p>\n<h3 id=\"开源\"><a href=\"#开源\" class=\"headerlink\" title=\"开源\"></a>开源</h3><p>如果在工作中做的不错的项目，有开源价值并且公司允许的前提下，可以考虑开源，因为开源会让你对项目质量有更高的追求。例如之前我在滴滴做的 cube-ui，开源会让我们对代码的质量要求更高，并补充了完整的文档、示例和测试。而且随着越来越多人使用，用户帮我们反馈了很多 bug，也补充了很多功能，直接帮助我们省了 QA 的人力。好的开源项目也可以帮助我们提升个人和团队的技术影响力。</p>\n<h3 id=\"快速学习\"><a href=\"#快速学习\" class=\"headerlink\" title=\"快速学习\"></a>快速学习</h3><p>技术变化日新月异，快速学习的能力尤其重要。</p>\n<h4 id=\"阅读官方文档\"><a href=\"#阅读官方文档\" class=\"headerlink\" title=\"阅读官方文档\"></a>阅读官方文档</h4><p>当你去学习一门新技术的时候首先应该去阅读官方文档，而不要去看社区总结的文章，因为官方文档是最权威的，并且是实时更新的，而他人总结的二手资料很可能是过时甚至是有误的。</p>\n<h4 id=\"在工作中实践\"><a href=\"#在工作中实践\" class=\"headerlink\" title=\"在工作中实践\"></a>在工作中实践</h4><p>学习如果脱离工作的实践，其实是非常低效的。你应该把自己所学的知识并在工作中反复实践和验证，及时反馈，加深学习的印象。不要花时间去学习与工作无太多直接关系的领域。</p>\n<h4 id=\"先精通一门技术\"><a href=\"#先精通一门技术\" class=\"headerlink\" title=\"先精通一门技术\"></a>先精通一门技术</h4><p>不同的技术之间其实是融会贯通的，当你对一个技术精通并总结出方法论以后，很容易上手别的技术。比如一个对  Vue 精通的同学，上手 React 必定毫无难度，对 Web 前端开发精通的同学开发小程序也是毫无压力。</p>\n<h3 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h3><p>技术选型是大部分工程师都会面临的问题，好的工程师一定要有好的技术选型的能力。</p>\n<h4 id=\"技术选型的标准\"><a href=\"#技术选型的标准\" class=\"headerlink\" title=\"技术选型的标准\"></a>技术选型的标准</h4><p>当你去选择某个开源项目的时候，应该参考以下几个方面：feature 完整度（能否很好满足我们的需求），使用量（npm 下载量、是否有大公司使用），维护力度（最近更新时间、更新频率、issue 和 pr 的处理情况），测试（是否有测试，测试覆盖率），文档（文档和示例是否完善），维护者（团队、个人的技术能力以及他们的技术影响力），流行度（star、fork 量)。</p>\n<h3 id=\"造轮子\"><a href=\"#造轮子\" class=\"headerlink\" title=\"造轮子\"></a>造轮子</h3><p>当现有轮子不能满足我们的需求的时候，我们要有自己造轮子的能力。</p>\n<h4 id=\"学会造轮子\"><a href=\"#学会造轮子\" class=\"headerlink\" title=\"学会造轮子\"></a>学会造轮子</h4><p>你需要经常去学习和研究其它的轮子是如何造的，学的多了，自然就掌握了造轮子的一些规律和方法论，了解轮子实现的本质原理，也就可以根据自己的需求和场景去定制化轮子了，并且你的轮子也可以是其它小轮子组装而成。例如我在滴滴的时候为了实现一个媲美原生 iOS 体验的 Picker 组件，先是研究了 isroll 的实现，在它基础上扩展实现了 better-scroll，然后在 better-scroll 的基础上扩展出 Picker 组件。</p>\n<h2 id=\"业务能力\"><a href=\"#业务能力\" class=\"headerlink\" title=\"业务能力\"></a>业务能力</h2><p>作为独当一面的工程师，除了过硬的技术能力，也需要有良好的业务能力。</p>\n<h3 id=\"owner-意识\"><a href=\"#owner-意识\" class=\"headerlink\" title=\"owner 意识\"></a>owner 意识</h3><p>如果你不甘心只当一颗螺丝钉，你需要有 owner 意识，对产品和项目负责。例如我现在在 zoom，从需求、设计、开发、测试到最终的上线都是由工程师在主导，并协调各个角色成员。这对工程师提出了更高的要求，也锻炼了工程师的综合素质能力。即使你所在的公司项目并不由工程师主导，你也可以以这个标准来要求自己。</p>\n<h3 id=\"产品思维\"><a href=\"#产品思维\" class=\"headerlink\" title=\"产品思维\"></a>产品思维</h3><p>当你接到一个需求的时候，也要思考这个需求解决了什么问题，有什么价值和意义。作为一个工程师，最好能参与到需求早期的讨论中，充分理解业务，这样你对需求的把握和理解会更准确，而不是产品说什么你就做什么，有些时候你会找到一条既能满足需求又能节约开发成本的路。</p>\n<h3 id=\"沟通能力\"><a href=\"#沟通能力\" class=\"headerlink\" title=\"沟通能力\"></a>沟通能力</h3><p>很多人希望做一个只写代码的美男（女）子，但实际情况你需要和不同的工作岗位的人沟通。沟通能力是非常重要的，很多时候你需要去了解你的需求方的想法，并输出你的想法。如果你两耳不闻窗外事，很可能做出来的东西并不是他人想要的，充分的沟通可以避免走一些弯路，提升工作效率。</p>\n<h3 id=\"敬畏上线\"><a href=\"#敬畏上线\" class=\"headerlink\" title=\"敬畏上线\"></a>敬畏上线</h3><p>很多没有在大公司待过的人对于上线的视程度不够，一旦上线出问题，第一反应并不是回滚代码，而是去定位问题，通过下一次上线修复。这个行为在大公司是绝对不允许的，因为当你用户量大了，每一次上线事故的影响面都会很大，如果不及时回滚，对公司也会造成非常大的损失。因此要对上线有敬畏心，保证整个上线过程是自动化而非人工参与（因为人是不靠谱的），上线过程中需要观察监控，一旦有任何数据异常要及时回滚，然后再定位问题重新上线，最好避免高峰期上线。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们通篇讲了很多方法，但实际上在你进阶成为独当一面工程师的路上，这些方法也只是仅供参考，真正能成为大牛的人，能够直面困难和挫折，敢于跳出自己的舒适区追求进步，能熬得住突破瓶颈长时间的寂寞，是肯下笨功夫的聪明人。没有什么人可以靠着看一两篇文章就能成为大牛，而真正重要的，是多年如一日的坚持。</p>\n<p>与大家共勉。</p>\n","categories":["综合"],"tags":["essay","前端"]},{"title":"工具类函数","url":"/blog-next/2019/12/20/%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%87%BD%E6%95%B0/","content":"<h3 id=\"是否是对象\"><a href=\"#是否是对象\" class=\"headerlink\" title=\"是否是对象\"></a>是否是对象</h3><pre><code>function isObject(val) &#123;\n  return val !== null &amp;&amp; typeof val === &quot;object&quot;;\n&#125;      \n</code></pre>\n<h3 id=\"是否是纯对象\"><a href=\"#是否是纯对象\" class=\"headerlink\" title=\"是否是纯对象\"></a>是否是纯对象</h3><pre><code>function isPlainObject(val) &#123;\n    return Object.prototype.toString.call(val) === &quot;[object Object]&quot;;\n&#125;    \n</code></pre>\n<h3 id=\"是否是日期对象\"><a href=\"#是否是日期对象\" class=\"headerlink\" title=\"是否是日期对象\"></a>是否是日期对象</h3><pre><code>function isDate(val) &#123;\n  return Object.prototype.toString.call(val) === &quot;[object Date]&quot;;\n&#125;    \n</code></pre>\n<h3 id=\"是否是-URLSearchParams-对象\"><a href=\"#是否是-URLSearchParams-对象\" class=\"headerlink\" title=\"是否是 URLSearchParams 对象\"></a>是否是 URLSearchParams 对象</h3><pre><code>function isURLSearchParams(val) &#123;\n  return typeof val !== &quot;undefined&quot; &amp;&amp; val instanceof URLSearchParams;\n&#125;\n</code></pre>\n<h3 id=\"是否是-FormData\"><a href=\"#是否是-FormData\" class=\"headerlink\" title=\"是否是 FormData\"></a>是否是 FormData</h3><pre><code>function isFormData(val) &#123;\n  return typeof val !== &quot;undefined&quot; &amp;&amp; val instanceof FormData;\n&#125;    \n</code></pre>\n<h3 id=\"是否是绝对地址\"><a href=\"#是否是绝对地址\" class=\"headerlink\" title=\"是否是绝对地址\"></a>是否是绝对地址</h3><pre><code>function isAbsoluteURL(url) &#123;\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n&#125;    \n</code></pre>\n<h3 id=\"extend-合并两个对象的属性\"><a href=\"#extend-合并两个对象的属性\" class=\"headerlink\" title=\"extend 合并两个对象的属性\"></a>extend 合并两个对象的属性</h3><pre><code>function extend(to, from) &#123;\n  for (var i in from) &#123;\n    to[i] = from[i];\n  &#125;\n  return to;\n&#125;\n</code></pre>\n<h3 id=\"合并-baseurl-和-url\"><a href=\"#合并-baseurl-和-url\" class=\"headerlink\" title=\"合并 baseurl 和 url\"></a>合并 baseurl 和 url</h3><pre><code>function combineURL(baseURL, relativeURL) &#123;\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, &quot;&quot;) + &quot;/&quot; + relativeURL.replace(/^\\/+/, &quot;&quot;)\n    : baseURL;\n&#125;    \n</code></pre>\n<h3 id=\"对象合并（深拷贝）\"><a href=\"#对象合并（深拷贝）\" class=\"headerlink\" title=\"对象合并（深拷贝）\"></a>对象合并（深拷贝）</h3><pre><code>function deepMerge() &#123;\n  var objs = [];\n  for (var _i = 0; _i &lt; arguments.length; _i++) &#123;\n    objs[_i] = arguments[_i];\n  &#125;\n  var result = Object.create(null);\n  objs.forEach(function(obj) &#123;\n    if (obj) &#123;\n      Object.keys(obj).forEach(function(key) &#123;\n        var val = obj[key];\n        if (isPlainObject(val)) &#123;\n          if (isPlainObject(result[key])) &#123;\n            result[key] = deepMerge(result[key], val);\n          &#125; else &#123;\n            result[key] = deepMerge(val);\n          &#125;\n        &#125; else &#123;\n          result[key] = val;\n        &#125;\n      &#125;);\n    &#125;\n  &#125;);\n  return result;\n&#125;\n</code></pre>\n","categories":["js-code"],"tags":["code"]},{"title":"微信项目中遇到的一些问题","url":"/blog-next/2017/10/18/%E5%BE%AE%E4%BF%A1%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/","content":""},{"title":"总结split的所有基础用法","url":"/blog-next/2019/04/14/%E6%80%BB%E7%BB%93split%E7%9A%84%E6%89%80%E6%9C%89%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/","content":"<blockquote>\n<p>split() 方法使用指定的分隔符字符串将一个String对象分割成字符串数组，以将字符串分隔为子字符串，以确定每个拆分的位置。 </p>\n</blockquote>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; separator 指定根据什么分割</span><br><span class=\"line\"> * @param &#123;number&#125; limit 指定分割出来的是几个，（前几个）</span><br><span class=\"line\"> */</span><br><span class=\"line\">str.split([separator[, limit]])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27;name age job.jobname&#x27;.split()</span><br><span class=\"line\">// (3) [&quot;name age job.jobname&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;name age job.jobname&#x27;.split(&#x27;&#x27;)</span><br><span class=\"line\">//(20) [&quot;n&quot;, &quot;a&quot;, &quot;m&quot;, &quot;e&quot;, &quot; &quot;, &quot;a&quot;, &quot;g&quot;, &quot;e&quot;, &quot; &quot;, &quot;j&quot;, &quot;o&quot;, &quot;b&quot;, &quot;.&quot;, &quot;j&quot;, &quot;o&quot;, &quot;b&quot;, &quot;n&quot;, &quot;a&quot;, &quot;m&quot;, &quot;e&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;name age job.jobname&#x27;.split(&#x27; &#x27;)</span><br><span class=\"line\">// (3) [&quot;name&quot;, &quot;age&quot;, &quot;job.jobname&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;job.jobname&#x27;.split(&#x27;.&#x27;)</span><br><span class=\"line\">(2) [&quot;job&quot;, &quot;jobname&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;name&#x27;.split(&#x27;.&#x27;)</span><br><span class=\"line\">[&quot;name&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;name age job.jobname&#x27;.split(&#x27;&#x27;, 5)</span><br><span class=\"line\">(5) [&quot;n&quot;, &quot;a&quot;, &quot;m&quot;, &quot;e&quot;, &quot; &quot;]</span><br></pre></td></tr></table></figure>\n\n<p>以上应该覆盖了常用的情况，希望以后加深记忆</p>\n","categories":["js"],"tags":["js","code"]},{"title":"常用的命令行清单","url":"/blog-next/2018/11/25/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B8%85%E5%8D%95/","content":"<h4 id=\"进入目录\"><a href=\"#进入目录\" class=\"headerlink\" title=\"进入目录\"></a>进入目录</h4><pre><code>cd \npwd\nmkdir 目录名\nmkdir -p 目录路径\n</code></pre>\n<h4 id=\"查看路径\"><a href=\"#查看路径\" class=\"headerlink\" title=\"查看路径\"></a>查看路径</h4><pre><code>ls\nls -a\nls -l\nls -al\n</code></pre>\n<h4 id=\"创建文件\"><a href=\"#创建文件\" class=\"headerlink\" title=\"创建文件\"></a>创建文件</h4><pre><code>echo &#39;1&#39; &gt; 文件路径\necho &#39;1&#39; &gt;! 文件路径\necho &#39;1&#39; &gt;&gt; 文件路径  // 追加\ntouch 文件名\ntouch 文件名 // 更新时间\n</code></pre>\n<h4 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h4><pre><code>cp 源路径 目标路径\ncp -r 源路径 目标路径\n</code></pre>\n<h4 id=\"移动-重命名\"><a href=\"#移动-重命名\" class=\"headerlink\" title=\"移动/重命名\"></a>移动/重命名</h4><pre><code>mv 源路径 目标路径\n</code></pre>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><pre><code>rm 文件路径\nrm -f 文件路径\nrm -r 目录路径\nrm -rf 目录路径\n</code></pre>\n<h4 id=\"查看目录结构\"><a href=\"#查看目录结构\" class=\"headerlink\" title=\"查看目录结构\"></a>查看目录结构</h4><pre><code>tree // 没有安装的需要安装\n</code></pre>\n<h4 id=\"建立文件软连接\"><a href=\"#建立文件软连接\" class=\"headerlink\" title=\"建立文件软连接\"></a>建立文件软连接</h4><pre><code>ln -s 真实文件 链接 （s 就是 symbolic）\n</code></pre>\n<h4 id=\"下载文件\"><a href=\"#下载文件\" class=\"headerlink\" title=\"下载文件\"></a>下载文件</h4><pre><code>curl -L baidu.com &gt; baidu.html\n    -L location (感觉是下载，不是很清楚具体怎么用))\ncurl -X POST -s -v -H &quot;token: xxx&quot; -- &quot;https://www.baidu.com&quot;\n    -X --request (method)\n    -s --slient (Don&#39;t show progress meter or error messages)\n    -v --verbose (Mostly useful for debugging)\n    -H --header (Extra header to use when getting a web page)\n    -d --data (Sends the specified data)\n</code></pre>\n<h4 id=\"拷贝网页\"><a href=\"#拷贝网页\" class=\"headerlink\" title=\"拷贝网页\"></a>拷贝网页</h4><pre><code>wget -p -H -e robots=off baidu.com \n    --page-requisites\n    --span-hosts\n    --execute command\n    \n</code></pre>\n<h4 id=\"磁盘占用\"><a href=\"#磁盘占用\" class=\"headerlink\" title=\"磁盘占用\"></a>磁盘占用</h4><pre><code>df -kh \n</code></pre>\n<h4 id=\"当前目录大小\"><a href=\"#当前目录大小\" class=\"headerlink\" title=\"当前目录大小\"></a>当前目录大小</h4><pre><code>du -sh  // --short --human-readable --usage\ndu -h\n</code></pre>\n<h4 id=\"电脑相关\"><a href=\"#电脑相关\" class=\"headerlink\" title=\"电脑相关\"></a>电脑相关</h4><pre><code>sudo spctl --master-disable // 安装任何来源的文件\n</code></pre>\n<h4 id=\"http-服务\"><a href=\"#http-服务\" class=\"headerlink\" title=\"http 服务\"></a>http 服务</h4><pre><code>1. http-server \n    -p port \n    -c cache  -c-1 disable-cache\n2. python -m SimpleHTTPServer 8888\n</code></pre>\n<h4 id=\"域名信息\"><a href=\"#域名信息\" class=\"headerlink\" title=\"域名信息\"></a>域名信息</h4><pre><code>whois\n</code></pre>\n<h4 id=\"命令行快捷键\"><a href=\"#命令行快捷键\" class=\"headerlink\" title=\"命令行快捷键\"></a>命令行快捷键</h4><pre><code>ctrl a 行首\nctrl e 行尾\nctrl f 向前\nctrl b 后退\nctrl k 删掉后面\n</code></pre>\n","categories":["工具"],"tags":["G","command"]},{"title":"数据结构","url":"/blog-next/2020/09/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","content":"<h2 id=\"什么是数据结构\"><a href=\"#什么是数据结构\" class=\"headerlink\" title=\"什么是数据结构\"></a>什么是数据结构</h2><p>数据结构研究的是 <strong>数据 + 数据的逻辑结构 + API</strong>，但我们需要研究存储结构以加速 API</p>\n<h2 id=\"逻辑结构举例\"><a href=\"#逻辑结构举例\" class=\"headerlink\" title=\"逻辑结构举例\"></a>逻辑结构举例</h2><ul>\n<li><p>线性表 Linear List</p>\n<ul>\n<li>顺序存储的线性表叫数组</li>\n<li>链接存储的线性表叫链表</li>\n<li>链表又分为单向链表、双向链表、循环链表</li>\n</ul>\n</li>\n<li><p>树形结构</p>\n<ul>\n<li>树 二叉树 二叉搜索树 红黑树 B 树 堆</li>\n</ul>\n</li>\n<li><p>哈希结构</p>\n</li>\n<li><p>图</p>\n</li>\n<li><p>其他</p>\n</li>\n</ul>\n<h2 id=\"存储结构举例\"><a href=\"#存储结构举例\" class=\"headerlink\" title=\"存储结构举例\"></a>存储结构举例</h2><ul>\n<li><p>顺序存储</p>\n<ul>\n<li>用连续的内存存储</li>\n<li>二叉树可以顺序存储</li>\n</ul>\n</li>\n<li><p>链接存储</p>\n<ul>\n<li>用分散的内存存储，中间用地址来链接</li>\n<li>链表 树都可以用这种方式存</li>\n</ul>\n</li>\n<li><p>混合存储</p>\n<ul>\n<li>分散存储，但每一块内存里又是连续内存</li>\n</ul>\n</li>\n</ul>\n","categories":["计算机基础"],"tags":["js","G","数据结构"]},{"title":"数据结构和算法","url":"/blog-next/2018/12/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/","content":"<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><h4 id=\"1-哈希表-Hash-Table\"><a href=\"#1-哈希表-Hash-Table\" class=\"headerlink\" title=\"1. 哈希表 Hash Table\"></a>1. 哈希表 Hash Table</h4><p>应用：计数排序 桶排序 基数排序</p>\n<h4 id=\"2-队列-queue\"><a href=\"#2-队列-queue\" class=\"headerlink\" title=\"2. 队列 queue\"></a>2. 队列 queue</h4><p>先进先出，可以用数组实现，push shift</p>\n<h4 id=\"3-栈-stack\"><a href=\"#3-栈-stack\" class=\"headerlink\" title=\"3. 栈 stack\"></a>3. 栈 stack</h4><p>先进后出，可以用数组实现 push pop</p>\n<h4 id=\"4-链表-Linked-Table\"><a href=\"#4-链表-Linked-Table\" class=\"headerlink\" title=\"4. 链表 Linked Table\"></a>4. 链表 Linked Table</h4><p>用 hash 实现链表，链表头为 head，节点为 node<br>通过改变指向可实现数据的删除</p>\n<h4 id=\"5-树-tree\"><a href=\"#5-树-tree\" class=\"headerlink\" title=\"5. 树 tree\"></a>5. 树 tree</h4><p>概念： 层数、深度、节点个数2^n-1、二叉树、满二叉树、完全二叉树、<br>完全二叉树和满二叉树可以用数据实现，其他树可以用 hash 实现<br>堆排序用到了树</p>\n<h4 id=\"6-堆-heap\"><a href=\"#6-堆-heap\" class=\"headerlink\" title=\"6. 堆 heap\"></a>6. 堆 heap</h4><h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><h4 id=\"1-什么是算法？\"><a href=\"#1-什么是算法？\" class=\"headerlink\" title=\"1. 什么是算法？\"></a>1. 什么是算法？</h4><pre><code>算法的五大特征： 输入 输出 明确性 有限性 有效性（可行性）\n有限性 一个算法必须保证执行有限的步之后结束\n确切性 一个算法的每一步都必须有确切的意义\n输入 一个算法有零个或者一个初始值，以刻画运算对象的初始情况，所谓零个输入是指算法本身给与了初始值\n输出 一个算法有一个或者多个输出 没有输出的算法毫无意义\n可行性 一个算法的任何步骤都可以被分解为基本可执行的操作，每个操作都能在有限的时间内完成\n</code></pre>\n<h4 id=\"2-算法的分类\"><a href=\"#2-算法的分类\" class=\"headerlink\" title=\"2. 算法的分类\"></a>2. 算法的分类</h4><pre><code>分治法 \n动态规划法 \n贪婪算法 \n线性规划法 \n简并法\n</code></pre>\n<h4 id=\"3-关于排序\"><a href=\"#3-关于排序\" class=\"headerlink\" title=\"3. 关于排序\"></a>3. 关于排序</h4><ul>\n<li>冒泡排序</li>\n<li>选择排序</li>\n<li>插入排序</li>\n<li>快速排序</li>\n<li>桶排序 <ul>\n<li>计数排序  复杂度为 n+max 无法统计负数和小数</li>\n<li>基数排序 </li>\n</ul>\n</li>\n<li>归并排序</li>\n<li>希尔排序</li>\n<li>堆排序</li>\n</ul>\n<h4 id=\"4-一些伪代码\"><a href=\"#4-一些伪代码\" class=\"headerlink\" title=\"4. 一些伪代码\"></a>4. 一些伪代码</h4><p><em>现在感觉写伪代码特别好，以前都懒得写，可能就是想不清楚吧 XD</em></p>\n<p>计数排序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = &#123;</span><br><span class=\"line\">  &#x27;0&#x27;: 2,</span><br><span class=\"line\">  &#x27;1&#x27;: 34,</span><br><span class=\"line\">  &#x27;2&#x27;: 5,</span><br><span class=\"line\">  &#x27;3&#x27;: 43,</span><br><span class=\"line\">  &#x27;4&#x27;: 98,</span><br><span class=\"line\">  &#x27;5&#x27;: 21,</span><br><span class=\"line\">  &#x27;length&#x27;: 6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hash = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">index = 0</span><br><span class=\"line\">while index &lt; a.length</span><br><span class=\"line\"> n = a[index]</span><br><span class=\"line\"> if hash[n] == undefined</span><br><span class=\"line\">   hash[n] = 1</span><br><span class=\"line\"> else</span><br><span class=\"line\">   hash[n] = hash[n] + 1</span><br><span class=\"line\"> end</span><br><span class=\"line\"> index = index + 1</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">index2 = 0</span><br><span class=\"line\">new arr = []</span><br><span class=\"line\">while index2 &lt; a的最大值 + 1</span><br><span class=\"line\"> count = hash[index2]</span><br><span class=\"line\"> if count != undefined</span><br><span class=\"line\">   countindex = 0</span><br><span class=\"line\">   while countindex &lt; count</span><br><span class=\"line\">     arr.push(index2)</span><br><span class=\"line\">     countindex + 1</span><br><span class=\"line\">   end</span><br><span class=\"line\"> end</span><br><span class=\"line\"> index2 = index2 + 1</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["计算机基础"],"tags":["js","G","数据结构"]},{"title":"玩转 WebStorm","url":"/blog-next/2019/11/02/%E7%8E%A9%E8%BD%ACwebstorm/","content":"<h3 id=\"webstorm-各种操作\"><a href=\"#webstorm-各种操作\" class=\"headerlink\" title=\"webstorm 各种操作\"></a>webstorm 各种操作</h3><p>两个系统不一样的只要自己试了...</p>\n<h3 id=\"win\"><a href=\"#win\" class=\"headerlink\" title=\"win\"></a>win</h3><ul>\n<li>两次 shift 搜索, .css 搜索所有 css 文件，可以多选打开</li>\n<li>新建文件，选中对应的文件夹， <code>ctrl insert</code></li>\n<li>new Card() 之后按 <code>ctrl alt v</code> 直接给你命名</li>\n<li>删除一行 <code>ctrl y</code></li>\n<li>补全已经写过的单词 ctrl+slash <code>ctrl /</code> (很智能)</li>\n<li>下拉提示 <code>ctrl shift space</code></li>\n<li><code>div&gt;lorem5</code> 可以输出测试用的胡乱文字</li>\n<li><code>ctrl w</code> 增量选择代码块</li>\n<li><code>ctrl e</code> 打开文件</li>\n<li><code>ctrl shift f10</code> run</li>\n<li><code>ctrl shift f8</code> 查看断点</li>\n<li><code>ctrl r</code> 查找替换</li>\n<li><code>ctrl shift n</code> 查找文件</li>\n</ul>\n<h3 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h3><ul>\n<li>`` // 增量选择代码块 // TODO</li>\n<li><code>cmd + shift + ]/[</code> 切换文件</li>\n<li>多行光标 自己配的 clone caret above<code>ctrl alt ↑</code> 和 clone caret below<code>ctrl alt ↓</code></li>\n</ul>\n","categories":["工具"],"tags":["compiler","webstorm"]},{"title":"玩转git","url":"/blog-next/2019/08/13/%E7%8E%A9%E8%BD%ACgit/","content":"<h2 id=\"git-commands\"><a href=\"#git-commands\" class=\"headerlink\" title=\"git-commands\"></a>git-commands</h2><p>skillful at git</p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>工作区：（增删文件和内容）</li>\n<li>暂存区：<code>git add 改动的文件名</code> 此次改动就放到了暂存区</li>\n<li>本地仓库（本地）：<code>git commit 此次改动的描述</code> 此次改动就放到了本地仓库，每一个 commit 就是一个版本</li>\n<li>远程仓库（远程）：<code>git push 远程仓库</code> 此次改动就放到了远程仓库</li>\n<li>commit-id：<code>git log</code> 输出提交的信息</li>\n</ul>\n<h3 id=\"展示帮助信息\"><a href=\"#展示帮助信息\" class=\"headerlink\" title=\"展示帮助信息\"></a>展示帮助信息</h3><pre><code>git help -g\ngit help -a\n</code></pre>\n<h3 id=\"回到远程仓库的状态\"><a href=\"#回到远程仓库的状态\" class=\"headerlink\" title=\"回到远程仓库的状态\"></a>回到远程仓库的状态</h3><pre><code>git reset --hard origin/master\n</code></pre>\n<h3 id=\"重设第一个-commit\"><a href=\"#重设第一个-commit\" class=\"headerlink\" title=\"重设第一个 commit\"></a>重设第一个 commit</h3><p>也就是把所有的改动重新放回工作区，并清空所有的 commit 这样就可以重新开始第一个 commit 了</p>\n<pre><code>git update-ref -d HEAD\n</code></pre>\n<h3 id=\"强制提交\"><a href=\"#强制提交\" class=\"headerlink\" title=\"强制提交\"></a>强制提交</h3><pre><code>git push -f &lt;remote-name&gt; &lt;remote-branch&gt;\n</code></pre>\n<h3 id=\"展示工作区和暂存区的不同\"><a href=\"#展示工作区和暂存区的不同\" class=\"headerlink\" title=\"展示工作区和暂存区的不同\"></a>展示工作区和暂存区的不同</h3><p>输出工作区和暂存区的不同（哪些 add 了，哪些没有 add）</p>\n<pre><code>git diff\n</code></pre>\n<p>展示本地仓库中任意两个 commit 中的文件变动</p>\n<pre><code>git diff &lt;commit-id&gt; &lt;commit-id&gt;&lt;/commit-id&gt;\n</code></pre>\n<h3 id=\"展示工作区、暂存区和本地仓库的不同（这个看着有点乱）\"><a href=\"#展示工作区、暂存区和本地仓库的不同（这个看着有点乱）\" class=\"headerlink\" title=\"展示工作区、暂存区和本地仓库的不同（这个看着有点乱）\"></a>展示工作区、暂存区和本地仓库的不同（这个看着有点乱）</h3><pre><code>git diff HEAD\n</code></pre>\n<h3 id=\"快速切换到上一个分支（感觉还挺好用的）\"><a href=\"#快速切换到上一个分支（感觉还挺好用的）\" class=\"headerlink\" title=\"快速切换到上一个分支（感觉还挺好用的）\"></a>快速切换到上一个分支（感觉还挺好用的）</h3><pre><code>git checkout -\n</code></pre>\n<h3 id=\"删除已经合并到-master-的分支\"><a href=\"#删除已经合并到-master-的分支\" class=\"headerlink\" title=\"删除已经合并到 master 的分支\"></a>删除已经合并到 master 的分支</h3><pre><code>git branch --merged master | grep -v &#39;^\\*\\|  master&#39; | xargs -n 1 git branch -d\n</code></pre>\n<h3 id=\"展示本地分支关联远程仓库的情况\"><a href=\"#展示本地分支关联远程仓库的情况\" class=\"headerlink\" title=\"展示本地分支关联远程仓库的情况\"></a>展示本地分支关联远程仓库的情况</h3><pre><code>git branch -vv\n</code></pre>\n<h3 id=\"关联远程分支\"><a href=\"#关联远程分支\" class=\"headerlink\" title=\"关联远程分支\"></a>关联远程分支</h3><p>关联之后，git branch -vv 就可以展示关联的远程分支名了，同时推送到远程仓库直接：git push，不需要指定远程仓库了。</p>\n<pre><code>git push -u origin master\n</code></pre>\n<h3 id=\"列出所有的远程分支（remote）\"><a href=\"#列出所有的远程分支（remote）\" class=\"headerlink\" title=\"列出所有的远程分支（remote）\"></a>列出所有的远程分支（remote）</h3><pre><code>git branch -r\n</code></pre>\n<h3 id=\"列出本地和远程分支（all）\"><a href=\"#列出本地和远程分支（all）\" class=\"headerlink\" title=\"列出本地和远程分支（all）\"></a>列出本地和远程分支（all）</h3><pre><code>git branch -a\n</code></pre>\n<h3 id=\"查看远程分支和本地分支的对应关系（-a-信息已经够了）\"><a href=\"#查看远程分支和本地分支的对应关系（-a-信息已经够了）\" class=\"headerlink\" title=\"查看远程分支和本地分支的对应关系（-a 信息已经够了）\"></a>查看远程分支和本地分支的对应关系（-a 信息已经够了）</h3><pre><code>git remote show origin\n</code></pre>\n<h3 id=\"远程删除了分支，本地也想删除\"><a href=\"#远程删除了分支，本地也想删除\" class=\"headerlink\" title=\"远程删除了分支，本地也想删除\"></a>远程删除了分支，本地也想删除</h3><pre><code>git remote prune origin\n</code></pre>\n<h3 id=\"创建并切换到本地分支\"><a href=\"#创建并切换到本地分支\" class=\"headerlink\" title=\"创建并切换到本地分支\"></a>创建并切换到本地分支</h3><pre><code>git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;\n</code></pre>\n<h3 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><pre><code>git branch -d &lt;branch-name&gt;\n</code></pre>\n<h3 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h3><pre><code>git push origin --delete &lt;branch-name&gt;\n</code></pre>\n<h3 id=\"重命名本地分支\"><a href=\"#重命名本地分支\" class=\"headerlink\" title=\"重命名本地分支\"></a>重命名本地分支</h3><pre><code>git branch -m &lt;new-branch-name&gt;\n</code></pre>\n<h3 id=\"本地创建标签\"><a href=\"#本地创建标签\" class=\"headerlink\" title=\"本地创建标签\"></a>本地创建标签</h3><pre><code>git tag &lt;version-number&gt;\n</code></pre>\n<p>默认 tag 是打在最近一次 commit 记录上，如果需要指定 commit 打 tag</p>\n<pre><code>git tag -a &lt;version-number&gt; -m &#39;描述&#39; &lt;commit-id&gt;\n</code></pre>\n<h3 id=\"推送标签到远程仓库\"><a href=\"#推送标签到远程仓库\" class=\"headerlink\" title=\"推送标签到远程仓库\"></a>推送标签到远程仓库</h3><pre><code>git push origin &lt;local-version-number&gt;\n</code></pre>\n<p>一次性推送所有</p>\n<pre><code>git push origin --tags\n</code></pre>\n<h3 id=\"删除本地分支-1\"><a href=\"#删除本地分支-1\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><pre><code>git tag -d &lt;tag-name&gt;\n</code></pre>\n<h3 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h3><p>需要先删除本地标签，再删除远程标签</p>\n<pre><code>git push orgin :refs/tags/&lt;tag-name&gt;\n</code></pre>\n<h3 id=\"切回到某个标签（只能-b）\"><a href=\"#切回到某个标签（只能-b）\" class=\"headerlink\" title=\"切回到某个标签（只能 -b）\"></a>切回到某个标签（只能 -b）</h3><pre><code>git checkout -b &lt;branch-name&gt; &lt;tag-name&gt;\n</code></pre>\n<h3 id=\"查看标签\"><a href=\"#查看标签\" class=\"headerlink\" title=\"查看标签\"></a>查看标签</h3><pre><code>git tag\n</code></pre>\n<p>展示当前分支最近的 tag</p>\n<pre><code>git describe --tags --abbrev=0\n</code></pre>\n<p>查看标签的详细信息</p>\n<pre><code>git tag -ln\n</code></pre>\n<hr>\n<h3 id=\"放弃工作区的修改（这个是神器）\"><a href=\"#放弃工作区的修改（这个是神器）\" class=\"headerlink\" title=\"放弃工作区的修改（这个是神器）\"></a>放弃工作区的修改（这个是神器）</h3><pre><code>git checkout &lt;file-name&gt;\n</code></pre>\n<p>放弃所有更改</p>\n<pre><code>git checkout .\n</code></pre>\n<h3 id=\"以新增一个-commit-的方式还原某一个-commit-的修改\"><a href=\"#以新增一个-commit-的方式还原某一个-commit-的修改\" class=\"headerlink\" title=\"以新增一个 commit 的方式还原某一个 commit 的修改\"></a>以新增一个 commit 的方式还原某一个 commit 的修改</h3><pre><code>git revert &lt;commit-id&gt;&lt;/commit-id&gt;\n</code></pre>\n<h3 id=\"回到某个-commit-的状态，并删除后面的-commit\"><a href=\"#回到某个-commit-的状态，并删除后面的-commit\" class=\"headerlink\" title=\"回到某个 commit 的状态，并删除后面的 commit\"></a>回到某个 commit 的状态，并删除后面的 commit</h3><pre><code>git reset &lt;commit-id&gt;  #默认就是-mixed参数。\n\ngit reset --mixed HEAD^  #回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。\n\ngit reset --soft HEAD~3  #回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可\n\ngit reset --hard &lt;commit-id&gt;  #彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容\n</code></pre>\n<h3 id=\"修改上一个-commit-的描述\"><a href=\"#修改上一个-commit-的描述\" class=\"headerlink\" title=\"修改上一个 commit 的描述\"></a>修改上一个 commit 的描述</h3><pre><code>git commit --amend\n</code></pre>\n<h3 id=\"查看某段代码是谁写的\"><a href=\"#查看某段代码是谁写的\" class=\"headerlink\" title=\"查看某段代码是谁写的\"></a>查看某段代码是谁写的</h3><pre><code>git blame &lt;file-name&gt;\n</code></pre>\n<h3 id=\"显示本地更新过-HEAD-的-git-命令记录\"><a href=\"#显示本地更新过-HEAD-的-git-命令记录\" class=\"headerlink\" title=\"显示本地更新过 HEAD 的 git 命令记录\"></a>显示本地更新过 HEAD 的 git 命令记录</h3><p>每次更新了 HEAD 的 git 命令比如 commit、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样，这样你就可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态</p>\n<pre><code>git reflog\n</code></pre>\n<h3 id=\"修改作者名\"><a href=\"#修改作者名\" class=\"headerlink\" title=\"修改作者名\"></a>修改作者名</h3><pre><code>git commit --amend --author=&quot;GerritV&lt;shiguangwei5@gmail.com&gt;&quot;\n</code></pre>\n<h3 id=\"修改远程仓库的-url\"><a href=\"#修改远程仓库的-url\" class=\"headerlink\" title=\"修改远程仓库的 url\"></a>修改远程仓库的 url</h3><pre><code>git remote set-url origin &lt;URL&gt;\n</code></pre>\n<h3 id=\"增加远程仓库\"><a href=\"#增加远程仓库\" class=\"headerlink\" title=\"增加远程仓库\"></a>增加远程仓库</h3><pre><code>git remote add origin &lt;remote-url&gt;\n</code></pre>\n<h3 id=\"列出所有的远程仓库\"><a href=\"#列出所有的远程仓库\" class=\"headerlink\" title=\"列出所有的远程仓库\"></a>列出所有的远程仓库</h3><pre><code>git remote\n</code></pre>\n<h3 id=\"查看两个星期内的改动\"><a href=\"#查看两个星期内的改动\" class=\"headerlink\" title=\"查看两个星期内的改动\"></a>查看两个星期内的改动</h3><pre><code>git whatchanged --since=&quot;2 weeks ago&quot;\n</code></pre>\n<h3 id=\"把-A-分支的某一个-commit-放到-B-分支上\"><a href=\"#把-A-分支的某一个-commit-放到-B-分支上\" class=\"headerlink\" title=\"把 A 分支的某一个 commit 放到 B 分支上\"></a>把 A 分支的某一个 commit 放到 B 分支上</h3><pre><code>git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;\n</code></pre>\n<h3 id=\"存储当前状态，但不用提交-commit\"><a href=\"#存储当前状态，但不用提交-commit\" class=\"headerlink\" title=\"存储当前状态，但不用提交 commit\"></a>存储当前状态，但不用提交 commit</h3><pre><code>git stash\n</code></pre>\n<h3 id=\"存储当前状态，包括-untracked-的文件\"><a href=\"#存储当前状态，包括-untracked-的文件\" class=\"headerlink\" title=\"存储当前状态，包括 untracked 的文件\"></a>存储当前状态，包括 untracked 的文件</h3><pre><code>git stash -u\n</code></pre>\n<h3 id=\"展示所有的-stashes\"><a href=\"#展示所有的-stashes\" class=\"headerlink\" title=\"展示所有的 stashes\"></a>展示所有的 stashes</h3><pre><code>git stash list\n</code></pre>\n<h3 id=\"回到某个-stash-的状态\"><a href=\"#回到某个-stash-的状态\" class=\"headerlink\" title=\"回到某个 stash 的状态\"></a>回到某个 stash 的状态</h3><pre><code>git stash apply &lt;stahs@&#123;version&#125;&gt; // 这个 list 是栈\n</code></pre>\n<h3 id=\"回到最后一个-stash，并删除这个-stash\"><a href=\"#回到最后一个-stash，并删除这个-stash\" class=\"headerlink\" title=\"回到最后一个 stash，并删除这个 stash\"></a>回到最后一个 stash，并删除这个 stash</h3><pre><code>git stash pop（感觉不太好用）\n</code></pre>\n<h3 id=\"删除所有的-stash\"><a href=\"#删除所有的-stash\" class=\"headerlink\" title=\"删除所有的 stash\"></a>删除所有的 stash</h3><pre><code>git stash clear\n</code></pre>\n<h3 id=\"展示简化的-commit-历史\"><a href=\"#展示简化的-commit-历史\" class=\"headerlink\" title=\"展示简化的 commit 历史\"></a>展示简化的 commit 历史</h3><pre><code>git log --pretty=oneline --graph --decorate --all\n和我自己配的 glog 差不多\n</code></pre>\n<h3 id=\"把一个分支到处成一个文件\"><a href=\"#把一个分支到处成一个文件\" class=\"headerlink\" title=\"把一个分支到处成一个文件\"></a>把一个分支到处成一个文件</h3><pre><code>git bundle create &lt;file&gt; &lt;branch-name&gt; // 二进制文件\n</code></pre>\n<h3 id=\"执行-rebase-之前自动-stash\"><a href=\"#执行-rebase-之前自动-stash\" class=\"headerlink\" title=\"执行 rebase 之前自动 stash\"></a>执行 rebase 之前自动 stash</h3><pre><code>git rebase --autostash\n</code></pre>\n<h3 id=\"从远程仓库根据-ID，拉下某一状态，到本地分支\"><a href=\"#从远程仓库根据-ID，拉下某一状态，到本地分支\" class=\"headerlink\" title=\"从远程仓库根据 ID，拉下某一状态，到本地分支\"></a>从远程仓库根据 ID，拉下某一状态，到本地分支</h3><pre><code>git fetch origin pull/&lt;id&gt;/head:&lt;branch-name&gt;\n</code></pre>\n<h3 id=\"详细展示一行中的修改\"><a href=\"#详细展示一行中的修改\" class=\"headerlink\" title=\"详细展示一行中的修改\"></a>详细展示一行中的修改</h3><pre><code>git diff --word-diff\n</code></pre>\n<h3 id=\"清除-gitignore-文件中记录的文件\"><a href=\"#清除-gitignore-文件中记录的文件\" class=\"headerlink\" title=\"清除 gitignore 文件中记录的文件\"></a>清除 gitignore 文件中记录的文件</h3><pre><code>git clean -X -f\n</code></pre>\n<h3 id=\"展示忽略的文件\"><a href=\"#展示忽略的文件\" class=\"headerlink\" title=\"展示忽略的文件\"></a>展示忽略的文件</h3><pre><code>git status --ignored\n</code></pre>\n<h3 id=\"展示所有的-alias-和-configs\"><a href=\"#展示所有的-alias-和-configs\" class=\"headerlink\" title=\"展示所有的 alias 和 configs\"></a>展示所有的 alias 和 configs</h3><pre><code>git config --local --list（当前目录）\ngit config --global --list(全局)\n</code></pre>\n<h3 id=\"commit-历史中显示-branck-有的，但是-branch2-没有-commit\"><a href=\"#commit-历史中显示-branck-有的，但是-branch2-没有-commit\" class=\"headerlink\" title=\"commit 历史中显示 branck 有的，但是 branch2 没有 commit\"></a>commit 历史中显示 branck 有的，但是 branch2 没有 commit</h3><pre><code>igt log &lt;Branch1&gt; &lt;^Branch2&gt;\n</code></pre>\n<h3 id=\"在-commit-log-中显示-GPG-签名\"><a href=\"#在-commit-log-中显示-GPG-签名\" class=\"headerlink\" title=\"在 commit log 中显示 GPG 签名\"></a>在 commit log 中显示 GPG 签名</h3><pre><code>git log --show-signature\n</code></pre>\n<h3 id=\"删除全局设置\"><a href=\"#删除全局设置\" class=\"headerlink\" title=\"删除全局设置\"></a>删除全局设置</h3><pre><code>git config --global --unset &lt;entry-name&gt;\n</code></pre>\n<h3 id=\"新建并切换到新分支上，同时这个分支没有任何-commit\"><a href=\"#新建并切换到新分支上，同时这个分支没有任何-commit\" class=\"headerlink\" title=\"新建并切换到新分支上，同时这个分支没有任何 commit\"></a>新建并切换到新分支上，同时这个分支没有任何 commit</h3><pre><code>git clone --orphan &lt;branch-name&gt;\n</code></pre>\n<h3 id=\"展示任意分支某一文件的内容\"><a href=\"#展示任意分支某一文件的内容\" class=\"headerlink\" title=\"展示任意分支某一文件的内容\"></a>展示任意分支某一文件的内容</h3><pre><code>git show &lt;branch-name&gt;:&lt;file-name&gt;\n</code></pre>\n<h3 id=\"clone-下来指定的单一分支\"><a href=\"#clone-下来指定的单一分支\" class=\"headerlink\" title=\"clone 下来指定的单一分支\"></a>clone 下来指定的单一分支</h3><pre><code>git clone -b &lt;branch-name&gt; --single-branch xxx.git\n</code></pre>\n<h3 id=\"clone-最新一次提交\"><a href=\"#clone-最新一次提交\" class=\"headerlink\" title=\"clone 最新一次提交\"></a>clone 最新一次提交</h3><p>只会 clone 最近一次提交，将减少 clone 的时间</p>\n<pre><code>git clone --depth=1 xxx.git\n</code></pre>\n<h3 id=\"忽略某个文件的改动\"><a href=\"#忽略某个文件的改动\" class=\"headerlink\" title=\"忽略某个文件的改动\"></a>忽略某个文件的改动</h3><p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p>\n<pre><code>git update-index --assume-unchanged path/to/file\n</code></pre>\n<p>恢复 track 指定文件的改动</p>\n<pre><code>git update-index --no-assume-unchanged path/to/file\n</code></pre>\n<h3 id=\"忽略文件的权限改动\"><a href=\"#忽略文件的权限改动\" class=\"headerlink\" title=\"忽略文件的权限改动\"></a>忽略文件的权限改动</h3><p>不再将文件的权限变化视作改动</p>\n<pre><code>git config core.fileMode false\n</code></pre>\n<h3 id=\"以最后提交的顺序列出所有-Git-分支\"><a href=\"#以最后提交的顺序列出所有-Git-分支\" class=\"headerlink\" title=\"以最后提交的顺序列出所有 Git 分支\"></a>以最后提交的顺序列出所有 Git 分支</h3><pre><code>git for-each-ref --sort=-committerdate --format=&#39;%(refname:short)&#39; refs/heads/\n</code></pre>\n<h3 id=\"在-commit-log-中查找相关内容（这个不错）\"><a href=\"#在-commit-log-中查找相关内容（这个不错）\" class=\"headerlink\" title=\"在 commit log 中查找相关内容（这个不错）\"></a>在 commit log 中查找相关内容（这个不错）</h3><pre><code>git log --all --grep=&#39;&lt;given-text&gt;&#39;\n</code></pre>\n<h3 id=\"把暂存区的指定-file-放到工作区去\"><a href=\"#把暂存区的指定-file-放到工作区去\" class=\"headerlink\" title=\"把暂存区的指定 file 放到工作区去\"></a>把暂存区的指定 file 放到工作区去</h3><p>不加参数 默认是 -mixed</p>\n<pre><code>git reset &lt;file-name&gt;\n</code></pre>\n<h3 id=\"强制推送\"><a href=\"#强制推送\" class=\"headerlink\" title=\"强制推送\"></a>强制推送</h3><pre><code>git push -f &lt;remote-name&gt; &lt;branch-name&gt;\n</code></pre>\n<h3 id=\"git-配置-http-he-socks-代理\"><a href=\"#git-配置-http-he-socks-代理\" class=\"headerlink\" title=\"git 配置 http he socks 代理\"></a>git 配置 http he socks 代理</h3><pre><code>git config --global https.proxy &#39;http://127.0.0.1:8001&#39;   # 适用于 privoxy 将 socks 协议转为 http 协议的 http 端口\ngit config --global http.proxy &#39;http://127.0.0.1:8001&#39;\ngit config --global socks.proxy &quot;127.0.0.1:1080&quot;\n</code></pre>\n<h3 id=\"git-配置-ssh-代理\"><a href=\"#git-配置-ssh-代理\" class=\"headerlink\" title=\"git 配置 ssh 代理\"></a>git 配置 ssh 代理</h3><pre><code>$ cat ~/.ssh/config\nHost gitlab.com\nProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p    # 直接使用 shadowsocks 提供的 socks5 代理端口\n\nHost github.com\nProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p\n</code></pre>\n<h3 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h3><p><img src=\"https://i.loli.net/2019/08/13/bVTuUGZzegyPA1f.png\" alt=\"git.png\" loading=\"lazy\"></p>\n","categories":["工具"],"tags":["command","git"]},{"title":"移动端 1px 边框","url":"/blog-next/2019/04/23/%E7%A7%BB%E5%8A%A8%E7%AB%AF-1px-%E8%BE%B9%E6%A1%86/","content":"<p>今天再一次遇到了 1px 的问题，突然有点想不起来，从网上查了一下总结一下常用的方法</p>\n<h3 id=\"0-5px-边框\"><a href=\"#0-5px-边框\" class=\"headerlink\" title=\"0.5px 边框\"></a>0.5px 边框</h3><p><code>border-width: 0.5px;</code> 直接写，但是兼容性差，安卓不行</p>\n<h3 id=\"border-image\"><a href=\"#border-image\" class=\"headerlink\" title=\"border-image\"></a>border-image</h3><p>也可以用，但是太麻烦了，而且圆角还会模糊</p>\n<h3 id=\"background-image\"><a href=\"#background-image\" class=\"headerlink\" title=\"background-image\"></a>background-image</h3><p>基本和上面一样，替换图片太麻烦了，累</p>\n<h3 id=\"background-设置渐变\"><a href=\"#background-设置渐变\" class=\"headerlink\" title=\"background 设置渐变\"></a>background 设置渐变</h3><p>其实本质和 background-image 是一样的，但是这个可以用一下，原理就是一半有颜色，一半透明</p>\n<h3 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h3><p><code>box-shadow: inset 0px -1px 1px -1px #c8c7cc;</code> 效果也不错，这样的话不能设置背景，而且放大之后会有毛边，即使在移动端不会放大</p>\n<h3 id=\"viewport-rem\"><a href=\"#viewport-rem\" class=\"headerlink\" title=\"viewport + rem\"></a>viewport + rem</h3><p>这种方式就比较无脑了，除了用rem 没什么缺点</p>\n<h3 id=\"伪类加-transform-实现\"><a href=\"#伪类加-transform-实现\" class=\"headerlink\" title=\"伪类加 transform 实现\"></a>伪类加 transform 实现</h3><p>这个还是我最喜欢的方式 也是兼容性最好的方式<br><strong>利用 <code>-webkit-device-pixel-ratio</code> 或者 <code>min-resolution</code></strong> scale 以达到目的<br>下面截图来自 MDN<br><img src=\"https://i.loli.net/2019/04/23/5cbec6fa33545.jpg\" alt=\"20190423160334.jpg\" loading=\"lazy\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.border-top-1px, .border-right-1px, .border-bottom-1px, .border-left-1px</span><br><span class=\"line\">  position: relative</span><br><span class=\"line\">  &amp;::before, &amp;::after</span><br><span class=\"line\">    content: &quot;&quot;</span><br><span class=\"line\">    display: block</span><br><span class=\"line\">    position: absolute</span><br><span class=\"line\">    transform-origin: 0 0</span><br><span class=\"line\"></span><br><span class=\"line\">.border-top-1px</span><br><span class=\"line\">  &amp;::before</span><br><span class=\"line\">    border-top: 1PX solid $color-row-line</span><br><span class=\"line\">    left: 0</span><br><span class=\"line\">    top: 0</span><br><span class=\"line\">    width: 100%</span><br><span class=\"line\">    transform-origin: 0 top</span><br><span class=\"line\"></span><br><span class=\"line\">.border-right-1px</span><br><span class=\"line\">  &amp;::after</span><br><span class=\"line\">    border-right: 1PX solid $color-col-line</span><br><span class=\"line\">    top: 0</span><br><span class=\"line\">    right: 0</span><br><span class=\"line\">    height: 100%</span><br><span class=\"line\">    transform-origin: right 0</span><br><span class=\"line\"></span><br><span class=\"line\">.border-bottom-1px</span><br><span class=\"line\">  &amp;::after</span><br><span class=\"line\">    border-bottom: 1PX solid $color-row-line</span><br><span class=\"line\">    left: 0</span><br><span class=\"line\">    bottom: 0</span><br><span class=\"line\">    width: 100%</span><br><span class=\"line\">    transform-origin: 0 bottom</span><br><span class=\"line\"></span><br><span class=\"line\">.border-left-1px</span><br><span class=\"line\">  &amp;::before</span><br><span class=\"line\">    border-left: 1PX solid $color-col-line</span><br><span class=\"line\">    top: 0</span><br><span class=\"line\">    left: 0</span><br><span class=\"line\">    height: 100%</span><br><span class=\"line\">    transform-origin: left 0</span><br><span class=\"line\"></span><br><span class=\"line\">@media (min-resolution: 2dppx)</span><br><span class=\"line\">  .border-top-1px</span><br><span class=\"line\">    &amp;::before</span><br><span class=\"line\">      width: 200%</span><br><span class=\"line\">      transform: scale(.5)</span><br><span class=\"line\">  .border-right-1px</span><br><span class=\"line\">    &amp;::after</span><br><span class=\"line\">      height: 200%</span><br><span class=\"line\">      transform: scale(.5)</span><br><span class=\"line\">  .border-bottom-1px</span><br><span class=\"line\">    &amp;::after</span><br><span class=\"line\">      width: 200%</span><br><span class=\"line\">      transform: scale(.5)</span><br><span class=\"line\">  .border-left-1px</span><br><span class=\"line\">    &amp;::before</span><br><span class=\"line\">      height: 200%</span><br><span class=\"line\">      transform: scale(.5)****</span><br><span class=\"line\"></span><br><span class=\"line\">@media (min-resolution: 3dppx)</span><br><span class=\"line\">  .border-top-1px</span><br><span class=\"line\">    &amp;::before</span><br><span class=\"line\">      width: 300%</span><br><span class=\"line\">      transform: scale(.333)</span><br><span class=\"line\">  .border-right-1px</span><br><span class=\"line\">    &amp;::after</span><br><span class=\"line\">      height: 300%</span><br><span class=\"line\">      transform: scale(.333)</span><br><span class=\"line\">  .border-bottom-1px</span><br><span class=\"line\">    &amp;::after</span><br><span class=\"line\">      width: 300%</span><br><span class=\"line\">      transform: scale(.333)</span><br><span class=\"line\">  .border-left-1px</span><br><span class=\"line\">    &amp;::before</span><br><span class=\"line\">      height: 300%</span><br><span class=\"line\">      transform: scale(.333)</span><br></pre></td></tr></table></figure>\n","categories":["css"],"tags":["css","h5"]},{"title":"算法之汉诺塔问题和斐波那契数列","url":"/blog-next/2020/09/24/%E7%AE%97%E6%B3%95/","content":"<h2 id=\"算法题通过思考逻辑\"><a href=\"#算法题通过思考逻辑\" class=\"headerlink\" title=\"算法题通过思考逻辑\"></a>算法题通过思考逻辑</h2><h3 id=\"普通人类思维\"><a href=\"#普通人类思维\" class=\"headerlink\" title=\"普通人类思维\"></a>普通人类思维</h3><ul>\n<li>将人类的思维过程用严谨的语言表达出来，将其翻译成代码或伪代码</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">23</span>, <span class=\"number\">99</span>, <span class=\"number\">17</span>, <span class=\"number\">28</span>, <span class=\"number\">84</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">max</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array[i] &gt; result) &#123;</span><br><span class=\"line\">      result = array[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">max(array); <span class=\"comment\">// 99</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数学思维\"><a href=\"#数学思维\" class=\"headerlink\" title=\"数学思维\"></a>数学思维</h3><ul>\n<li>利用数学知识</li>\n<li>找到对应的数学公式</li>\n<li>像解题一样解出来</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">23</span>, <span class=\"number\">99</span>, <span class=\"number\">17</span>, <span class=\"number\">28</span>, <span class=\"number\">84</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">max</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (array.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array[<span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> otherMax = max(array.slice(<span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array[<span class=\"number\">0</span>] &gt; otherMax ? array[<span class=\"number\">0</span>] : otherMax;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">max(array); <span class=\"comment\">// 99</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新语法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">23</span>, <span class=\"number\">99</span>, <span class=\"number\">17</span>, <span class=\"number\">28</span>, <span class=\"number\">84</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> maxOfTwo = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> (a &gt; b ? a : b);</span><br><span class=\"line\"><span class=\"keyword\">const</span> max = <span class=\"function\">(<span class=\"params\">[first, ...others]</span>) =&gt;</span></span><br><span class=\"line\">  others.length &lt; <span class=\"number\">1</span> ? first : maxOfTwo(first, max(others));</span><br><span class=\"line\">max(array); <span class=\"comment\">// 99</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如何证明这个算法是对的？\"><a href=\"#如何证明这个算法是对的？\" class=\"headerlink\" title=\"如何证明这个算法是对的？\"></a>如何证明这个算法是对的？</h4><ul>\n<li>首先证明公式是对的，然后证明代码和公式是等价的</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>数学方法更容易通过形式化证明保证代码的正确性</li>\n<li>但数学方法效率不一定高（但可以优化）</li>\n<li>数学方法往往不够直观，普通人并没有什么数学知识</li>\n<li>一般不能对变量进行二次赋值，因为数学里没有</li>\n</ul>\n<p><strong>这两种方法没有绝对哪种比哪种好</strong></p>\n<h2 id=\"汉诺塔\"><a href=\"#汉诺塔\" class=\"headerlink\" title=\"汉诺塔\"></a>汉诺塔</h2><p>有三根杆子 A B C，A 杆上有 N 个圆盘，盘子由下到上依次变小，要求按照下列规则将所有圆盘移至 C 杆： 每次只能移动一个圆盘，大盘不能叠在小盘上面<br>问： 如何移动？最少要移动多少次？</p>\n<p>人类思维：<br>先把 A 上面的 N-1 个移动到 B，然后把最大的移动到 C，最后把 B 上面的 N-1 移到 C。那怎么把 A 上面的 N-1 移到 B？把 B 上面的 N-1 移到 C?<br>先把 A 上面的 N-2 移到 C，然后把最大的移到 B，最后把 C 上面的 N-2 移到 B<br>发现想不通，换数学思维</p>\n<p>数学思维：<br>把 A 顶部的盘移到 B，记为 AB<br>AB + AC 表示先 AB 然后 AC<br>h(n, A, B, C) 表示 n 个 盘在 A，想去 C，B 无用<br>h(1, A, B, C) = AC<br>h(2, A, B, C) = h(1, A, C, B) + AC + h(1, B, A, C)<br>h(2, A, B, C) = AB + AC + BC<br>h(3, A, B, C) = h(2, A, C, B) + AC + h(2, B, A, C)<br>h(n, A, B, C) = h(n-1, A, C, B) + AC + h(n-1, B, A, C)</p>\n<p><strong>归纳：发现 n 的问题总可以化成两个 n-1 的问题</strong></p>\n<p>公式：<br><img src=\"https://i.loli.net/2020/09/24/p3tMSGwvUDnKfhP.png\" alt=\"微信图片_20200924180138.png\" loading=\"lazy\"></p>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">h = <span class=\"function\">(<span class=\"params\">n, <span class=\"keyword\">from</span>, cache, to</span>) =&gt;</span></span><br><span class=\"line\">  n === <span class=\"number\">1</span></span><br><span class=\"line\">    ? <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">from</span>&#125;</span><span class=\"subst\">$&#123;to&#125;</span>`</span></span><br><span class=\"line\">    : h(n - <span class=\"number\">1</span>, <span class=\"keyword\">from</span>, to, cache) +</span><br><span class=\"line\">      <span class=\"string\">&quot;,&quot;</span> +</span><br><span class=\"line\">      <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">from</span>&#125;</span><span class=\"subst\">$&#123;to&#125;</span>`</span> +</span><br><span class=\"line\">      h(n - <span class=\"number\">1</span>, cache, <span class=\"keyword\">from</span>, to);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"斐波那契\"><a href=\"#斐波那契\" class=\"headerlink\" title=\"斐波那契\"></a>斐波那契</h2><p>数学思维：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">f = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> (n === <span class=\"number\">0</span> ? <span class=\"number\">0</span> : n === <span class=\"number\">1</span> ? <span class=\"number\">1</span> : f(n - <span class=\"number\">1</span>) + f(n - <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n<p>你可以通过记忆化来优化它，空间换时间</p>\n<p>人类思路：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">f = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> array = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    array[i] = array[i - <span class=\"number\">1</span>] + array[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array[n];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><table>\n<thead>\n<tr>\n<th>数学思路更注重形式（结构）</th>\n<th>人类思维更注重过程（命令）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>更加优雅简单</td>\n<td>更容易执行被理解</td>\n</tr>\n<tr>\n<td>其实更容易优化</td>\n<td>对人脑负担更重</td>\n</tr>\n<tr>\n<td>投身于数学，有无限广阔的可能性</td>\n<td>被人类的经验所局限</td>\n</tr>\n</tbody></table>\n<p>但复杂度是守恒的：复杂度不会因为任何原因降低<br>你愿意吧复杂度放在人脑这边还是机器那边<br>实际上，我们可以结合两种思路，各取所长</p>\n<h2 id=\"函数调用栈\"><a href=\"#函数调用栈\" class=\"headerlink\" title=\"函数调用栈\"></a>函数调用栈</h2><p>大部分浏览器是在 10000-30000 之间，大部分调用栈是够用的，一旦不够用，程序只能中止了</p>\n<p>如何减少压栈？</p>\n<ul>\n<li>不用递归<br>用循环代替递归</li>\n<li>用尾递归+尾递归优化<br>用尾递归代替递归</li>\n</ul>\n<h3 id=\"循环代替递归\"><a href=\"#循环代替递归\" class=\"headerlink\" title=\"循环代替递归\"></a>循环代替递归</h3><p>原代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">f = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> (n === <span class=\"number\">1</span> ? <span class=\"number\">1</span> : f(n - <span class=\"number\">1</span>) * n);</span><br></pre></td></tr></table></figure>\n\n<p>新代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">f = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    result = result * i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"迭代代替递归\"><a href=\"#迭代代替递归\" class=\"headerlink\" title=\"迭代代替递归\"></a>迭代代替递归</h3><p>分析上面循环,结果如下</p>\n<table>\n<thead>\n<tr>\n<th>i</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>result</td>\n<td>1</td>\n<td>2</td>\n<td>6</td>\n<td>24</td>\n<td>120</td>\n</tr>\n</tbody></table>\n<p>只有 i 和 result 在变，而且是一起变</p>\n<p>写出循环迭代代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">f = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">1</span>,</span><br><span class=\"line\">    result = <span class=\"number\">1</span>,</span><br><span class=\"line\">    nexti,</span><br><span class=\"line\">    nextResult;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt;= n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    nexti = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    nextResult = nexti * result;</span><br><span class=\"line\">    i = nexti;</span><br><span class=\"line\">    result = nextResult;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>尾递归迭代代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">f = <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  iterate = <span class=\"function\">(<span class=\"params\">i, n, result</span>) =&gt;</span></span><br><span class=\"line\">    i === n ? result : iterate(i + <span class=\"number\">1</span>, n, result * (i + <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> iterate(<span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>递归需要压栈，而栈的长度有限</li>\n<li>可以使用循环代替递归</li>\n<li>可以使用迭代代替普通递归</li>\n<li>迭代用循环实现，也可以用递归</li>\n<li>迭代理论上不需要压栈，但实际上有</li>\n<li>尾调用优化可以消除不必要的压栈</li>\n<li>JS 没有完全普及尾调用优化</li>\n</ul>\n<h2 id=\"递归的缺点及优化\"><a href=\"#递归的缺点及优化\" class=\"headerlink\" title=\"递归的缺点及优化\"></a>递归的缺点及优化</h2><p>堆栈溢出和重复计算</p>\n<p>使用记忆化消除重复计算</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">memorize = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</span><br><span class=\"line\">  cache = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (first, ...args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(first <span class=\"keyword\">in</span> cache)) &#123;</span><br><span class=\"line\">      cache[first] = fn(first, ...args)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cache[first]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f = memorize(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"params\">n</span> =&gt;</span></span><br><span class=\"line\">    n === <span class=\"number\">0</span> ? <span class=\"number\">0</span> :</span><br><span class=\"line\">    n === <span class=\"number\">1</span> ? <span class=\"number\">1</span> :</span><br><span class=\"line\">      f(n-<span class=\"number\">1</span>) + f(n-<span class=\"number\">2</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>算法的思路</p>\n<ul>\n<li>人类思路</li>\n<li>数学思路</li>\n</ul>\n<p>递归</p>\n<ul>\n<li>先递进再归纳</li>\n<li>stcak overflow</li>\n<li>尾调用优化</li>\n<li>循环很有用</li>\n<li>记忆化很有用</li>\n<li>迭代要理解（尾调用一般就是迭代）</li>\n</ul>\n","categories":["计算机基础"],"tags":["js","G","算法"]},{"title":"计算机数据存储","url":"/blog-next/2018/11/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/","content":"<h3 id=\"存储数字\"><a href=\"#存储数字\" class=\"headerlink\" title=\"存储数字\"></a>存储数字</h3><p>以二进制存储</p>\n<p>37 &gt;&gt; 100101<br>-37 &gt;&gt; -100101 // 计算机只能存 0 1，所以存的是 2 的补码后的数<br>0.75 &gt;&gt; 0.11 // 浮点数同理也是计算后的</p>\n<h3 id=\"关于原码，反码，补码\"><a href=\"#关于原码，反码，补码\" class=\"headerlink\" title=\"关于原码，反码，补码\"></a>关于原码，反码，补码</h3><p><img src=\"https://i.loli.net/2019/10/17/cj4YbIydPAtLwGh.jpg\" alt=\"d3617d2ceb02f6129c9b41361804cbe2_hd.jpg\" loading=\"lazy\"></p>\n<h3 id=\"存储字符\"><a href=\"#存储字符\" class=\"headerlink\" title=\"存储字符\"></a>存储字符</h3><p>ASCII 码有 128 个，对应 0 - 128, 一个字节就可表示</p>\n<h3 id=\"存储汉字\"><a href=\"#存储汉字\" class=\"headerlink\" title=\"存储汉字\"></a>存储汉字</h3><p>GBK 有 6000 多个汉字，可以用两个字节表示</p>\n<h3 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h3><p>Unicode 本来用 4 个字节表示<br>如果用 UTF-8 就可以灵活用 1-4 个字节表示，可以节省内存，比较高效</p>\n<h3 id=\"es5-的问题\"><a href=\"#es5-的问题\" class=\"headerlink\" title=\"es5 的问题\"></a>es5 的问题</h3><p>js 使用了 UCS-2 的编码方式，只能表示两个字节的字符，es6 解决了这个问题，所以 <code>for (let a of string)</code> 就没问题了</p>\n<h3 id=\"一些想法\"><a href=\"#一些想法\" class=\"headerlink\" title=\"一些想法\"></a>一些想法</h3><ul>\n<li><p>看完这个，突然对文件大小有了更加清晰的看法，想起了以前的一个题</p>\n<p>function getSize(size) {<br>if (!size) {<br>return &#39;&#39;<br>}</p>\n<pre><code>var n = 1024\n\nif (size &lt; n) &#123;\n  return size + &#39;B&#39;\n&#125; else if (size &lt; Math.pow(n, 2)) &#123;\n  return Math.floor(size / n) + &#39;KB&#39;\n&#125; else if (size &lt; Math.pow(n, 3)) &#123;\n  return Math.floor(size / Math.pow(n, 2)) + &#39;MB&#39;\n&#125; else if (size &lt; Math.pow(n, 4)) &#123;\n  return Math.floor(size / Math.pow(n, 3)) + &#39;GB&#39;\n&#125; else &#123;\n  return Math.floor(size / Math.pow(n, 4)) + &#39;TB&#39;\n&#125;\n</code></pre>\n<p>}</p>\n</li>\n</ul>\n","categories":["计算机基础"],"tags":["js","G","code"]},{"title":"菜谱","url":"/blog-next/2020/03/03/%E8%8F%9C%E8%B0%B1/","content":"<h2 id=\"炝炒土豆丝\"><a href=\"#炝炒土豆丝\" class=\"headerlink\" title=\"炝炒土豆丝\"></a>炝炒土豆丝</h2><ol>\n<li>土豆切丝，不能太细，清水洗净（去除土豆的淀粉，口感更脆）</li>\n<li>开水加白醋，焯水 20s 左右，捞出</li>\n<li>热油 7 分左右，加干辣椒和蒜瓣，以及青花椒，接着加入土豆丝，中火炒 40s 至断生</li>\n<li>调味，加入盐，少许白糖提鲜，生抽，加入切好的小葱，翻炒几下出锅</li>\n</ol>\n<h2 id=\"青椒炒鸡蛋\"><a href=\"#青椒炒鸡蛋\" class=\"headerlink\" title=\"青椒炒鸡蛋\"></a>青椒炒鸡蛋</h2><ol>\n<li>鸡蛋加白醋 少许胡椒粉 盐，打至起泡</li>\n<li>油里煎 40s 左右倒出</li>\n<li>少油炒青椒，加入蒜姜葱，大火炒至断生 加入鸡蛋</li>\n<li>加入少许盐 少许糖，酱油 翻炒 出锅</li>\n</ol>\n<h2 id=\"韭黄炒鸡蛋\"><a href=\"#韭黄炒鸡蛋\" class=\"headerlink\" title=\"韭黄炒鸡蛋\"></a>韭黄炒鸡蛋</h2><ol>\n<li>先炒鸡蛋倒出备用</li>\n<li>少油加入蒜葱和辣椒，放入韭黄炒趴</li>\n<li>调味，加入鸡蛋翻炒 出锅</li>\n</ol>\n<h2 id=\"山西过油肉\"><a href=\"#山西过油肉\" class=\"headerlink\" title=\"山西过油肉\"></a>山西过油肉</h2><ol>\n<li>里脊肉切片,加料酒,酱油,盐,胡椒粉腌制十分钟</li>\n<li>炸肉片放出备用</li>\n<li>底油炒葱姜蒜,放入洋葱炒至透亮,放入木耳,肉片</li>\n<li>翻炒加入汘汁, 收汤后加入香醋出锅</li>\n</ol>\n<h2 id=\"白灼生菜\"><a href=\"#白灼生菜\" class=\"headerlink\" title=\"白灼生菜\"></a>白灼生菜</h2><ol>\n<li>生菜热水过一下, 5-6 秒的样子</li>\n<li>加入酱油,盐调好的汁,白蒜末撒上面</li>\n<li>上面浇点热油, 搅拌均匀 ok</li>\n</ol>\n<h2 id=\"蛋炒饭\"><a href=\"#蛋炒饭\" class=\"headerlink\" title=\"蛋炒饭\"></a>蛋炒饭</h2><ol>\n<li>油热后放入鸡蛋打碎，放入腊肠火腿 玉米粒和葱姜蒜</li>\n<li>翻炒均匀加入米饭和香菇粒</li>\n<li>小火炒几分钟至有锅气 加入酱油</li>\n<li>大火翻炒均匀加入葱花翻炒几下 出锅</li>\n</ol>\n<h2 id=\"炒五花肉\"><a href=\"#炒五花肉\" class=\"headerlink\" title=\"炒五花肉\"></a>炒五花肉</h2><ol>\n<li>锅里放入花椒八角桂皮干烤一会，放入热水，煮成花椒水</li>\n<li>锅里加少许植物油，油热只有放入葱姜末，放入料酒腌制好的五花肉</li>\n<li>炒至五花肉变熟，加入准备好的花椒水，开大火煮</li>\n<li>煮至汤汁收紧后加入适量酱油、干辣椒和蒜末翻炒均匀</li>\n<li>加入适量香醋，出锅</li>\n</ol>\n<h2 id=\"西葫芦木耳炒鸡蛋\"><a href=\"#西葫芦木耳炒鸡蛋\" class=\"headerlink\" title=\"西葫芦木耳炒鸡蛋\"></a>西葫芦木耳炒鸡蛋</h2><ol>\n<li>木耳焯水，放入凉水备用，鸡蛋炒好备用</li>\n<li>少油烧热放入蒜末和干辣椒爆香，放入西葫芦片</li>\n<li>翻炒至西葫芦熟，小火调味，加入酱油 盐 醋， 加入木耳和青椒， 翻炒均匀</li>\n<li>加入炒好的鸡蛋翻炒均匀出锅</li>\n</ol>\n<h2 id=\"香菇油菜\"><a href=\"#香菇油菜\" class=\"headerlink\" title=\"香菇油菜\"></a>香菇油菜</h2><ol>\n<li>香菇和青菜焯水</li>\n<li>少油烧热 加入葱姜蒜爆香 加入香菇</li>\n<li>翻炒均匀调味 加入盐 酱油 鸡精 香醋 翻炒后加入小油菜</li>\n<li>加点淀粉水勾芡，翻炒均匀 出锅</li>\n</ol>\n","categories":["综合"],"tags":["essay","生活"]},{"title":"认识React","url":"/blog-next/2019/07/09/%E8%AE%A4%E8%AF%86React/","content":"<h3 id=\"认识-React\"><a href=\"#认识-React\" class=\"headerlink\" title=\"认识 React\"></a>认识 React</h3><p>先做一个小小的 dom 展示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import React from &#x27;react&#x27;;</span><br><span class=\"line\">import ReactDOM from &#x27;react-dom&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Box extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props)</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      number: 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  add() &#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      number: this.state.number + 1</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&quot;red&quot;&gt;</span><br><span class=\"line\">        &lt;span&gt;&#123;this.state.number&#125;&lt;/span&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;this.add.bind(this)&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">        &lt;strong&gt;&#123;this.props.name&#125;&lt;/strong&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function App(props) &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className=&quot;App&quot;&gt;</span><br><span class=\"line\">      name is &#123;props.name&#125;</span><br><span class=\"line\">      &lt;Box name=&quot;box is god&quot;/&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(&lt;App name=&quot;app&quot;/&gt;, document.getElementById(&#x27;root&#x27;));</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>可以用标签的写法来写 dom，都对应虚拟 dom，js 的语法要在 {} 中表示</li>\n<li>组件可以用函数实现，函数就是组件，组件对应的属性会被抽象为一个对象，作为函数的参数传递</li>\n<li>组件可以用 class 实现，且必须继承自 React.Component</li>\n<li>一般外面的属性用 props 表示，内部的属性用 state 表示</li>\n<li>组件的属性要写在 constructor 构造函数里，作为实例的属性</li>\n<li>必须要有一个 render 函数，用来书写 dom 结构</li>\n<li>默认在组件中使用事件书写回调时会把 this 指为 undefined，this.add.call(undefined, 1), 所以要写箭头函数，或者手动 bind this</li>\n<li>修改数据要用 setState, 默认只能写一次，书写多次要给 setState 传一个参数，用来接收和返回 state</li>\n</ol>\n<p>今天暂时就这样...</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9yZWFjdC1kZW1vLTI=\">demo 仓库<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["React"],"tags":["G","React"]},{"title":"论语·季氏第十六","url":"/blog-next/2019/01/10/%E8%AE%BA%E8%AF%AD%C2%B7%E5%AD%A3%E6%B0%8F%E7%AC%AC%E5%8D%81%E5%85%AD/","content":"<p>季氏将伐颛臾，冉有，季路见于孔子曰：“季式将有事于颛臾”。<br>孔子曰：“求！无乃尔是过与？夫颛臾，昔者先王以为东蒙主，且在城邦之中矣，是社稷之臣也。何以伐为？”。<br>冉有曰：“夫子欲之，吾二臣皆不欲也”。<br>孔子曰：“求！周任有言曰：‘陈力就列，不能者止。’危而不持，颠而不扶，则将焉用彼相矣？且尔言过矣，虎兕(sì)出于柙(xiá)，龟玉毁于椟(dú)中，是谁之过与？”<br>冉有曰：“今夫颛臾，固而近于费。今不取，后世必为子孙忧”。<br>孔子曰：“求！君子疾夫舍曰欲之而必为之辞。丘也闻有国有家者，不患寡而患不均，不患贫而患不安。盖均无贫，和无寡，安无倾。夫如是，故远人不服，则修文德以来之。既来之，则安之。今由与求也，相夫子，远人不服而不能来也，邦分崩离析而不能守也；而谋动干戈于邦内。吾恐季孙之忧，不在颛臾，而在萧墙之内也。”</p>\n","categories":["综合"],"tags":["essay","论语"]},{"title":"面向对象之构造函数的由来","url":"/blog-next/2019/10/31/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%B1%E6%9D%A5/","content":"<blockquote>\n<p>对象和对象的关系（原型链）<br>对象和函数的关系（this）</p>\n</blockquote>\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><pre><code>var person1 = &#123;\n  name: &#39;frank&#39;,\n  age: 18,\n  isAdult: true,\n  say() &#123;\n    console.log(`I am $&#123;this.name&#125;`)\n  &#125;\n&#125;\nvar person2 = &#123;\n  name: &#39;jack&#39;,\n  age: 18,\n  isAdult: true,\n  say() &#123;\n    console.log(`I am $&#123;this.name&#125;`)\n  &#125;\n&#125;\nvar person3 = &#123;&#125;\nvar person4 = &#123;&#125;\n</code></pre>\n<p>这些对象太类似了，于是我们发明了构造函数（返回对象的函数，一般首字母大写）</p>\n<pre><code>function createPerson(name, age) &#123;\n  var object = &#123;&#125;\n  object.name = name\n  object.age = age\n  object.isAdult = age &gt;= 18 // 这就是计算属性，因为是计算出来的属性\n  object.say = function () &#123;\n    console.log(`I am $&#123;this.name&#125;`) // this 可能是 object 也可能不是\n  &#125;\n\n  return object\n&#125;\n</code></pre>\n<p>没有必要给每个 object 创建一个匿名函数（object.say 指向的匿名函数），所以我们创建一个对象，包含所有共用属性</p>\n<pre><code>var personCommonAttrs = &#123;\n  say: function () &#123;\n    console.log(`I am $&#123;this.name&#125;`)\n  &#125;\n&#125;\nfunction createPerson(name, age) &#123;\n  var object = &#123;&#125;\n  object.name = name\n  object.age = age\n  object.isAdult = age &gt;= 18\n  object.__proto__ = personCommonAttrs // __proto__ 是私有属性，不要在生产环境使用 __proto__, 请使用 Object.create\n\n  return object\n&#125;\n</code></pre>\n<p>很多人觉得不爽，把 personCommonAttrs 改为 createPerson 的属性</p>\n<pre><code>createPerson.personCommonAttrs = &#123;\n  say: function () &#123;\n    console.log(`I am $&#123;this.name&#125;`)\n  &#125;\n&#125;\nfunction createPerson(name, age) &#123;\n  var object = &#123;&#125;\n  object.name = name\n  object.age = age\n  object.isAdult = age &gt;= 18\n  object.__proto__ = personCommonAttrs // __proto__ 是私有属性，不要在生产环境使用 __proto__, 请使用 Object.create\n\n  return object\n&#125;\n</code></pre>\n<p>接下来我们创建狗</p>\n<pre><code>function createDog(name, age) &#123;\n  var object = &#123;&#125;\n  object.name = name\n  object.name = age\n  object.isAdult = age &gt;= 2.6\n  object.__proto__ = createDog.dogCommonAttr\n\n  return object\n&#125;\ncreateDog.dogCommonAttr = &#123;\n  say: function () &#123;\n    console.log(`狗子汪汪汪`)\n  &#125;\n&#125;\n</code></pre>\n<p>对比人的代码和狗的代码，你会发现 xxxCommonAttrs 这个名字完全就是多此一举，不如叫做 personCommonAttrs 然后一些程序员把 commonAttrs 重命名为 prototype</p>\n<p>然后上面的代码就变成了</p>\n<pre><code>function createDog(name, age) &#123;\n  var object = &#123;&#125;\n  object.name = name\n  object.age = age\n  object.isAdult = age &gt;= 2.6\n  object.__proto__ = createDog.prototype\n\n  return object\n&#125;\ncreateDog.prototype = &#123;\n  say: function () &#123;\n    console.log(`狗子汪汪汪`)\n  &#125;\n&#125;\n</code></pre>\n<p>接下来我们来玩一下</p>\n<pre><code>var ergou = createDog(&#39;ergouzi&#39;, 30)\nvar dagou = createDog(&#39;dagouzi&#39;, 50)\ndagou.say()\nergou.say()\nconsole.log(dagou.say === ergou.say)\nergou.gender = &#39;女性&#39;\nconsole.log(ergou)\nconsole.log(dagou.gender)\nconsole.log(ergou.say === dagou.say)\nergou.say = function () &#123;\n  console.log(&#39;汪汪汪 二狗子&#39;)\n&#125;\nergou.say()\nconsole.log(dagou.say === ergou.say)\n</code></pre>\n<p>JS 中对象函数没有关系，JS 之父通过 this 强行使得它们有关系。<br><code>obj.fn.call(obj, 1,2,3) =&gt; obj.fn(1,2,3)</code></p>\n<h3 id=\"new-关键字\"><a href=\"#new-关键字\" class=\"headerlink\" title=\"new 关键字\"></a>new 关键字</h3><p>我们假设在兵营中制造士兵，一个士兵在计算机中有一堆属性<br>有兵种 攻击力 生命值 行走 跑 死亡 攻击 防御<br>我们可以这样制造一个士兵</p>\n<p>var 士兵 = {<br>ID: 1,<br>兵种: &#39;步兵&#39;,<br>攻击力: 5,<br>生命值: 100,<br>行走: function () { },<br>奔跑: function () { },<br>死亡: function () { },<br>攻击: function () { },<br>防御: function () { },<br>}<br>兵营.制造(士兵)</p>\n<p>如果需要 100 个士兵怎么办呢？ 循环 100 次吧</p>\n<pre><code>var 士兵们 = []\nvar 士兵\nfor (let i = 0; i &lt; 100; i++) &#123;\n  士兵 = &#123;\n    ID: 1,\n    兵种: &#39;步兵&#39;,\n    攻击力: 5,\n    生命值: 100,\n    行走: function () &#123; &#125;,\n    奔跑: function () &#123; &#125;,\n    死亡: function () &#123; &#125;,\n    攻击: function () &#123; &#125;,\n    防御: function () &#123; &#125;,\n  &#125;\n  士兵们.push(士兵)\n&#125;\n兵营.批量制造(士兵们)\n</code></pre>\n<p>上面的代码浪费了很多内存，<br>这些 function 行为对于每一个士兵都是一样的，引用同一个函数就可以了<br>这些士兵的兵种和攻击力是一样的，没必要创建 100 次<br>只有 ID 和生命值需要创建 100 次，因为每个士兵都有自己的 ID 和生命值</p>\n<pre><code>var 士兵原型 = &#123;\n  兵种: &#39;步兵&#39;,\n  攻击力: 5,\n  行走: function () &#123; &#125;,\n  奔跑: function () &#123; &#125;,\n  死亡: function () &#123; &#125;,\n  攻击: function () &#123; &#125;,\n  防御: function () &#123; &#125;,\n&#125;\nvar 士兵们 = []\nvar 士兵\nfor (let i = 0; i &lt; 100; i++) &#123;\n  士兵 = &#123;\n    ID: i,\n    生命值: 100\n  &#125;\n  士兵.__proto__ = 士兵原型\n  士兵们.push(士兵)\n&#125;\n\n兵营.批量制造(士兵们)\n</code></pre>\n<p>有人指出创建一个士兵的代码分散在两个地方很不优雅，于是我们用一个函数把这两部分联系起来</p>\n<pre><code>function 士兵(ID) &#123;\n  var o = &#123;&#125;\n  o.__proto__ = 士兵.原型\n  o.ID = ID\n  o.生命值 = 42\n  return o\n&#125;\n士兵.原型 = &#123;\n  兵种: &#39;步兵&#39;,\n  攻击力: 5,\n  行走: function () &#123; &#125;,\n  奔跑: function () &#123; &#125;,\n  死亡: function () &#123; &#125;,\n  攻击: function () &#123; &#125;,\n  防御: function () &#123; &#125;,\n&#125;\nvar 士兵们 = []\nfor (var i = 0; i &lt; 100; i++) &#123;\n  士兵们.push(士兵(i))\n&#125;\n兵营.批量制造(士兵们)\n</code></pre>\n<p>JS 之父创建了 new，可以让我们少写几行代码</p>\n<pre><code>function 士兵(ID) &#123;\n  var o = &#123;&#125; // 帮你创建临时对象\n  o.__proto__ = 士兵.原型 // 帮你绑定原型\n  o.ID = ID\n  o.生命值 = 42\n  return o // 帮你返回对象\n&#125;\n士兵.原型 = &#123;&#125; // 统一焦作 prototype\n</code></pre>\n<p>只要你在士兵前面使用 new 关键字，那么至少做四件事情</p>\n<ol>\n<li> 不用创建临时对象，因为 new 会帮你做 [使用 this 就能获取到临时对象，把 this 指向了临时对象]</li>\n<li> 不用绑定原型，因为 new 会帮你做，new 为了知道原型在哪，所以指定原型的名字为 prototype</li>\n<li> 不用 return 对象，因为 new 会帮你做</li>\n<li> 不要给原型想名字了，因为 new 指定名字为 prototype</li>\n</ol>\n<p>这一次 我们用 new 来写</p>\n<pre><code>function 士兵(ID) &#123;\n  this.ID = ID\n  this.生命值 = 42\n&#125;\n士兵.原型 = &#123;\n  兵种: &#39;步兵&#39;,\n  攻击力: 5,\n  行走: function () &#123; &#125;,\n  奔跑: function () &#123; &#125;,\n  死亡: function () &#123; &#125;,\n  攻击: function () &#123; &#125;,\n  防御: function () &#123; &#125;,\n&#125;\nvar 士兵们 = []\nfor (var i = 0; i &lt; 100; i++) &#123;\n  士兵们.push(new 士兵(i))\n&#125;\n兵营.批量制造(士兵们)\n</code></pre>\n<p>new 的作用就是省那么几行代码，就是所谓的语法糖<br>功能就是 用构造函数构造出了对象，实现了自身属性和共用属性</p>\n<h3 id=\"constructor-属性\"><a href=\"#constructor-属性\" class=\"headerlink\" title=\"constructor 属性\"></a>constructor 属性</h3><p>new 操作为了记录 [零时对象是由哪个函数创建的]，所以预先给 [士兵.prototype] 加了一个 constructor 属性</p>\n<pre><code>士兵.prototype = &#123;\n  constructor: 士兵\n&#125;\n</code></pre>\n<p>所以如果你想留着 constructor 就别直接覆盖 prototype<br>当然你也可以给自己的 constructor 重新赋值</p>\n<h3 id=\"proto\"><a href=\"#proto\" class=\"headerlink\" title=\"proto\"></a><strong>proto</strong></h3><p>最后说 <code>__proto__</code>，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 <code>obj.__proto__</code> 时，可以理解成返回了 Object.getPrototypeOf(obj)。</p>\n","categories":["js"],"tags":["js","G","oop"]},{"title":"面向对象之继承（一）","url":"/blog-next/2019/04/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%BB%A7%E6%89%BF%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function Human(name)&#123;</span><br><span class=\"line\">    this.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Human.prototype.run = function()&#123;</span><br><span class=\"line\">    console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class=\"line\">    return undefined</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承相关概念\"><a href=\"#继承相关概念\" class=\"headerlink\" title=\"继承相关概念\"></a>继承相关概念</h4><p>a = new Sub() 就是 a 拥有父类对象的属性，子类继承了父类<br><code>a.toString()</code> 是原型链继承<br>一般就是两次的原型搜索便可以称之为继承</p>\n<h4 id=\"new-Fn-发生了什么\"><a href=\"#new-Fn-发生了什么\" class=\"headerlink\" title=\"new Fn() 发生了什么\"></a>new Fn() 发生了什么</h4><ol>\n<li>产生一个空对象</li>\n<li>this = 空对象</li>\n<li>this.<strong>proto</strong> = 空对象.<strong>proto</strong></li>\n<li>this.<strong>proto</strong> = Fn.prototype</li>\n<li>Fn.call(this, a, b, c)</li>\n<li>返回 this</li>\n</ol>\n<h3 id=\"继承的实现\"><a href=\"#继承的实现\" class=\"headerlink\" title=\"继承的实现\"></a>继承的实现</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function Man(name)&#123;</span><br><span class=\"line\">     Human.call(this, name)</span><br><span class=\"line\">     this.gender = &#x27;男&#x27;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个时候只需要指定原型就可以继承</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Man.prototype.__proto__ = Human.prototype</span><br></pre></td></tr></table></figure>\n\n<p>其实本来这样就可以的，但是 Human 的属性也会被构造出来放在 Man.proptotype 上，这个时候就需要清空 Human, 就想到了用一个空函数去代替，然后用这个空函数的 prototype 存放 Human 的 prototype<br>而且 IE 不支持，还有显式地指定 <code>__proto__</code> 很耗性能</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var f = function()&#123;&#125;</span><br><span class=\"line\">f.prototype = Human.prototype</span><br><span class=\"line\">Man.prototype = new f() // 其实这句就是 Man.prototype.__proto__ = Human.prototype</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ES5\"><a href=\"#ES5\" class=\"headerlink\" title=\"ES5\"></a>ES5</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function Human(name)&#123;</span><br><span class=\"line\">    this.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Human.prototype.run = function()&#123;</span><br><span class=\"line\">    console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class=\"line\">    return undefined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Man(name)&#123;</span><br><span class=\"line\">    Human.call(this, name)</span><br><span class=\"line\">    this.gender = &#x27;男&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var f = function()&#123;&#125;</span><br><span class=\"line\">f.prototype = Human.prototype</span><br><span class=\"line\">Man.prototype = new f()</span><br><span class=\"line\"></span><br><span class=\"line\">Man.prototype.fight = function()&#123;</span><br><span class=\"line\">    console.log(&#x27;糊你熊脸&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"es6\"><a href=\"#es6\" class=\"headerlink\" title=\"es6\"></a>es6</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Human &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    this.name = name</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    console.log(&quot;我叫&quot;+this.name+&quot;，我在跑&quot;)</span><br><span class=\"line\">    return undefined</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Man extends Human &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    super(name) // 等价于 Human.call(this, name)</span><br><span class=\"line\">    this.gender = &#x27;man&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  fight()&#123;</span><br><span class=\"line\">    console.log(&#x27;糊你熊脸&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而且 class 也是函数 -_-<br>其实 class 就是 prototype 的语法糖，第一种好理解，第二种更直观，代码清晰</p>\n","categories":["js"],"tags":["js","G","oop"]},{"title":"面向对象之继承（二）","url":"/blog-next/2019/10/31/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%BB%A7%E6%89%BF%EF%BC%88%E4%BA%8C%EF%BC%89/","content":"<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><pre><code>function 士兵(ID) &#123;\n  this.ID = ID\n  this.生命值 = 42\n&#125;\n士兵.原型 = &#123;\n  兵种: &#39;步兵&#39;,\n  攻击力: 5,\n  行走: function () &#123; &#125;,\n  奔跑: function () &#123; &#125;,\n  死亡: function () &#123; &#125;,\n  攻击: function () &#123; &#125;,\n  防御: function () &#123; &#125;,\n&#125;\nvar 士兵们 = []\nfor (var i = 0; i &lt; 100; i++) &#123;\n  士兵们.push(new 士兵(i))\n&#125;\n 兵营.批量制造(士兵们)\n</code></pre>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><pre><code>function createSoldier(name) &#123;\nthis.id = i // ID 不能重复\nthis.生命值 = 42\nthis.name = name || &#39;无名战士&#39;\n&#125;\ncreateSoldier.prototype.兵种 = &quot;美国大兵&quot;\ncreateSoldier.prototype.攻击力 = 5\ncreateSoldier.prototype.行走 = function () &#123; /_走俩步的代码_/ &#125;\ncreateSoldier.prototype.奔跑 = function () &#123; /_狂奔的代码_/ &#125;\ncreateSoldier.prototype.死亡 = function () &#123; /_Go die_/ &#125;\ncreateSoldier.prototype.攻击 = function () &#123; /_糊他熊脸_/ &#125;\ncreateSoldier.prototype.防御 = function () &#123; /_护脸_/ &#125;\n\nvar soldiers = []\nfor (var i = 0; i &lt; 100; i++) &#123;\nsoldiers.push(new createSoldier())\n&#125;\n\n// 兵营.batchMake(soldiers)\n</code></pre>\n<h3 id=\"习俗\"><a href=\"#习俗\" class=\"headerlink\" title=\"习俗\"></a>习俗</h3><ol>\n<li>构造函数首字母大写</li>\n<li>构造函数可以省掉 create</li>\n<li>如果构造函数没有参数，那么可以省略括号</li>\n</ol>\n<h3 id=\"继承的代码\"><a href=\"#继承的代码\" class=\"headerlink\" title=\"继承的代码\"></a>继承的代码</h3><pre><code>function Human(options) &#123;\nthis.name = options.name\nthis.肤色 = options.肤色\n&#125;\nHuman.prototype.eat = function () &#123; &#125;\nHuman.prototype.drink = function () &#123; &#125;\nHuman.prototype.poo = function () &#123; &#125;\n\nfunction Soldier(options) &#123;\nHuman.call(this, options)\nthis.id = options.id\nthis.生命值 = 100\n&#125;\nSoldier.prototype = Object.create(Human.prototype)\n// 大脑中的\n// Soldier.prototype.**proto** = Human.prototype\nSoldier.prototype.兵种 = &quot;美国大兵&quot;\nSoldier.prototype.攻击力 = 5\nSoldier.prototype.行走 = function () &#123; /_走俩步的代码_/ &#125;\nSoldier.prototype.奔跑 = function () &#123; /_狂奔的代码_/ &#125;\nSoldier.prototype.死亡 = function () &#123; /_Go die_/ &#125;\nSoldier.prototype.攻击 = function () &#123; /_糊他熊脸_/ &#125;\nSoldier.prototype.防御 = function () &#123; /_护脸_/ &#125;\n\nvar s = new Soldier(&#123; name: &#39;ergou&#39;, 肤色: &#39;yellow&#39;, id: 1 &#125;)\nconsole.dir(s)\n\n// 改成 class 的写法\nclass Human &#123;\nconstructor(options) &#123;\nthis.name = options.name\nthis.肤色 = options.肤色\n&#125;\neat() &#123; &#125;\ndrink() &#123; &#125;\npoo() &#123; &#125;\n&#125;\n\nclass Soldier extends Human &#123;\nconstructor(options) &#123;\nsuper(options)\nthis.id = options.id\nthis.生命值 = 100\nthis.兵种 = &quot;美国大兵&quot;\nthis.攻击力 = 5\n&#125;\n行走() &#123; /_走俩步的代码_/ &#125;\n奔跑() &#123; /_狂奔的代码_/ &#125;\n死亡() &#123; /_Go die_/ &#125;\n攻击() &#123; /_糊他熊脸_/ &#125;\n防御() &#123; /_护脸_/ &#125;\n&#125;\n</code></pre>\n<h3 id=\"真的是继承吗\"><a href=\"#真的是继承吗\" class=\"headerlink\" title=\"真的是继承吗\"></a>真的是继承吗</h3><p>最后是关于继承，前面我们讲到“每一个对象都会从原型‘继承’属性”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：</p>\n<p>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p>\n","categories":["js"],"tags":["js","G","oop"]},{"title":"面试","url":"/blog-next/2020/08/06/%E9%9D%A2%E8%AF%95/","content":"<p>- </p>\n"},{"title":"面试题库","url":"/blog-next/2020/07/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93/","content":"<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"1-如何理解-html-语义化？\"><a href=\"#1-如何理解-html-语义化？\" class=\"headerlink\" title=\"1.如何理解 html 语义化？\"></a>1.如何理解 html 语义化？</h3><ul>\n<li>举例法：HTML 语义化就是使用正确的标签 段落就写 p 标签，标题就写 h1 标签，文章就写 article 标签，视频就写 video 标签，等等</li>\n<li>阐述法：首先讲以前的后台开发人员使用 table 布局，然后讲美工人员使用 div+css 布局，最后讲专业的前端会使用正确的标签进行页面开发</li>\n</ul>\n<h3 id=\"2-meta-viewport-是做什么的？怎么写\"><a href=\"#2-meta-viewport-是做什么的？怎么写\" class=\"headerlink\" title=\"2.meta viewport 是做什么的？怎么写\"></a>2.meta viewport 是做什么的？怎么写</h3><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1&quot;&gt;</code></p>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><h3 id=\"1-列举常见的-es6-属性\"><a href=\"#1-列举常见的-es6-属性\" class=\"headerlink\" title=\"1.列举常见的 es6 属性\"></a>1.列举常见的 es6 属性</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZ3cud2lraS9lcy02LXR1dG9yaWFscy8=\">es-6<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"2-函数防抖和函数节流分别是什么？\"><a href=\"#2-函数防抖和函数节流分别是什么？\" class=\"headerlink\" title=\"2.函数防抖和函数节流分别是什么？\"></a>2.函数防抖和函数节流分别是什么？</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi91dGlscy9ibG9iL21hc3Rlci9zcmMvdW5kZXJzY29yZS9kZWJvdW5jZS5qcw==\">防抖<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi91dGlscy9ibG9iL21hc3Rlci9zcmMvdW5kZXJzY29yZS90aHJvdHRsZS5qcw==\">节流<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"3-如何实现数组去重？\"><a href=\"#3-如何实现数组去重？\" class=\"headerlink\" title=\"3.如何实现数组去重？\"></a>3.如何实现数组去重？</h3><ul>\n<li>遍历比较</li>\n<li>计数排序变形</li>\n<li>使用 Set</li>\n<li>使用 WeakMap</li>\n</ul>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><h3 id=\"1-GET-和-POST-的区别\"><a href=\"#1-GET-和-POST-的区别\" class=\"headerlink\" title=\"1.GET 和 POST 的区别\"></a>1.GET 和 POST 的区别</h3><p>错解，但面试满分：</p>\n<ul>\n<li><code>GET</code> 在浏览器回退时是无害的，而 <code>POST</code> 会再次提交请求。</li>\n<li><code>GET</code> 产生的 URL 地址可以被加入收藏栏，而 <code>POST</code> 不可以。</li>\n<li><code>GET</code> 请求会被浏览器主动 cache，而 <code>POST</code> 不会，除非手动设置。</li>\n<li><code>GET</code> 请求只能进行 url 编码，而 <code>POST</code> 支持多种编码方式。</li>\n<li><code>GET</code> 请求参数会被完整保留在浏览器历史记录里，而 <code>POST</code> 中的参数不会被保留。</li>\n<li><code>GET</code> 请求在 URL 中传送的参数是有长度限制的，而 <code>POST</code> 么有。</li>\n<li>对参数的数据类型，<code>GET</code> 只接受 <code>ASCII</code> 字符，而 <code>POST</code> 没有限制。</li>\n<li><code>GET</code> 比 <code>POST</code> 更不安全，因为参数直接暴露在 <code>URL</code> 上，所以不能用来传递敏感信息。</li>\n<li><code>GET</code> 参数通过 <code>URL</code> 传递，<code>POST</code> 放在 <code>Request body</code> 中。</li>\n</ul>\n<p>正解：</p>\n<ul>\n<li>就一个区别：语义——<code>GET</code> 用于获取资源，<code>POST</code> 用于提交资源。</li>\n</ul>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><h3 id=\"1-watch-和-computed-和-methods-的区别是什么？\"><a href=\"#1-watch-和-computed-和-methods-的区别是什么？\" class=\"headerlink\" title=\"1. watch 和 computed 和 methods 的区别是什么？\"></a>1. watch 和 computed 和 methods 的区别是什么？</h3><ul>\n<li><code>computed</code> 和 <code>methods</code> 相比，最大区别是 <code>computed</code> 有缓存：如果 <code>computed</code> 属性依赖的属性没有变化，那么 <code>computed</code> 属性就不会重新计算， <code>methods</code> 则是看到一次计算一次</li>\n<li><code>watch</code> 和 <code>computed</code> <code>相比，computed</code> 是计算出一个属性（废话），而 <code>watch</code> 则可能是做别的事情（如上报数据）</li>\n</ul>\n<h3 id=\"vuejs-1-x-和-2-x-使用-Object-defineProperty-来劫持数据的-getter-和-setter，它有什么缺点？（或者-vue3-为什么要用-proxy）\"><a href=\"#vuejs-1-x-和-2-x-使用-Object-defineProperty-来劫持数据的-getter-和-setter，它有什么缺点？（或者-vue3-为什么要用-proxy）\" class=\"headerlink\" title=\"vuejs 1.x 和 2.x 使用 Object.defineProperty 来劫持数据的 getter 和 setter，它有什么缺点？（或者 vue3 为什么要用 proxy）\"></a>vuejs 1.x 和 2.x 使用 Object.defineProperty 来劫持数据的 getter 和 setter，它有什么缺点？（或者 vue3 为什么要用 proxy）</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(data, <span class=\"string\">&quot;a&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// track</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// trigger</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">observed = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(data, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// track</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// trigger</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Object.defineProperty</code> 需要预先知道要拦截的 <code>key</code> 是什么，所以它并不能检测对象属性的添加和删除。</li>\n<li>对于层级比较深的对象，<code>vue</code> 会使用 <code>Object.defineProperty</code> 把每一层对象数据都变成响应式的。如果我们的响应式对象很复杂，就会有相当大的性能负担</li>\n<li><code>Proxy</code> 劫持的是整个对象, 自然对于对象属性的增加和删除都能检测到</li>\n</ul>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><h3 id=\"1-受控组件-V-S-非受控组件\"><a href=\"#1-受控组件-V-S-非受控组件\" class=\"headerlink\" title=\"1. 受控组件 V.S. 非受控组件\"></a>1. 受控组件 V.S. 非受控组件</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;FInput value=&#123;x&#125; onChange=&#123;fn&#125;/&gt; 受控组件</span><br><span class=\"line\">&lt;FInput defaultValue=&#123;x&#125; ref=&#123;input&#125;/&gt; 非受控组件</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前端工程化\"><a href=\"#前端工程化\" class=\"headerlink\" title=\"前端工程化\"></a>前端工程化</h2><ol>\n<li>各个模块加载方案已经区别</li>\n</ol>\n<ul>\n<li><p>AMD<br>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出，其主要内容就是定义了 define 函数该如何书写，只要你按照这个规范书写模块和依赖，require.js 就能正确的进行解析<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9qcy1tb2R1bGVzL3RyZWUvbWFzdGVyL3NyYy9yZXF1aXJlanM=\">AMD demo<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>CMD<br>CMD 其实就是 SeaJS 在推广过程中对模块定义的规范化产出。主要内容就是描述该如何定义模块，如何引入模块，如何导出模块，只要你按照这个规范书写代码，sea.js 就能正确的进行解析<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9qcy1tb2R1bGVzL3RyZWUvbWFzdGVyL3NyYy9zZWFqcw==\">CMD demo<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><em>1.CMD 推崇依赖就近，AMD 推崇依赖前置 2.对于依赖的模块，AMD 是提前执行，CMD 是延迟执行</em></p>\n</li>\n<li><p>CommonJS<br>在服务器端比如 node，采用的则是 CommonJS 规范<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9qcy1tb2R1bGVzL3RyZWUvbWFzdGVyL3NyYy9jb21tb25KUw==\">CommonJS demo<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><em>CommonJS 和 AMD 对比就是 commonjs 是同步的，AMD 规范则是非同步加载模块，允许指定回调函数。</em></p>\n</li>\n<li><p>ES6 模块<br>ECMAScript2015 规定了新的模块加载方案，需要使用的模块先加载完再执行代码<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9qcy1tb2R1bGVzL3RyZWUvbWFzdGVyL3NyYy9FUzY=\">ES6 demo<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><em>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</em><br><em>因为 CommonJS 加载的是一个对象（即 module.exports 属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</em></p>\n</li>\n</ul>\n<h2 id=\"开放题目\"><a href=\"#开放题目\" class=\"headerlink\" title=\"开放题目\"></a>开放题目</h2><h3 id=\"1-你遇到最难的问题是怎样的？\"><a href=\"#1-你遇到最难的问题是怎样的？\" class=\"headerlink\" title=\"1. 你遇到最难的问题是怎样的？\"></a>1. 你遇到最难的问题是怎样的？</h3><p>评分可参考如下场景</p>\n<blockquote>\n<p>一开始没搞懂<br>去网上看了个答案<br>一试发现这个广为流传的答案是有坑的<br>于是自己看 issue<br>发现还有一个小细节<br>然后解决了<br>谁知道还是在某种 edge case 有问题<br>于是自己看规范看源码，搞定</p>\n</blockquote>\n<h3 id=\"2-最近在关注什么新技术？\"><a href=\"#2-最近在关注什么新技术？\" class=\"headerlink\" title=\"2. 最近在关注什么新技术？\"></a>2. 最近在关注什么新技术？</h3><h2 id=\"刁钻题目\"><a href=\"#刁钻题目\" class=\"headerlink\" title=\"刁钻题目\"></a>刁钻题目</h2><h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><p>Q: <code>(a ==1 &amp;&amp; a== 2 &amp;&amp; a==3)</code> 可能为 <code>true</code> 吗？</p>\n<p>A: 第一种</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a = &#123;</span><br><span class=\"line\">  value: 1,</span><br><span class=\"line\">  valueOf()&#123;</span><br><span class=\"line\">   return this.value++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> a ==1 &amp;&amp; a== 2 &amp;&amp; a==3 // true</span><br></pre></td></tr></table></figure>\n\n<p>A: 第二种</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var value = 1;</span><br><span class=\"line\">Object.defineProperty(window, &#x27;a&#x27;, &#123;</span><br><span class=\"line\">    get()&#123;</span><br><span class=\"line\">        return value++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">a ===1 &amp;&amp; a=== 2 &amp;&amp; a===3 // true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><p>Q: 问 a.x 是多少？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;a&quot;</span> &#125;;</span><br><span class=\"line\">a.x = a = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>A: <code>undefined</code></p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h3><p>Q: <code>[1,2,3].map(parseInt)</code> 输出什么？<br>A: <code>[1, NaN, NaN]</code></p>\n","categories":["总结"],"tags":["面试题"]},{"title":"Vue2数据驱动","url":"/blog-next/2020/09/22/Vue2%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8/","content":"<p>Vue.js 的一个核心思想是数据驱动。所谓数据驱动，是指视图是由数据驱动生成的，我们对视图的修改，不会直接操作 DOM，而是通过修改数据。当交互复杂的时候，只关心数据的修改会让代码的逻辑变得非常清晰，因为 DOM 变成了数据的映射，我们所有的修改都是修改数据，而不用触碰 DOM，这样的代码非常利于维护。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"new-Vue\"><a href=\"#new-Vue\" class=\"headerlink\" title=\"new Vue\"></a>new Vue</h2><p>Vue 定义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Vue</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp; !(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> Vue)) &#123;</span><br><span class=\"line\">    warn(<span class=\"string\">&quot;Vue is a constructor and should be called with the `new` keyword&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._init(options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Vue</code> 只能通过 <code>new</code> 调用，然后执行 <code>_init</code> 方法（这将是 Vue2 最重要的一个方法）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype._init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options?: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vm: Component = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// a uid</span></span><br><span class=\"line\">  vm._uid = uid++;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> startTag, endTag;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">    startTag = <span class=\"string\">`vue-perf-start:<span class=\"subst\">$&#123;vm._uid&#125;</span>`</span>;</span><br><span class=\"line\">    endTag = <span class=\"string\">`vue-perf-end:<span class=\"subst\">$&#123;vm._uid&#125;</span>`</span>;</span><br><span class=\"line\">    mark(startTag);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// a flag to avoid this being observed</span></span><br><span class=\"line\">  vm._isVue = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">// merge options</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options &amp;&amp; options._isComponent) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// optimize internal component instantiation</span></span><br><span class=\"line\">    <span class=\"comment\">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class=\"line\">    <span class=\"comment\">// internal component options needs special treatment.</span></span><br><span class=\"line\">    initInternalComponent(vm, options);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    vm.$options = mergeOptions(</span><br><span class=\"line\">      resolveConstructorOptions(vm.constructor),</span><br><span class=\"line\">      options || &#123;&#125;,</span><br><span class=\"line\">      vm</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span>) &#123;</span><br><span class=\"line\">    initProxy(vm);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    vm._renderProxy = vm;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// expose real self</span></span><br><span class=\"line\">  vm._self = vm;</span><br><span class=\"line\">  initLifecycle(vm);</span><br><span class=\"line\">  initEvents(vm);</span><br><span class=\"line\">  initRender(vm);</span><br><span class=\"line\">  callHook(vm, <span class=\"string\">&quot;beforeCreate&quot;</span>);</span><br><span class=\"line\">  initInjections(vm); <span class=\"comment\">// resolve injections before data/props</span></span><br><span class=\"line\">  initState(vm);</span><br><span class=\"line\">  initProvide(vm); <span class=\"comment\">// resolve provide after data/props</span></span><br><span class=\"line\">  callHook(vm, <span class=\"string\">&quot;created&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">    vm._name = formatComponentName(vm, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    mark(endTag);</span><br><span class=\"line\">    measure(<span class=\"string\">`vue <span class=\"subst\">$&#123;vm._name&#125;</span> init`</span>, startTag, endTag);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vm.$options.el) &#123;</span><br><span class=\"line\">    vm.$mount(vm.$options.el);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>_init</code> 在实例化的时候就会调用，是 <code>Vue</code> 的核心，主要干了几件事情，合并配置，初始化事件中心，初始化渲染，初始化 data，初始化 props，初始化 computed，初始化 watcher 等等</p>\n<p>下面列一下生命周期以及钩子的调用顺序，后面做剩余补充</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">init.js</span><br><span class=\"line\">- mergeOptions</span><br><span class=\"line\">- initLifecycle</span><br><span class=\"line\">- initEvents</span><br><span class=\"line\">- initRender</span><br><span class=\"line\">- callHook(vm, &#x27;beforeCreate&#x27;)</span><br><span class=\"line\">- initInjections</span><br><span class=\"line\">- initState</span><br><span class=\"line\">  - initProps</span><br><span class=\"line\">  - initMethods</span><br><span class=\"line\">  - initData</span><br><span class=\"line\">  - initComputed</span><br><span class=\"line\">  - initWatch</span><br><span class=\"line\">- initProvide</span><br><span class=\"line\">- callHook(vm, &#x27;created&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue-实例挂载的实现\"><a href=\"#Vue-实例挂载的实现\" class=\"headerlink\" title=\"Vue 实例挂载的实现\"></a>Vue 实例挂载的实现</h2><p><code>src/platform/web/entry-runtime-with-compiler.js</code> 中 <code>$mount</code> 的定义:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mount = Vue.prototype.$mount;</span><br><span class=\"line\">Vue.prototype.$mount = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  el?: string | Element,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  hydrating?: boolean</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  el = el &amp;&amp; query(el);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (el === <span class=\"built_in\">document</span>.body || el === <span class=\"built_in\">document</span>.documentElement) &#123;</span><br><span class=\"line\">    process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp;</span><br><span class=\"line\">      warn(</span><br><span class=\"line\">        <span class=\"string\">`Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = <span class=\"built_in\">this</span>.$options;</span><br><span class=\"line\">  <span class=\"comment\">// resolve template/el and convert to render function</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options.render) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> template = options.template;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (template) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> template === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (template.charAt(<span class=\"number\">0</span>) === <span class=\"string\">&quot;#&quot;</span>) &#123;</span><br><span class=\"line\">          template = idToTemplate(template);</span><br><span class=\"line\">          <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp; !template) &#123;</span><br><span class=\"line\">            warn(</span><br><span class=\"line\">              <span class=\"string\">`Template element not found or is empty: <span class=\"subst\">$&#123;options.template&#125;</span>`</span>,</span><br><span class=\"line\">              <span class=\"built_in\">this</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (template.nodeType) &#123;</span><br><span class=\"line\">        template = template.innerHTML;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span>) &#123;</span><br><span class=\"line\">          warn(<span class=\"string\">&quot;invalid template option:&quot;</span> + template, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el) &#123;</span><br><span class=\"line\">      template = getOuterHTML(el);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (template) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">        mark(<span class=\"string\">&quot;compile&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(</span><br><span class=\"line\">        template,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          shouldDecodeNewlines,</span><br><span class=\"line\">          shouldDecodeNewlinesForHref,</span><br><span class=\"line\">          <span class=\"attr\">delimiters</span>: options.delimiters,</span><br><span class=\"line\">          <span class=\"attr\">comments</span>: options.comments,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"built_in\">this</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">      options.render = render;</span><br><span class=\"line\">      options.staticRenderFns = staticRenderFns;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">        mark(<span class=\"string\">&quot;compile end&quot;</span>);</span><br><span class=\"line\">        measure(<span class=\"string\">`vue <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>._name&#125;</span> compile`</span>, <span class=\"string\">&quot;compile&quot;</span>, <span class=\"string\">&quot;compile end&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mount.call(<span class=\"built_in\">this</span>, el, hydrating);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里首先缓存了原型上的 <code>$mount</code> 方法，首先对 <code>el</code> 做了限制，<code>Vue</code> 不能挂载在 <code>body html</code> 这样的根节点上，如果没有定义 <code>render</code> 方法，<del>则会把 <code>el</code> 或者 <code>template</code> 字符串转换成 <code>render</code> 方法。</del><br>这里我们要牢记，<code>Vue2</code> 版本中，所有 <code>Vue</code> 的组件的渲染最终都需要 <code>render</code> 方法，无论我们是用单文件 <code>.vue</code> 的方式开发组件还是写了 <code>el</code> 或者 <code>template</code> 字符串转换成 <code>render</code> 方法，那么这么过程是 <code>Vue</code> 的一个在线编译的过程，它是调用 <code>compileToFunctions</code> 方法实现的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// public mount method</span></span><br><span class=\"line\">Vue.prototype.$mount = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  el?: string | Element,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  hydrating?: boolean</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  el = el &amp;&amp; inBrowser ? query(el) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mountComponent(<span class=\"built_in\">this</span>, el, hydrating);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>公共的 <code>$mount</code> 方法传入两个参数，第一个是 <code>el</code>，它表示挂载的元素，可以是字符串，也可以是 <code>DOM</code> 对象，第二个是否是服务端渲染，<code>$mount</code> 方法实际上会去调用 <code>mountComponent</code> 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mountComponent</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  vm: Component,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  el: ?Element,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  hydrating?: boolean</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  vm.$el = el;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!vm.$options.render) &#123;</span><br><span class=\"line\">    vm.$options.render = createEmptyVNode;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        (vm.$options.template &amp;&amp; vm.$options.template.charAt(<span class=\"number\">0</span>) !== <span class=\"string\">&quot;#&quot;</span>) ||</span><br><span class=\"line\">        vm.$options.el ||</span><br><span class=\"line\">        el</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">&quot;You are using the runtime-only build of Vue where the template &quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;compiler is not available. Either pre-compile the templates into &quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;render functions, or use the compiler-included build.&quot;</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">&quot;Failed to mount component: template or render function not defined.&quot;</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  callHook(vm, <span class=\"string\">&quot;beforeMount&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> updateComponent;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">    updateComponent = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> name = vm._name;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> id = vm._uid;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> startTag = <span class=\"string\">`vue-perf-start:<span class=\"subst\">$&#123;id&#125;</span>`</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> endTag = <span class=\"string\">`vue-perf-end:<span class=\"subst\">$&#123;id&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      mark(startTag);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> vnode = vm._render();</span><br><span class=\"line\">      mark(endTag);</span><br><span class=\"line\">      measure(<span class=\"string\">`vue <span class=\"subst\">$&#123;name&#125;</span> render`</span>, startTag, endTag);</span><br><span class=\"line\"></span><br><span class=\"line\">      mark(startTag);</span><br><span class=\"line\">      vm._update(vnode, hydrating);</span><br><span class=\"line\">      mark(endTag);</span><br><span class=\"line\">      measure(<span class=\"string\">`vue <span class=\"subst\">$&#123;name&#125;</span> patch`</span>, startTag, endTag);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    updateComponent = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      vm._update(vm._render(), hydrating);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// we set this to vm._watcher inside the watcher&#x27;s constructor</span></span><br><span class=\"line\">  <span class=\"comment\">// since the watcher&#x27;s initial patch may call $forceUpdate (e.g. inside child</span></span><br><span class=\"line\">  <span class=\"comment\">// component&#x27;s mounted hook), which relies on vm._watcher being already defined</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Watcher(</span><br><span class=\"line\">    vm,</span><br><span class=\"line\">    updateComponent,</span><br><span class=\"line\">    noop,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">before</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vm._isMounted) &#123;</span><br><span class=\"line\">          callHook(vm, <span class=\"string\">&quot;beforeUpdate&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"literal\">true</span> <span class=\"comment\">/* isRenderWatcher */</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  hydrating = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// manually mounted instance, call mounted on self</span></span><br><span class=\"line\">  <span class=\"comment\">// mounted is called for render-created child components in its inserted hook</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vm.$vnode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    vm._isMounted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    callHook(vm, <span class=\"string\">&quot;mounted&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>mountComponent</code> 核心就是实例化一个渲染 <code>Watcher</code>，在它的回调函数中调用 <code>updateComponent</code> 方法，在此方法中调用 <code>vm._render</code> 方法生成虚拟 <code>Node</code>，最终调用 <code>vm._update</code> 更新 <code>DOM</code><br>这里的 watcher 有两个作用，一个是初始化的时候会执行回调函数，另一个是当 vm 实例中的监测数据发生变化的时候执行回调函数，这里第四个参数是 watcher 构造函数的 options 参数之一，执行 <code>this.before = options.before</code> 保留了 <code>before</code> 钩子函数</p>\n<p>函数最后判断为根节点的时候设置 <code>vm._isMounte</code>d 为 <code>true</code>，表示这个实例已经挂载了，同时执行 <code>mounted</code> 钩子函数。这里注意 <code>vm.$vnode</code> 表示 <code>Vue</code> 实例的父虚拟 <code>Node</code>，它是 <code>null</code> 表示是根 Vue 的实例</p>\n<p>这里也涉及到了两个钩子函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">new watcher(vm, updateComponent, noop, &#123;beforeUpdate&#125;)</span><br><span class=\"line\">updateComponent</span><br><span class=\"line\">callHook(vm, &#x27;mounted&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><p><code>Vue</code> 的 <code>_render</code> 方法是实例的一个私有方法，它用来把实例渲染成一个虚拟 <code>Node</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype._render = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>): <span class=\"title\">VNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vm: Component = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; render, _parentVnode &#125; = vm.$options;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// reset _rendered flag on slots for duplicate slot check</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> vm.$slots) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">      vm.$slots[key]._rendered = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_parentVnode) &#123;</span><br><span class=\"line\">    vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set parent vnode. this allows render functions to have access</span></span><br><span class=\"line\">  <span class=\"comment\">// to the data on the placeholder node.</span></span><br><span class=\"line\">  vm.$vnode = _parentVnode;</span><br><span class=\"line\">  <span class=\"comment\">// render self</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> vnode;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    vnode = render.call(vm._renderProxy, vm.$createElement);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    handleError(e, vm, <span class=\"string\">`render`</span>);</span><br><span class=\"line\">    <span class=\"comment\">// return error render result,</span></span><br><span class=\"line\">    <span class=\"comment\">// or previous vnode to prevent render error causing blank component</span></span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vm.$options.renderError) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          vnode = vm.$options.renderError.call(</span><br><span class=\"line\">            vm._renderProxy,</span><br><span class=\"line\">            vm.$createElement,</span><br><span class=\"line\">            e</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          handleError(e, vm, <span class=\"string\">`renderError`</span>);</span><br><span class=\"line\">          vnode = vm._vnode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        vnode = vm._vnode;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      vnode = vm._vnode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// return empty vnode in case the render function errored out</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(vnode <span class=\"keyword\">instanceof</span> VNode)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp; <span class=\"built_in\">Array</span>.isArray(vnode)) &#123;</span><br><span class=\"line\">      warn(</span><br><span class=\"line\">        <span class=\"string\">&quot;Multiple root nodes returned from render function. Render function &quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;should return a single root node.&quot;</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vnode = createEmptyVNode();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// set parent</span></span><br><span class=\"line\">  vnode.parent = _parentVnode;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vnode;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码最关键的是 <code>render</code> 方法调用，我们在平时的开发工作中手写 <code>render</code> 方法的场景比较少，而写的比较多的是 <code>template</code> 模板，在之前的 <code>compileToFunctions</code> 方法的实现中，会把 template 编译成 <code>render</code> 方法，但这个编译过程是非常复杂的</p>\n<p>我们知道 <code>render</code> 方法的第一个参数是 <code>createElement</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>相当于我们编写的 render 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">render: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> createElement(<span class=\"string\">&#x27;div&#x27;</span>, &#123;</span><br><span class=\"line\">     <span class=\"attr\">attrs</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"string\">&#x27;app&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  &#125;, <span class=\"built_in\">this</span>.message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再回到 <code>_render</code> 函数中的 <code>render</code> 方法的调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">vnode = render.call(vm._renderProxy, vm.$createElement);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，<code>render</code> 函数中的 <code>createElement</code> 方法就是 <code>vm.$createElement</code> 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initRender</span>(<span class=\"params\">vm: Component</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// bind the createElement fn to this instance</span></span><br><span class=\"line\">  <span class=\"comment\">// so that we get proper render context inside it.</span></span><br><span class=\"line\">  <span class=\"comment\">// args order: tag, data, children, normalizationType, alwaysNormalize</span></span><br><span class=\"line\">  <span class=\"comment\">// internal version is used by render functions compiled from templates</span></span><br><span class=\"line\">  vm._c = <span class=\"function\">(<span class=\"params\">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"comment\">// normalization is always applied for the public version, used in</span></span><br><span class=\"line\">  <span class=\"comment\">// user-written render functions.</span></span><br><span class=\"line\">  vm.$createElement = <span class=\"function\">(<span class=\"params\">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上, <code>vm.$createElement</code> 方法的定义是在执行 <code>initRender</code> 方法的时候，可以看到还有一个<code> vm._c</code> 方法，它是被模板编译成的 <code>render</code> 函数调用，<code>vm.$createElement</code> 是用户手写 <code>render</code> 方法调用两个都调用 <code>createElement</code>，最后一个参数其实就是递归拍平 <code>children vnode</code></p>\n<h2 id=\"Virtual-DOM\"><a href=\"#Virtual-DOM\" class=\"headerlink\" title=\"Virtual DOM\"></a>Virtual DOM</h2><p>虚拟 DOM 是在浏览器的真实 DOM 的前提下产生的，它产生的前提是 DOM 是很昂贵的，dom元素上面的属性非常多，频繁的更新它就会有性能上的问题</p>\n<p>Virtural DOM 是用一个原生的 JS 对象去描述一个 DOM 节点，所以它比创建一个 DOM 的代价要小的多。在 Vue 中，Virtual DOM 是用 VNode 这么一个 class 去描述</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: string | <span class=\"keyword\">void</span>;</span><br><span class=\"line\">  data: VNodeData | <span class=\"keyword\">void</span>;</span><br><span class=\"line\">  children: ?<span class=\"built_in\">Array</span>&lt;VNode&gt;;</span><br><span class=\"line\">  text: string | <span class=\"keyword\">void</span>;</span><br><span class=\"line\">  elm: Node | <span class=\"keyword\">void</span>;</span><br><span class=\"line\">  ns: string | <span class=\"keyword\">void</span>;</span><br><span class=\"line\">  context: Component | <span class=\"keyword\">void</span>; <span class=\"comment\">// rendered in this component&#x27;s scope</span></span><br><span class=\"line\">  key: string | number | <span class=\"keyword\">void</span>;</span><br><span class=\"line\">  componentOptions: VNodeComponentOptions | <span class=\"keyword\">void</span>;</span><br><span class=\"line\">  componentInstance: Component | <span class=\"keyword\">void</span>; <span class=\"comment\">// component instance</span></span><br><span class=\"line\">  parent: VNode | <span class=\"keyword\">void</span>; <span class=\"comment\">// component placeholder node</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// strictly internal</span></span><br><span class=\"line\">  raw: boolean; <span class=\"comment\">// contains raw HTML? (server only)</span></span><br><span class=\"line\">  isStatic: boolean; <span class=\"comment\">// hoisted static node</span></span><br><span class=\"line\">  isRootInsert: boolean; <span class=\"comment\">// necessary for enter transition check</span></span><br><span class=\"line\">  isComment: boolean; <span class=\"comment\">// empty comment placeholder?</span></span><br><span class=\"line\">  isCloned: boolean; <span class=\"comment\">// is a cloned node?</span></span><br><span class=\"line\">  isOnce: boolean; <span class=\"comment\">// is a v-once node?</span></span><br><span class=\"line\">  asyncFactory: <span class=\"built_in\">Function</span> | <span class=\"keyword\">void</span>; <span class=\"comment\">// async component factory function</span></span><br><span class=\"line\">  asyncMeta: <span class=\"built_in\">Object</span> | <span class=\"keyword\">void</span>;</span><br><span class=\"line\">  isAsyncPlaceholder: boolean;</span><br><span class=\"line\">  ssrContext: <span class=\"built_in\">Object</span> | <span class=\"keyword\">void</span>;</span><br><span class=\"line\">  fnContext: Component | <span class=\"keyword\">void</span>; <span class=\"comment\">// real context vm for functional nodes</span></span><br><span class=\"line\">  fnOptions: ?ComponentOptions; <span class=\"comment\">// for SSR caching</span></span><br><span class=\"line\">  fnScopeId: ?string; <span class=\"comment\">// functional scope id support</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    tag?: string,</span></span><br><span class=\"line\"><span class=\"params\">    data?: VNodeData,</span></span><br><span class=\"line\"><span class=\"params\">    children?: ?<span class=\"built_in\">Array</span>&lt;VNode&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    text?: string,</span></span><br><span class=\"line\"><span class=\"params\">    elm?: Node,</span></span><br><span class=\"line\"><span class=\"params\">    context?: Component,</span></span><br><span class=\"line\"><span class=\"params\">    componentOptions?: VNodeComponentOptions,</span></span><br><span class=\"line\"><span class=\"params\">    asyncFactory?: <span class=\"built_in\">Function</span></span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.tag = tag</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.data = data</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.children = children</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.text = text</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.elm = elm</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.ns = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.context = context</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.fnContext = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.fnOptions = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.fnScopeId = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.key = data &amp;&amp; data.key</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.componentOptions = componentOptions</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.componentInstance = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.parent = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.raw = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.isStatic = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.isRootInsert = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.isComment = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.isCloned = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.isOnce = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.asyncFactory = asyncFactory</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.asyncMeta = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.isAsyncPlaceholder = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// DEPRECATED: alias for componentInstance for backwards compat.</span></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">  get child (): Component | <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.componentInstance</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>VNode 是对真实 DOM 的一种抽象描述，它的定义无非就几个关键属性，标签名，数据，子节点，键值等等，其他属性都是用扩展 VNode 的，它只是有数据结构的定义，映射到真实的 DOM 实际上要经历 VNode 的 create diff patch 等过程。那么在 Vue.js 中，VNode 是通过之前提到的 createElement 方法创建的</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","categories":["vue"],"tags":["vue2.x","笔记"]},{"title":"玩转 VS Code","url":"/blog-next/2018/12/25/vscode/","content":"<p><strong>注：mac 版本的 vscode，其他版本需要稍微变通一下</strong></p>\n<blockquote>\n<p>基础语言支持还需要再研究研究<br>cmd option 好像有点交换，需要研究一下</p>\n</blockquote>\n<h3 id=\"1-上手-vscode\"><a href=\"#1-上手-vscode\" class=\"headerlink\" title=\"1 上手 vscode\"></a>1 上手 vscode</h3><p>vscode --help 列出所有的命令<br>cmd + shift + p 打开命令面板</p>\n<h4 id=\"命令行的使用\"><a href=\"#命令行的使用\" class=\"headerlink\" title=\"命令行的使用\"></a>命令行的使用</h4><ul>\n<li><p>首先在命令面板中搜索 shell 命令，在 PATH 中安装 code 命令，就可以在命令行中使用 code 命令打开 vscode</p>\n</li>\n<li><p>当然如果后面跟上文件路径就可以打开指定的文件</p>\n</li>\n<li><p>如果你希望在已经打开的窗口打开文件，可以在 code 命令后添加参数 -r 来进行窗口的复用</p>\n</li>\n<li><p>也可以使用 -g <span class=\"exturl\" data-url=\"ZmlsZTpsaW5lWzpjaGFyYWN0ZXJd\">file:line[:character]<i class=\"fa fa-external-link-alt\"></i></span> 打开文件然后滚动到指定位置，比如输入 code -g package.json:128 </p>\n</li>\n<li><p>可以使用 -d 来比较两个文件，传入两个路径， code -r -d a.js b.js</p>\n</li>\n<li><p>除了以上直接打开磁盘上的文件外，也可以接受来自管道中的数据。这样就可以在 vsode 中显示命令行中的内容，比如 ls | code -</p>\n</li>\n</ul>\n<h3 id=\"2-核心的键盘操作\"><a href=\"#2-核心的键盘操作\" class=\"headerlink\" title=\"2 核心的键盘操作\"></a>2 核心的键盘操作</h3><h4 id=\"光标的移动（一个方向说明）\"><a href=\"#光标的移动（一个方向说明）\" class=\"headerlink\" title=\"光标的移动（一个方向说明）\"></a>光标的移动（一个方向说明）</h4><ul>\n<li><p>单词移动 option + ←    </p>\n</li>\n<li><p>行首  cmd + ←   </p>\n</li>\n<li><p>在代码块（各种括号）首末进行跳转 cmd + shift + \\   </p>\n</li>\n<li><p>移动到文档首尾  </p>\n<h4 id=\"文本选择\"><a href=\"#文本选择\" class=\"headerlink\" title=\"文本选择\"></a>文本选择</h4></li>\n<li><p>对于基于单词 行 和整个文档的光标操作，你只需要多按一个 shift 键，就可以在移动光标的同时选中其中的文本</p>\n</li>\n<li><p>对于代码块可以使用命令面板，选择括号所有内容来选中文本（原本没有，我自己定义了快捷键 control + shift + a）</p>\n</li>\n</ul>\n<h4 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h4><ul>\n<li>删除前面 delete cmd + delete option + delete</li>\n<li>删除后面 fn + delete cmd + fn + delete option + fn + delete</li>\n</ul>\n<h3 id=\"3-快捷键进阶\"><a href=\"#3-快捷键进阶\" class=\"headerlink\" title=\"3 快捷键进阶\"></a>3 快捷键进阶</h3><h4 id=\"代码行编辑\"><a href=\"#代码行编辑\" class=\"headerlink\" title=\"代码行编辑\"></a>代码行编辑</h4><ul>\n<li>删除整行 cmd + shift + k</li>\n<li>剪切整行 cmd + x</li>\n<li>当前行下面重新开始一行  cmd + enter</li>\n<li>当前行的上面重新开始一行 cmd + shift + enter</li>\n<li>移动行 option + ↑</li>\n<li>复制行 option + shift + ↑</li>\n</ul>\n<h4 id=\"编程语言相关的命令\"><a href=\"#编程语言相关的命令\" class=\"headerlink\" title=\"编程语言相关的命令\"></a>编程语言相关的命令</h4><h5 id=\"添加注释\"><a href=\"#添加注释\" class=\"headerlink\" title=\"添加注释\"></a>添加注释</h5><ul>\n<li>行注释 cmd + /</li>\n<li>块注释 option + shift + a</li>\n</ul>\n<h5 id=\"代码格式化\"><a href=\"#代码格式化\" class=\"headerlink\" title=\"代码格式化\"></a>代码格式化</h5><ul>\n<li>option + shift + f （个人建议安装 prettier，很 nice）</li>\n</ul>\n<h5 id=\"代码缩进\"><a href=\"#代码缩进\" class=\"headerlink\" title=\"代码缩进\"></a>代码缩进</h5><ul>\n<li>可以用命令行，当时自己用的多的还是格式化</li>\n<li>当然也可以使用 cmd + [ 进行行缩进</li>\n</ul>\n<h4 id=\"其余小技巧\"><a href=\"#其余小技巧\" class=\"headerlink\" title=\"其余小技巧\"></a>其余小技巧</h4><ul>\n<li>调用字符的顺序 ctrl + t</li>\n<li>转化大小写 可以用 cmd + shift + p 打开命令面板，搜索 transform to Uppercase, 也可以 cmd + k cmd + u(小写为l) 来执行，选择哪个看自己喜好</li>\n<li>合并代码行 cmd + j 自己试试就知道了，一般没用，因为要格式化</li>\n<li>行排序 命令面板搜索吧，一般没什么用</li>\n<li>撤销光标的移动和选择 cmd + u （这个是神器）</li>\n</ul>\n<h3 id=\"4-多光标特性\"><a href=\"#4-多光标特性\" class=\"headerlink\" title=\"4 多光标特性\"></a>4 多光标特性</h3><ul>\n<li>按住 cmd + 鼠标左键可以创建多光标</li>\n<li>cmd + option + ↑ 可以创建多光标</li>\n<li>cmd + d 第一次按下时，他会选中光标附近的单词，第二次按下时，他会找到这个单词第二次出现的位置，创建一个新的光标，并且选中它</li>\n<li>cmd + k cmd + d 跳过当前这个选择 跳到下一个</li>\n<li>option + shift + i 他是和代码行批量处理有关，先用 ctrl + shift + a 选中括号内的代码，然后按下 option + shift + i 就会在每一行最后都会创建一个光标</li>\n</ul>\n<h3 id=\"5-如何快速在文件-代码-符号之间跳转\"><a href=\"#5-如何快速在文件-代码-符号之间跳转\" class=\"headerlink\" title=\"5 如何快速在文件 代码 符号之间跳转\"></a>5 如何快速在文件 代码 符号之间跳转</h3><h4 id=\"文件跳转\"><a href=\"#文件跳转\" class=\"headerlink\" title=\"文件跳转\"></a>文件跳转</h4><ul>\n<li>ctrl + tab 在打开的文件中跳转</li>\n<li>cmd + p 打开最近的文件列表（cmd + enter 会在侧边打开）</li>\n</ul>\n<h4 id=\"行跳转\"><a href=\"#行跳转\" class=\"headerlink\" title=\"行跳转\"></a>行跳转</h4><ul>\n<li>ctrl + g 直接输入数字跳转(cmd + p 打开命令面板直接输入冒号也是一样的)</li>\n<li>cmd + p 输入文件名直接加冒号 跳转到指定的位置是一个神器 （很喜欢）</li>\n</ul>\n<h4 id=\"符号（symbols）跳转\"><a href=\"#符号（symbols）跳转\" class=\"headerlink\" title=\"符号（symbols）跳转\"></a>符号（symbols）跳转</h4><ul>\n<li>cmd + shift + o 打开当前文件的所有符号，输入 : 就可以将这些符号进行分类，也可以搜索， endter 跳转到符号位置</li>\n</ul>\n<h4 id=\"多文件符号跳转暂且不提\"><a href=\"#多文件符号跳转暂且不提\" class=\"headerlink\" title=\"多文件符号跳转暂且不提 - -\"></a>多文件符号跳转暂且不提 - -</h4><h3 id=\"6-代码自动补全、快速修复和重构\"><a href=\"#6-代码自动补全、快速修复和重构\" class=\"headerlink\" title=\"6 代码自动补全、快速修复和重构\"></a>6 代码自动补全、快速修复和重构</h3><ul>\n<li>tab 补全</li>\n<li>esc 关闭提示</li>\n<li>黄色灯泡可以选择补全和代码重构（提取函数）</li>\n</ul>\n<h3 id=\"7-如何书写-code-snippet\"><a href=\"#7-如何书写-code-snippet\" class=\"headerlink\" title=\"7 如何书写 code snippet\"></a>7 如何书写 code snippet</h3><ul>\n<li><p>代码片段是对常用代码的一个抽象，他保留了大部分不变的代码，然后把需要经常变动的部分，换成变量，这样等下次调用它的时候，只需要把这些变量换成我们需要的就行了</p>\n</li>\n<li><p>javascript.json 一个 block 包含 prefix body description, body 里的内容并不只是一个纯文本，它其实是一个模板。要让它像模板一样工作，我们就需要先理解一个概念，叫做 tab stop，当 body 里的内容被插入到编辑器后你就会发现内容里的 $1 和 $2 不见了，取而代之的是两个竖线，这个 $1 和 $2 就是 tab stop，就是我们按下 tab 之后光标移动到的位置</p>\n</li>\n<li><p>在我们插入 tab stop 的时候，除了 $1 $2 这样的语法，我们还可以填入 ${1:label}, 在这个格式下，代码片段被插入编辑器时，$1 的位置处，会预先填入 label 这个值，并且 label 会被选中, 多光标只需要多次输入 {1:label} 就可以实现多光标 ..</p>\n</li>\n</ul>\n<h3 id=\"8-代码折叠、小地图、面包屑特性\"><a href=\"#8-代码折叠、小地图、面包屑特性\" class=\"headerlink\" title=\"8 代码折叠、小地图、面包屑特性\"></a>8 代码折叠、小地图、面包屑特性</h3><h4 id=\"关于代码折叠\"><a href=\"#关于代码折叠\" class=\"headerlink\" title=\"关于代码折叠\"></a>关于代码折叠</h4><ul>\n<li>cmd + option + [  折叠当前光标所在的内层代码</li>\n<li>cmd + option + ]  展开</li>\n<li>cmd + k cmd + [   递归折叠当前所在代码</li>\n<li>cmd + k cmd + ]   递归展开当前所在代码</li>\n<li>折叠所有代码在我的电脑上不起作用不知道是什么原因 原始是 cmd + k cmd + 0 但是没有作用，自己又设置了 cmd + option + - ，展开是可以的 cmd + k cmd + j 自己设置了快捷键 cmd + option + =，所以现在折叠所有只能在命令面板里输入 fold all</li>\n</ul>\n<h4 id=\"小地图\"><a href=\"#小地图\" class=\"headerlink\" title=\"小地图\"></a>小地图</h4><ul>\n<li>小地图默认是打开的</li>\n<li>设置 editor.minimap.renderCharaters 为 false 就可以关闭小地图上显示的代码，用色块来代替，也可以用 editor.minimap.maxColumn 设置长度，默认 120 我觉得挺合适，很多时候我们只需看下每行代前的缩进和前面的代码高亮，就能看出个大概来了。</li>\n</ul>\n<h4 id=\"面包屑-（breadcrumb）\"><a href=\"#面包屑-（breadcrumb）\" class=\"headerlink\" title=\"面包屑 （breadcrumb）\"></a>面包屑 （breadcrumb）</h4><ul>\n<li>默认是关闭的，需要设置 breadcrumbs.enabled = true</li>\n<li>这是一个新功能，尤其是在函数中的时候可以把对应函数名显示到面包屑上，很舒服，希望在使用的时候它能给你带来一些便利吧</li>\n</ul>\n<h3 id=\"9-极速搜索有时候比-intellisense-还要重要（这里留一个疑问）\"><a href=\"#9-极速搜索有时候比-intellisense-还要重要（这里留一个疑问）\" class=\"headerlink\" title=\"9 极速搜索有时候比 intellisense 还要重要（这里留一个疑问）\"></a>9 极速搜索有时候比 intellisense 还要重要（<strong>这里留一个疑问</strong>）</h3><h4 id=\"单文件搜索\"><a href=\"#单文件搜索\" class=\"headerlink\" title=\"单文件搜索\"></a>单文件搜索</h4><ul>\n<li>cmd + f 编辑器会把当前光标所在位置的单词自动填充到搜索框中，我们可以通过 enter 和 shift + enter 在搜索结果中来回跳转</li>\n<li>cmd + f cmd + g 的操作有bug，期待后续完善（fn+f3）</li>\n<li>大小写敏感 cmd + option + c</li>\n<li>全单词匹配 cmd + option + w</li>\n<li>正则表达式支持 cmd + option + r</li>\n</ul>\n<h4 id=\"搜索配置\"><a href=\"#搜索配置\" class=\"headerlink\" title=\"搜索配置\"></a>搜索配置</h4><ul>\n<li>是否自动填充搜索关键词 editor.find.seedSearchStringFromSelection</li>\n<li>选中多行文本自动在区域中搜索 editor.find.autoFindInSelection</li>\n</ul>\n<h4 id=\"单文件替换\"><a href=\"#单文件替换\" class=\"headerlink\" title=\"单文件替换\"></a>单文件替换</h4><ul>\n<li>编辑替换操作就直接在搜索窗口操作，感觉不需要快捷键</li>\n<li>cmd + option + f 直接掉起替换窗口</li>\n</ul>\n<h4 id=\"多文件搜索和替换\"><a href=\"#多文件搜索和替换\" class=\"headerlink\" title=\"多文件搜索和替换\"></a>多文件搜索和替换</h4><ul>\n<li>cmd + shift + f 调出多文件搜索</li>\n<li>搜索框下面的三个点，能配置包含的文件和排除的文件，书写格式是 glob 语法</li>\n</ul>\n<h4 id=\"多文件搜索配置\"><a href=\"#多文件搜索配置\" class=\"headerlink\" title=\"多文件搜索配置\"></a>多文件搜索配置</h4><ul>\n<li>search.collapseResults : &quot;alwaysExpand&quot; 搜索结果始终打开</li>\n<li>search.location: &quot;panel&quot; 搜索框放到底部</li>\n<li>search.globalFindClipboard 和 editor.find.globalFindClipboard 控制“搜索”视图是否读取或修改 macOS 的共享查找剪贴板</li>\n</ul>\n<h3 id=\"优化编辑器设置\"><a href=\"#优化编辑器设置\" class=\"headerlink\" title=\"优化编辑器设置\"></a>优化编辑器设置</h3><ul>\n<li>编辑器行号 editor.lineNumbers</li>\n<li>编辑器空格 editor.renderWhitespace </li>\n<li>缩进参考线 editor.renderIndentGuides</li>\n<li>垂直标尺   editor.rulers:[120]</li>\n<li>小地图      editor.minimap.enabled</li>\n<li>光标          editor.cursorBlinking | style | width</li>\n<li>当前行高亮  editor.renderLineHeight</li>\n</ul>\n<h3 id=\"什么是工作台和命令面板\"><a href=\"#什么是工作台和命令面板\" class=\"headerlink\" title=\"什么是工作台和命令面板\"></a>什么是工作台和命令面板</h3><h4 id=\"工作台-workbench\"><a href=\"#工作台-workbench\" class=\"headerlink\" title=\"工作台 workbench\"></a>工作台 workbench</h4><ul>\n<li>左侧的几个 UI 组件比较简单，用的该已经熟悉了，需要说的是下面的那个设置按钮，用起来还是比较方便的</li>\n<li>底部是状态栏</li>\n<li>顶部是标题栏</li>\n<li>面板有四个组件 问题面板、输出面板、调试控制台、输出终端，加上我把 search.location 也设置为了 panel，所以会有五个</li>\n</ul>\n<h4 id=\"命令面板\"><a href=\"#命令面板\" class=\"headerlink\" title=\"命令面板\"></a>命令面板</h4><ul>\n<li><p>命令面板（基于文本的交互界面） 输入 ？ 你就可以看到十几条选项，分别代表你能在命令面板中使用不同的功能，首先就是几个符号</p>\n<ol>\n<li><blockquote>\n<p>显示所有命令</p>\n</blockquote>\n</li>\n<li><p>@ 显示跳转和文件中symbols 加 ： 分类</p>\n</li>\n<li><p>&#39;#&#39; 显示跳转和工作区中的符号</p>\n</li>\n<li><p>： lines<br>还有几个就是英文单词或者缩写</p>\n</li>\n<li><p>edt 编辑</p>\n</li>\n<li><p>ext </p>\n</li>\n<li><p>task debug</p>\n</li>\n<li><p>term</p>\n</li>\n<li><p>view 这个就可以打开各个组件</p>\n<h3 id=\"了解文件管理，什么是-multiroot-workspace\"><a href=\"#了解文件管理，什么是-multiroot-workspace\" class=\"headerlink\" title=\"了解文件管理，什么是 multiroot workspace\"></a>了解文件管理，什么是 multiroot workspace</h3></li>\n</ol>\n</li>\n<li><p>资源管理器、关于资源管理器的设置 explorer、</p>\n</li>\n<li><p>.vscode 文件夹、第一个配置文件是 settings.json, 还有另外两个 launch.json tasks.json </p>\n</li>\n<li><p>多文件夹工作区，通过搜索命令面板 add folder to workspace, 添加工作区，save workspace as 之后会有一个后缀为 .code-workspace 的文件，这个文件有两个 key, 一个是 folders，一个是 settings，当然还有两个可选的键 extentsions 和 launch</p>\n</li>\n<li><p>ctrl + r 打开最近的文件夹，cmd + enter 就可以在新窗口打开</p>\n</li>\n<li><p>ctrl + w 切换窗口</p>\n</li>\n</ul>\n<h3 id=\"怎么在编辑器里做好版本管理？\"><a href=\"#怎么在编辑器里做好版本管理？\" class=\"headerlink\" title=\"怎么在编辑器里做好版本管理？\"></a>怎么在编辑器里做好版本管理？</h3><h4 id=\"版本管理视图\"><a href=\"#版本管理视图\" class=\"headerlink\" title=\"版本管理视图\"></a>版本管理视图</h4><ul>\n<li><p>ctrl + shift + g 打开版本管理视图</p>\n</li>\n<li><p>git 和 svn 基本都同样的界面，但是也有差异，先拿 git 来说，比如说 git 有三种主要的文件状态 committed 已提交， Modified 修改， staged 暂存，当我们修改了一个文件，它会变成 Modified， 然后我们通过脚本 git add ${filename} 把这个文件状态改为暂存，被标记为暂存状态的文件，才有机会被提交，最后我们通过 git commit 来提交所有在暂存状态里的文件</p>\n</li>\n</ul>\n<h3 id=\"配置终端模拟器\"><a href=\"#配置终端模拟器\" class=\"headerlink\" title=\"配置终端模拟器\"></a>配置终端模拟器</h3><blockquote>\n<p>图形化界面不可能适应每个人，也不可能替我们完成所有可能的操作</p>\n</blockquote>\n<blockquote>\n<p>vscode 的理念：用图形化的工具，只完成最常用的或者 GUI 擅长做的那些操作，而把剩下的那部分重新交还给终端</p>\n</blockquote>\n<blockquote>\n<p>内置的终端又叫做集成终端</p>\n</blockquote>\n<h4 id=\"创建终端\"><a href=\"#创建终端\" class=\"headerlink\" title=\"创建终端\"></a>创建终端</h4><ul>\n<li>ctrl + ` toggle integrated terminal (切换集成终端, 打开或者关闭)</li>\n<li>ctrl + shift + ` create new integrated terminal (新建集成终端)</li>\n<li>cmd + \\ split terminal （拆分终端）</li>\n<li>终止终端在命令面板中设置 kill the active terminal instance</li>\n</ul>\n<h4 id=\"终端内操作以及设置\"><a href=\"#终端内操作以及设置\" class=\"headerlink\" title=\"终端内操作以及设置\"></a>终端内操作以及设置</h4><p>&quot;terminal.integrated.shell.osx&quot;: &quot;/bin/zsh&quot; 修改启动 shell 环境<br>&quot;terminal.integrated.env.osx&quot;: {} 设置环境变量<br>&quot;terminal.integrated.cwd&quot;: &quot;&quot; shell 启动时的初始目录<br>&quot;terminal.integrated.rightClickBehavior&quot;: &quot;selectWord&quot; 控制右键点击行为<br>&quot;terminal.integrated.scrollback&quot;: 1000 终端运行脚本显示的行数</p>\n<h3 id=\"为你的项目打造-workflow\"><a href=\"#为你的项目打造-workflow\" class=\"headerlink\" title=\"为你的项目打造 workflow\"></a>为你的项目打造 workflow</h3><h4 id=\"执行任务\"><a href=\"#执行任务\" class=\"headerlink\" title=\"执行任务\"></a>执行任务</h4><blockquote>\n<p>任务系统的目的就是将各种形形色色的任务脚本尽可能地统一化，然后提供一套简单又定制化强的方式操作他们</p>\n</blockquote>\n<h5 id=\"任务自动检测\"><a href=\"#任务自动检测\" class=\"headerlink\" title=\"任务自动检测\"></a>任务自动检测</h5><p>如果你的项目中有 typescript grunt jake gulp npm 这几个脚本工具的配置文件的话，vscode 会自动读取当前文件夹下的配置。</p>\n<p>如果有 package.json， 命令面板搜索运行任务 run task 时，就能看到 npm 相关的任务（文件就是 .vscode 下面的 task.json）</p>\n<h5 id=\"自定义任务（configure-task）\"><a href=\"#自定义任务（configure-task）\" class=\"headerlink\" title=\"自定义任务（configure task）\"></a>自定义任务（configure task）</h5><ul>\n<li>type 为 shell</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class=\"line\">  &quot;tasks&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;label&quot;: &quot;echo&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;shell&quot;, // 默认 shell</span><br><span class=\"line\">      &quot;command&quot;: &quot;echo Hello&quot;  // 命令或者程序</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>type 为 process, 打开 qq 浏览器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      &quot;label&quot;: &quot;QQBrowser&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;process&quot;,</span><br><span class=\"line\">      &quot;command&quot;: &quot;/Applications/QQBrowser.app/Contents/MacOS/QQBrowser&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"分组和结果显示\"><a href=\"#分组和结果显示\" class=\"headerlink\" title=\"分组和结果显示\"></a>分组和结果显示</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;label&quot;: &quot;test shell&quot;,</span><br><span class=\"line\">  &quot;type&quot;: &quot;shell&quot;,</span><br><span class=\"line\">  &quot;command&quot;: &quot;./test.sh&quot;,</span><br><span class=\"line\">  &quot;args&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t&quot;value&quot;: &quot;hello&quot;,</span><br><span class=\"line\">    \t&quot;quoting&quot;: &quot;escape&quot; // 默认使用 escape，strong 是单引号，weak 是双引号</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  &quot;windows&quot;: &#123;</span><br><span class=\"line\">    &quot;command&quot;: &quot;.\\\\scripts\\\\test.cmd&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;group&quot;: &#123;   // 三种选择 build test none</span><br><span class=\"line\">    &quot;isDefault&quot;: true,   // 设为默认运行测试任务</span><br><span class=\"line\">    &quot;kind&quot;: &quot;test&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;presentation&quot;: &#123;  // 任务运行的时候是否调出运行的界面</span><br><span class=\"line\">    &quot;reveal&quot;: &quot;always&quot;,  </span><br><span class=\"line\">    &quot;panel&quot;: &quot;new&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;options&quot;: &#123;</span><br><span class=\"line\">    &quot;cwd&quot;: &quot;&quot;, // 任务脚本文件夹地址</span><br><span class=\"line\">    &quot;env&quot;: &#123;&#125;, // 环境变量</span><br><span class=\"line\">    &quot;shell&quot;: &#123; // 指定 shell 环境</span><br><span class=\"line\">      &quot;executable&quot;: &quot;bash&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>  <strong>但是现在有一个问题就是 run test 可以运行，但是 cmd shift b 却不行</strong></p>\n<h3 id=\"debugger\"><a href=\"#debugger\" class=\"headerlink\" title=\"debugger\"></a>debugger</h3><h4 id=\"调试窗口\"><a href=\"#调试窗口\" class=\"headerlink\" title=\"调试窗口\"></a>调试窗口</h4><ul>\n<li>打开 cmd + shift + d</li>\n<li>f5 开始调试</li>\n</ul>\n<p>vscode 用于配置调试的文件也是一个 json 文件，launch.json</p>\n<h4 id=\"调试-launch-json\"><a href=\"#调试-launch-json\" class=\"headerlink\" title=\"调试 launch.json\"></a>调试 launch.json</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> // 使用 IntelliSense 了解相关属性。 </span><br><span class=\"line\"> // 悬停以查看现有属性的描述。</span><br><span class=\"line\"> // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class=\"line\"> &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class=\"line\"> &quot;configurations&quot;: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   &quot;type&quot;: &quot;node&quot;, // 调试器的类型</span><br><span class=\"line\">   &quot;request&quot;: &quot;launch&quot;, // 如果我们的代码已经运行起来了，则可以将它的值设为 attach 我们则是使用调试器来调试已有的代码进程，如果值是 launch，意味着我们会使用调试器来调试这个已有的代码进程</span><br><span class=\"line\">   &quot;name&quot;: &quot; 启动程序 &quot;, // 这个配置的名字</span><br><span class=\"line\">   &quot;program&quot;: &quot;$&#123;file&#125;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>剩下的模板和智能提示已经做得很好了，还有就是新增加的参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;type&quot;: &quot;node&quot;,</span><br><span class=\"line\"> &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\"> &quot;name&quot;: &quot;Gulp task&quot;,</span><br><span class=\"line\"> &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/node_modules/gulp/bin/gulp.js&quot;,</span><br><span class=\"line\"> &quot;args&quot;: [ // 传入的参数</span><br><span class=\"line\">  &quot;task&quot;</span><br><span class=\"line\"> ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"你不知道的工作区快捷键\"><a href=\"#你不知道的工作区快捷键\" class=\"headerlink\" title=\"你不知道的工作区快捷键\"></a>你不知道的工作区快捷键</h3><h4 id=\"编辑器操作\"><a href=\"#编辑器操作\" class=\"headerlink\" title=\"编辑器操作\"></a>编辑器操作</h4><h5 id=\"横向编辑器组（多个编辑器称为编辑器组-editor-group）\"><a href=\"#横向编辑器组（多个编辑器称为编辑器组-editor-group）\" class=\"headerlink\" title=\"横向编辑器组（多个编辑器称为编辑器组 editor group）\"></a>横向编辑器组（多个编辑器称为编辑器组 editor group）</h5><ul>\n<li>拆分编辑器 （split editor） cmd + \\</li>\n<li>关闭编辑器依然可以用 cmd + w</li>\n<li>编辑器组之间快速跳转 ctrl + 1、2</li>\n</ul>\n<h5 id=\"纵向编辑器组\"><a href=\"#纵向编辑器组\" class=\"headerlink\" title=\"纵向编辑器组\"></a>纵向编辑器组</h5><ul>\n<li>切换垂直/水平编辑器布局（flip editor group layout） cmd + option + 0</li>\n</ul>\n<h5 id=\"Tab\"><a href=\"#Tab\" class=\"headerlink\" title=\"Tab\"></a>Tab</h5><ul>\n<li>打开上一个/下一个编辑器（open next/previous editor）cmd + option + ←/→ 需要注意的是这个命令会打开编辑器中的每一个tab，如果你需要在 group 中你需要（open next editor in group）</li>\n</ul>\n<h5 id=\"移动编辑器-tab\"><a href=\"#移动编辑器-tab\" class=\"headerlink\" title=\"移动编辑器 tab\"></a>移动编辑器 tab</h5><ul>\n<li>move editor into next/previous group</li>\n</ul>\n<h5 id=\"grid-布局\"><a href=\"#grid-布局\" class=\"headerlink\" title=\"grid 布局\"></a>grid 布局</h5><ul>\n<li>grid editor layout 2*2</li>\n<li>聚焦到上方编辑器组（focus above editor group）</li>\n</ul>\n<h5 id=\"drag-amp-drop\"><a href=\"#drag-amp-drop\" class=\"headerlink\" title=\"drag &amp; drop\"></a>drag &amp; drop</h5><p>虽然网格系统很强大，但是不一定它就一定是合适的，一般而言，左右两个编辑器组就够用了，只需要熟悉几个快捷键就行了，还有就是可以使用鼠标，拖到你想要的位置</p>\n<h5 id=\"专注模式\"><a href=\"#专注模式\" class=\"headerlink\" title=\"专注模式\"></a>专注模式</h5><ul>\n<li>关闭视图（toggle ） cmd + b</li>\n<li>关闭面板（toggle panel） cmd + J</li>\n<li>切换活动栏（toggle activity bar visibility）</li>\n<li>切换状态栏（toggle status bar visibility）</li>\n<li>切换禅模式（toggle zen model）,esc退出</li>\n<li>切换居中布局（toggle centered layout）</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/11/8c/1111c17d45a16da352a5b71f05c6d18c.png\" alt=\"创造自己的工作台\" loading=\"lazy\"></p>\n<h3 id=\"编辑器设置和快捷键\"><a href=\"#编辑器设置和快捷键\" class=\"headerlink\" title=\"编辑器设置和快捷键\"></a>编辑器设置和快捷键</h3><p>主要说快捷键绑定的一些操作，其他的操作都比较简单，有图形化的界面</p>\n<p>打开 keybindings.json 在右边可以设置自己的快捷键</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;key&quot;: &quot;cmd+enter&quot;,   // 按键</span><br><span class=\"line\">  &quot;command&quot;: &quot;command&quot;,  // 为那个命令指定快捷键</span><br><span class=\"line\">  &quot;when&quot;: &quot;editorTextFocus&quot; // 条件</span><br><span class=\"line\">  \t\t可以用 ！ ==  &amp;&amp; 和 =~（正则）</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要删除快捷键在 command 上加 - 就行了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;key&quot;: &quot;cmd+s&quot;,</span><br><span class=\"line\">  &quot;command&quot;: &quot;-workbench.action.files.save&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"基础语言支持：JSON-Markdown\"><a href=\"#基础语言支持：JSON-Markdown\" class=\"headerlink\" title=\"基础语言支持：JSON Markdown\"></a>基础语言支持：JSON Markdown</h3><h4 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h4><p>vscode 的配置文件、任务系统、代码片段都是使用 JSON 语法，而且 vscode 为文件指定了一个特殊的 JSON 文件类型，称为 JSON width Comments</p>\n<p>与此同时，JSON 的语言服务支持 JSON Schema，可以规范 JSON 内容的格式，和做一定程度的语法检查</p>\n<p>在自己的个人设置或者工作区设置中可以有三种情况，修改 json.schemas 就行了</p>\n<h5 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;$schema&quot;: &quot;http://json.schemastore.org/babelrc&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;json.schemas&quot;: [</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        &quot;fileMatch&quot;: [</span><br><span class=\"line\">            &quot;/.babelrc&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;url&quot;: &quot;http://json.schemastore.org/babelrc&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"第三种\"><a href=\"#第三种\" class=\"headerlink\" title=\"第三种\"></a>第三种</h5><p><strong>注意默认情况下 vscode 并不认识自己设置的文件，需要点击语言设置选择 JSON</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;fileMatch&quot;: [</span><br><span class=\"line\">    &quot;/.myconfig&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;schema&quot;: &#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;object&quot;,</span><br><span class=\"line\">    &quot;properties&quot;: &#123;</span><br><span class=\"line\">      &quot;name&quot;: &#123;</span><br><span class=\"line\">        &quot;type&quot;: &quot;string&quot;,</span><br><span class=\"line\">        &quot;description&quot;: &quot;the name of the iiicon wanna&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"前端语言支持\"><a href=\"#前端语言支持\" class=\"headerlink\" title=\"前端语言支持\"></a>前端语言支持</h3><h4 id=\"基础语言支持\"><a href=\"#基础语言支持\" class=\"headerlink\" title=\"基础语言支持\"></a>基础语言支持</h4><p>转到定义 go to definition (F12)<br>格式化文件 fromat document<br>符号跳转 cmd shift o<br>函数建议列表和参数建议</p>\n<h4 id=\"类型提示\"><a href=\"#类型提示\" class=\"headerlink\" title=\"类型提示\"></a>类型提示</h4><h5 id=\"JSDoc\"><a href=\"#JSDoc\" class=\"headerlink\" title=\"JSDoc\"></a>JSDoc</h5><h5 id=\"typings-d-ts\"><a href=\"#typings-d-ts\" class=\"headerlink\" title=\"typings/d.ts\"></a>typings/d.ts</h5><p>VS Code 会自动搜索，找到合适的 d.ts 文件，然后下载下来，接着就能提供智能提示功能了，这种功能又叫做自动采集功能 auto type acquisition    </p>\n<h5 id=\"ts-check-真是一个好东西\"><a href=\"#ts-check-真是一个好东西\" class=\"headerlink\" title=\"ts-check(真是一个好东西)\"></a>ts-check(真是一个好东西)</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// @ts-check 手动开启更强的代码审核</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模块引用\"><a href=\"#模块引用\" class=\"headerlink\" title=\"模块引用\"></a>模块引用</h4><h5 id=\"相对地址引用\"><a href=\"#相对地址引用\" class=\"headerlink\" title=\"相对地址引用\"></a>相对地址引用</h5><h5 id=\"jsconfig-json\"><a href=\"#jsconfig-json\" class=\"headerlink\" title=\"jsconfig.json\"></a>jsconfig.json</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">        &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class=\"line\">        &quot;target&quot;: &quot;es2016&quot;,</span><br><span class=\"line\">        &quot;baseUrl&quot;: &quot;.&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;exclude&quot;: [</span><br><span class=\"line\">        &quot;node_modules&quot;,</span><br><span class=\"line\">        &quot;**/node_modules/*&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"自模块引用-auto-imports\"><a href=\"#自模块引用-auto-imports\" class=\"headerlink\" title=\"自模块引用 auto imports\"></a>自模块引用 auto imports</h5><h5 id=\"自动模块更新\"><a href=\"#自动模块更新\" class=\"headerlink\" title=\"自动模块更新\"></a>自动模块更新</h5><p>当你文件的路径改变的时候会自动修改 import 的文件路径</p>\n<h4 id=\"代码审查-tsconfig-checkJs\"><a href=\"#代码审查-tsconfig-checkJs\" class=\"headerlink\" title=\"代码审查 tsconfig/checkJs\"></a>代码审查 tsconfig/checkJs</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">        &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class=\"line\">        &quot;target&quot;: &quot;es2016&quot;,</span><br><span class=\"line\">        &quot;baseUrl&quot;: &quot;.&quot;,</span><br><span class=\"line\">        &quot;paths&quot;: &#123;</span><br><span class=\"line\">            &quot;*&quot;: [</span><br><span class=\"line\">                &quot;*&quot;,</span><br><span class=\"line\">                &quot;common/*&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;checkJs&quot;: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;exclude&quot;: [</span><br><span class=\"line\">        &quot;node_modules&quot;,</span><br><span class=\"line\">        &quot;**/node_modules/*&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h4><blockquote>\n<p>vscode 的代码调试 api，nodejs 是支持最好的</p>\n</blockquote>\n<h5 id=\"代码调试-auto-attach\"><a href=\"#代码调试-auto-attach\" class=\"headerlink\" title=\"代码调试 auto attach\"></a>代码调试 auto attach</h5><p>打开命令面板 输入切换开关自动附加 toggle auto attach, 然后打断点，接着执行命令 <code>node --inspect-brk index.js</code>,个人感觉用处不大的原因可能还是平时不怎么写 node，写 node 的话可以省去平时写 lunch.json 的麻烦</p>\n<h5 id=\"记录点-logpoints\"><a href=\"#记录点-logpoints\" class=\"headerlink\" title=\"记录点 logpoints\"></a>记录点 logpoints</h5><p>一样可以得到输出结果，而且不用改变代码</p>\n<h3 id=\"HTML、CSS-以及前端开关神器-Emmet-介绍与支持\"><a href=\"#HTML、CSS-以及前端开关神器-Emmet-介绍与支持\" class=\"headerlink\" title=\"HTML、CSS 以及前端开关神器 Emmet 介绍与支持\"></a>HTML、CSS 以及前端开关神器 Emmet 介绍与支持</h3><h4 id=\"HTML、CSS\"><a href=\"#HTML、CSS\" class=\"headerlink\" title=\"HTML、CSS\"></a>HTML、CSS</h4><h5 id=\"1-取色器-color-picker\"><a href=\"#1-取色器-color-picker\" class=\"headerlink\" title=\"1 取色器 color picker\"></a>1 取色器 color picker</h5><p>五个部件 饱和度（saturation）透明度（opacity）色相（hue）上方左侧不同写法，右侧回退之前</p>\n<h5 id=\"2-预览\"><a href=\"#2-预览\" class=\"headerlink\" title=\"2 预览\"></a>2 预览</h5><p>经测试也只能在 css 中预览 html 结构</p>\n<h4 id=\"Emmet\"><a href=\"#Emmet\" class=\"headerlink\" title=\"Emmet\"></a>Emmet</h4><pre><code>子节点操作符 &gt;\nul&gt;li\n\n兄弟节点操作符 +\ndiv+p+bq\n\n乘法操作 *\nul&gt;li*3\n\nclass name Id\nul#list&gt;list*3\n\n官方例子\n#page&gt;div.logo+ul#navigation&gt;li*5&gt;a&#123;Item $&#125;\n</code></pre>\n<h4 id=\"Emmet-in-vscode\"><a href=\"#Emmet-in-vscode\" class=\"headerlink\" title=\"Emmet in vscode\"></a>Emmet in vscode</h4><h5 id=\"展开缩写\"><a href=\"#展开缩写\" class=\"headerlink\" title=\"展开缩写\"></a>展开缩写</h5><p>默认 tab 展开是关闭的 可以设置 <code>emmet.triggerExpansionOnTab</code></p>\n<h5 id=\"建议列表\"><a href=\"#建议列表\" class=\"headerlink\" title=\"建议列表\"></a>建议列表</h5><p>比如 p10 padding: 10px</p>\n<h5 id=\"使用缩写包围\"><a href=\"#使用缩写包围\" class=\"headerlink\" title=\"使用缩写包围\"></a>使用缩写包围</h5><p>选中要包围的标签，打开命令面板输入缩写包围，wrap with abbreviation</p>\n<h5 id=\"多光标也支持缩写包围\"><a href=\"#多光标也支持缩写包围\" class=\"headerlink\" title=\"多光标也支持缩写包围\"></a>多光标也支持缩写包围</h5><h5 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h5><p>标签转至配对 emmet: 转至匹配对（go to matching pair）<br>删除标签对 emmet: 移除标签 （remove tag）</p>\n<h5 id=\"在某个语言中打开-emmet-支持\"><a href=\"#在某个语言中打开-emmet-支持\" class=\"headerlink\" title=\"在某个语言中打开 emmet 支持\"></a>在某个语言中打开 emmet 支持</h5><pre><code>&quot;emmet.includeLanguages&quot;: &#123;\n    &quot;wxml&quot;: &quot;html&quot;,\n    &quot;vue-html&quot;: &quot;html&quot;\n&#125;\n</code></pre>\n<h3 id=\"如何深度定制自己的主题\"><a href=\"#如何深度定制自己的主题\" class=\"headerlink\" title=\"如何深度定制自己的主题\"></a>如何深度定制自己的主题</h3><h4 id=\"固定-UI-视图\"><a href=\"#固定-UI-视图\" class=\"headerlink\" title=\"固定 UI 视图\"></a>固定 UI 视图</h4><ul>\n<li>切换状态栏可见性 toggle status bar visibility</li>\n<li>切换侧边栏位置 toggle side bar position</li>\n<li>切换搜索视图位置 </li>\n</ul>\n<h4 id=\"修改工作区配色\"><a href=\"#修改工作区配色\" class=\"headerlink\" title=\"修改工作区配色\"></a>修改工作区配色</h4><p><em>个人表示懒得弄</em></p>\n<pre><code>workbench.colorCustomizations 触发提示就能看到了\n</code></pre>\n<h4 id=\"修改编辑器配色\"><a href=\"#修改编辑器配色\" class=\"headerlink\" title=\"修改编辑器配色\"></a>修改编辑器配色</h4><p>检查 TM 作用域（inspect TM scope）运行这个命令会有一个悬浮窗口呈现，就是当前代码缩对应的语言、语法类型以及当前的颜色和背景色</p>\n<pre><code>editor.tokenColorCustomization 设置颜色\n</code></pre>\n<h4 id=\"基于主题修改配色\"><a href=\"#基于主题修改配色\" class=\"headerlink\" title=\"基于主题修改配色\"></a>基于主题修改配色</h4><p>也一样，设置的时候先选择主题就行了</p>\n<h3 id=\"一些可能没有用的-tips-amp-tricks\"><a href=\"#一些可能没有用的-tips-amp-tricks\" class=\"headerlink\" title=\"一些可能没有用的 tips &amp; tricks\"></a>一些可能没有用的 tips &amp; tricks</h3><p>跳转 F12 自己的 mac 只能切屏 不起作用</p>\n","categories":["工具"],"tags":["vscode","compiler"]},{"title":"vue3之CompositionAPI相关","url":"/blog-next/2020/08/20/vue3%E4%B9%8BCompositionAPI%E7%9B%B8%E5%85%B3/","content":"<h1 id=\"组件渲染前的初始化过程\"><a href=\"#组件渲染前的初始化过程\" class=\"headerlink\" title=\"组件渲染前的初始化过程\"></a>组件渲染前的初始化过程</h1><p>Vue.js 3.0 允许我们在编写组件的时候添加一个 setup 启动函数，它是 Composition API 逻辑组织的入口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;increment&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    Count is: &#123;&#123; state.count &#125;&#125;, double is: &#123;&#123; state.double &#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">import</span> &#123; reactive, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">const</span> state = reactive(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">count</span>: <span class=\"number\">0</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">double</span>: computed(<span class=\"function\">() =&gt;</span> state.count * <span class=\"number\">2</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">increment</span>(<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      state.count++</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      state,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      increment</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>这里的 state 和 increment 包含在 setup 函数的返回对象中，那么他是如何模板中引用的？</strong></p>\n<p>在 <code>vue.js2.x</code> 编写组件的时候，会在 <code>props、data、methods、computed</code> 等 <code>options</code> 中定义一些变量。在组件初始化阶段，<code>vue.js</code> 内部会处理这些 <code>options</code>，即把定义的变量添加到了组件实例上。等模板编译成 <code>render</code> 函数的时候，内部通过 <code>with(this)&#123;&#125;</code> 的语法去访问在组件实例中的变量</p>\n<p><code>vue3</code> 的 <code>setup</code> 函数的执行逻辑是在设置组件实例的时候处理的</p>\n<h2 id=\"创建和设置组件实例\"><a href=\"#创建和设置组件实例\" class=\"headerlink\" title=\"创建和设置组件实例\"></a>创建和设置组件实例</h2><p>组件的渲染流程是 创建 <code>vnode</code> 渲染 <code>vnode</code> 和生成 <code>dom</code></p>\n<p>其中渲染 vnode 的过程主要就是在挂载组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mountComponent = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  initialVNode,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  anchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建组件实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = (initialVNode.component = createComponentInstance(</span><br><span class=\"line\">    initialVNode,</span><br><span class=\"line\">    parentComponent,</span><br><span class=\"line\">    parentSuspense</span><br><span class=\"line\">  ));</span><br><span class=\"line\">  <span class=\"comment\">// 设置组件实例</span></span><br><span class=\"line\">  setupComponent(instance);</span><br><span class=\"line\">  <span class=\"comment\">// 设置并运行带副作用的渲染函数</span></span><br><span class=\"line\">  setupRenderEffect(</span><br><span class=\"line\">    instance,</span><br><span class=\"line\">    initialVNode,</span><br><span class=\"line\">    container,</span><br><span class=\"line\">    anchor,</span><br><span class=\"line\">    parentSuspense,</span><br><span class=\"line\">    isSVG,</span><br><span class=\"line\">    optimized</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>先看创建组件实例的过程，这个过程主要是执行了 <code>createComponentInstance</code> 创建组件实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComponentInstance</span>(<span class=\"params\">vnode, parent, suspense</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 继承父组件实例上的 appContext，如果是根组件，则直接从根 vnode 中取。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> appContext =</span><br><span class=\"line\">    (parent ? parent.appContext : vnode.appContext) || emptyAppContext;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 组件唯一 id</span></span><br><span class=\"line\">    <span class=\"attr\">uid</span>: uid++,</span><br><span class=\"line\">    <span class=\"comment\">// 组件 vnode</span></span><br><span class=\"line\">    vnode,</span><br><span class=\"line\">    <span class=\"comment\">// 父组件实例</span></span><br><span class=\"line\">    parent,</span><br><span class=\"line\">    <span class=\"comment\">// app 上下文</span></span><br><span class=\"line\">    appContext,</span><br><span class=\"line\">    <span class=\"comment\">// vnode 节点类型</span></span><br><span class=\"line\">    <span class=\"attr\">type</span>: vnode.type,</span><br><span class=\"line\">    <span class=\"comment\">// 根组件实例</span></span><br><span class=\"line\">    <span class=\"attr\">root</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 新的组件 vnode</span></span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 子节点 vnode</span></span><br><span class=\"line\">    <span class=\"attr\">subTree</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 带副作用更新函数</span></span><br><span class=\"line\">    <span class=\"attr\">update</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 渲染函数</span></span><br><span class=\"line\">    <span class=\"attr\">render</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 渲染上下文代理</span></span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 带有 with 区块的渲染上下文代理</span></span><br><span class=\"line\">    <span class=\"attr\">withProxy</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 响应式相关对象</span></span><br><span class=\"line\">    <span class=\"attr\">effects</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 依赖注入相关</span></span><br><span class=\"line\">    <span class=\"attr\">provides</span>: parent ? parent.provides : <span class=\"built_in\">Object</span>.create(appContext.provides),</span><br><span class=\"line\">    <span class=\"comment\">// 渲染代理的属性访问缓存</span></span><br><span class=\"line\">    <span class=\"attr\">accessCache</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 渲染缓存</span></span><br><span class=\"line\">    <span class=\"attr\">renderCache</span>: [],</span><br><span class=\"line\">    <span class=\"comment\">// 渲染上下文</span></span><br><span class=\"line\">    <span class=\"attr\">ctx</span>: EMPTY_OBJ,</span><br><span class=\"line\">    <span class=\"comment\">// data 数据</span></span><br><span class=\"line\">    <span class=\"attr\">data</span>: EMPTY_OBJ,</span><br><span class=\"line\">    <span class=\"comment\">// props 数据</span></span><br><span class=\"line\">    <span class=\"attr\">props</span>: EMPTY_OBJ,</span><br><span class=\"line\">    <span class=\"comment\">// 普通属性</span></span><br><span class=\"line\">    <span class=\"attr\">attrs</span>: EMPTY_OBJ,</span><br><span class=\"line\">    <span class=\"comment\">// 插槽相关</span></span><br><span class=\"line\">    <span class=\"attr\">slots</span>: EMPTY_OBJ,</span><br><span class=\"line\">    <span class=\"comment\">// 组件或者 DOM 的 ref 引用</span></span><br><span class=\"line\">    <span class=\"attr\">refs</span>: EMPTY_OBJ,</span><br><span class=\"line\">    <span class=\"comment\">// setup 函数返回的响应式结果</span></span><br><span class=\"line\">    <span class=\"attr\">setupState</span>: EMPTY_OBJ,</span><br><span class=\"line\">    <span class=\"comment\">// setup 函数上下文数据</span></span><br><span class=\"line\">    <span class=\"attr\">setupContext</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 注册的组件</span></span><br><span class=\"line\">    <span class=\"attr\">components</span>: <span class=\"built_in\">Object</span>.create(appContext.components),</span><br><span class=\"line\">    <span class=\"comment\">// 注册的指令</span></span><br><span class=\"line\">    <span class=\"attr\">directives</span>: <span class=\"built_in\">Object</span>.create(appContext.directives),</span><br><span class=\"line\">    <span class=\"comment\">// suspense 相关</span></span><br><span class=\"line\">    suspense,</span><br><span class=\"line\">    <span class=\"comment\">// suspense 异步依赖</span></span><br><span class=\"line\">    <span class=\"attr\">asyncDep</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// suspense 异步依赖是否都已处理</span></span><br><span class=\"line\">    <span class=\"attr\">asyncResolved</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 是否挂载</span></span><br><span class=\"line\">    <span class=\"attr\">isMounted</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 是否卸载</span></span><br><span class=\"line\">    <span class=\"attr\">isUnmounted</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 是否激活</span></span><br><span class=\"line\">    <span class=\"attr\">isDeactivated</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期，before create</span></span><br><span class=\"line\">    <span class=\"attr\">bc</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期，created</span></span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期，before mount</span></span><br><span class=\"line\">    <span class=\"attr\">bm</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期，mounted</span></span><br><span class=\"line\">    <span class=\"attr\">m</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期，before update</span></span><br><span class=\"line\">    <span class=\"attr\">bu</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期，updated</span></span><br><span class=\"line\">    <span class=\"attr\">u</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期，unmounted</span></span><br><span class=\"line\">    <span class=\"attr\">um</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期，before unmount</span></span><br><span class=\"line\">    <span class=\"attr\">bum</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期, deactivated</span></span><br><span class=\"line\">    <span class=\"attr\">da</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期 activated</span></span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期 render triggered</span></span><br><span class=\"line\">    <span class=\"attr\">rtg</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期 render tracked</span></span><br><span class=\"line\">    <span class=\"attr\">rtc</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期 error captured</span></span><br><span class=\"line\">    <span class=\"attr\">ec</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 派发事件方法</span></span><br><span class=\"line\">    <span class=\"attr\">emit</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化渲染上下文</span></span><br><span class=\"line\">  instance.ctx = &#123; <span class=\"attr\">_</span>: instance &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化根组件指针</span></span><br><span class=\"line\">  instance.root = parent ? parent.root : instance;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化派发事件方法</span></span><br><span class=\"line\">  instance.emit = emit.bind(<span class=\"literal\">null</span>, instance);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>vue2</code> 通过 <code>new Vue</code>来初始化一个组件实例，到了 <code>vue3</code> 我们直接通过创建对象去创建组件的实例，这两种方法并无本质的区别，都是引用一个对象，在整个组件的生命周期中去维护组件的状态数据和上下文环境</p>\n<p>创建好 <code>instance</code> 实例后，接下来就是设置它的一些属性，目前已完成了组件的上下文，根组件指针以及派发事件方法的设置</p>\n<p>接着是组件实例的设置流程，对 <code>setup</code> 函数的处理就在这里完成，主要就是执行 <code>setComponent</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setupComponent</span>(<span class=\"params\">instance, isSSR = <span class=\"literal\">false</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; props, children, shapeFlag &#125; = instance.vnode;</span><br><span class=\"line\">  <span class=\"comment\">// 判断是否是一个有状态的组件</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isStateful = shapeFlag &amp; <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化 props</span></span><br><span class=\"line\">  initProps(instance, props, isStateful, isSSR);</span><br><span class=\"line\">  <span class=\"comment\">// 初始化 插槽</span></span><br><span class=\"line\">  initSlots(instance, children);</span><br><span class=\"line\">  <span class=\"comment\">// 设置有状态的组件实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setupResult = isStateful</span><br><span class=\"line\">    ? setupStatefulComponent(instance, isSSR)</span><br><span class=\"line\">    : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> setupResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里从组件 <code>vnode</code> 中获取了 <code>props</code> <code>children</code> <code>shapeFlag</code> 等属性，然后分别对 <code>props</code> 和插槽进行初始化，然后根据 <code>shapeFlag</code> 的值，我们判断如果是一个有状态的组件，就要去设置<br>执行 <code>setupStatefulComponent</code> 函数，它主要做了三件事，创建渲染上下文代理、判断处理 setup 函数、完成组件实例设置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setupStatefulComponent</span>(<span class=\"params\">instance, isSSR</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> Component = instance.type;</span><br><span class=\"line\">  <span class=\"comment\">// 创建渲染代理的属性访问缓存</span></span><br><span class=\"line\">  instance.accessCache = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 创建渲染上下文代理</span></span><br><span class=\"line\">  instance.proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(instance.ctx, PublicInstanceProxyHandlers);</span><br><span class=\"line\">  <span class=\"comment\">// 判断处理 setup 函数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; setup &#125; = Component;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (setup) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 setup 函数带参数，则创建一个 setupContext</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> setupContext = (instance.setupContext =</span><br><span class=\"line\">      setup.length &gt; <span class=\"number\">1</span> ? createSetupContext(instance) : <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行 setup 函数，获取结果</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> setupResult = callWithErrorHandling(</span><br><span class=\"line\">      setup,</span><br><span class=\"line\">      instance,</span><br><span class=\"line\">      <span class=\"number\">0</span> <span class=\"comment\">/* SETUP_FUNCTION */</span>,</span><br><span class=\"line\">      [instance.props, setupContext]</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 处理 setup 执行结果</span></span><br><span class=\"line\">    handleSetupResult(instance, setupResult);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 完成组件实例设置</span></span><br><span class=\"line\">    finishComponentSetup(instance);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建渲染上下文代理\"><a href=\"#创建渲染上下文代理\" class=\"headerlink\" title=\"创建渲染上下文代理\"></a>创建渲染上下文代理</h3><p>这一步就是对 <code>instance.ctx</code> 做了代理</p>\n<p><code>vue2</code> 在初始化组件的时候，<code>data</code> 中定义的 <code>msg</code> 在组件内部是存储在 <code>this._data</code> 上的，而模板渲染的时候访问 <code>this.msg</code> 实际上是访问 <code>this._data.msg</code>，这是因为访问 <code>data</code> 的时候做了一层代理</p>\n<p><code>vue3</code> 为了方便维护，我们把组件中不同状态的数据存储到不同的属性中，比如存储到 <code>setupState</code> <code>ctx</code> <code>data</code> <code>props</code> 中。我们在执行组件渲染函数的时候，为了方便用户使用，会直接访问渲染上下文 <code>instance.ctx</code>，所以这里的代理就是对渲染上下文 <code>instance.ctx</code> 属性的访问和修改，代理到对 <code>setupState</code> <code>ctx</code> <code>data</code> <code>props</code> 中的数据的访问和修改</p>\n<p>接下了分析一下 proxy 的几个方法 get has set</p>\n<h4 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PublicInstanceProxyHandlers = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">&#123; _: instance &#125;, key</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      ctx,</span><br><span class=\"line\">      setupState,</span><br><span class=\"line\">      data,</span><br><span class=\"line\">      props,</span><br><span class=\"line\">      accessCache,</span><br><span class=\"line\">      type,</span><br><span class=\"line\">      appContext,</span><br><span class=\"line\">    &#125; = instance;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] !== <span class=\"string\">&quot;$&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// setupState / data / props / ctx</span></span><br><span class=\"line\">      <span class=\"comment\">// 渲染代理的属性访问缓存中</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> n = accessCache[key];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从缓存中取</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (n) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"number\">0</span> <span class=\"comment\">/* SETUP */</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> setupState[key];</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"number\">1</span> <span class=\"comment\">/* DATA */</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data[key];</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"number\">3</span> <span class=\"comment\">/* CONTEXT */</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ctx[key];</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"number\">2</span> <span class=\"comment\">/* PROPS */</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> props[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setupState !== EMPTY_OBJ &amp;&amp; hasOwn(setupState, key)) &#123;</span><br><span class=\"line\">        accessCache[key] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从 setupState 中取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> setupState[key];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data !== EMPTY_OBJ &amp;&amp; hasOwn(data, key)) &#123;</span><br><span class=\"line\">        accessCache[key] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从 data 中取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[key];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        type.props &amp;&amp;</span><br><span class=\"line\">        hasOwn(normalizePropsOptions(type.props)[<span class=\"number\">0</span>], key)</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        accessCache[key] = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从 props 中取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> props[key];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ctx !== EMPTY_OBJ &amp;&amp; hasOwn(ctx, key)) &#123;</span><br><span class=\"line\">        accessCache[key] = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从 ctx 中取数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ctx[key];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 都取不到</span></span><br><span class=\"line\">        accessCache[key] = <span class=\"number\">4</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> publicGetter = publicPropertiesMap[key];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cssModule, globalProperties;</span><br><span class=\"line\">    <span class=\"comment\">// 公开的 $xxx 属性或方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (publicGetter) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> publicGetter(instance);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"comment\">// css 模块，通过 vue-loader 编译的时候注入</span></span><br><span class=\"line\">      (cssModule = type.__cssModules) &amp;&amp;</span><br><span class=\"line\">      (cssModule = cssModule[key])</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cssModule;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ctx !== EMPTY_OBJ &amp;&amp; hasOwn(ctx, key)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 用户自定义的属性，也用 `$` 开头</span></span><br><span class=\"line\">      accessCache[key] = <span class=\"number\">3</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ctx[key];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"comment\">// 全局定义的属性</span></span><br><span class=\"line\">      ((globalProperties = appContext.config.globalProperties),</span><br><span class=\"line\">      hasOwn(globalProperties, key))</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> globalProperties[key];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp;</span><br><span class=\"line\">      currentRenderingInstance &amp;&amp;</span><br><span class=\"line\">      key.indexOf(<span class=\"string\">&quot;__v&quot;</span>) !== <span class=\"number\">0</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data !== EMPTY_OBJ &amp;&amp; key[<span class=\"number\">0</span>] === <span class=\"string\">&quot;$&quot;</span> &amp;&amp; hasOwn(data, key)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果在 data 中定义的数据以 $ 开头，会报警告，因为 $ 是保留字符，不会做代理</span></span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">`Property <span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">            key</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">          )&#125;</span> must be accessed via $data because it starts with a reserved `</span> +</span><br><span class=\"line\">            <span class=\"string\">`character and is not proxied on the render context.`</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在模板中使用的变量如果没有定义，报警告</span></span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">`Property <span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(key)&#125;</span> was accessed during render `</span> +</span><br><span class=\"line\">            <span class=\"string\">`but is not defined on instance.`</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，函数首先判断 <code>key</code> 不以 <code>$</code> 开头的情况，这部分数据可能是 <code>setupState</code> <code>data</code> <code>props</code> <code>ctx</code> 中的一种，其中 <code>data</code> <code>props</code> 我们已经很熟悉了，<code>setupState</code> 就是 <code>setup</code> 函数返回的数据，<code>ctx</code> 包括了计算属性，组件方法和用户自定义的一些数据</p>\n<p>如果 <code>key</code> 不以 <code>$</code> 开头，那么就依次判断 <code>setupState data props ctx</code> 中是否包含这个 <code>key</code>，如果包含就返回对应值</p>\n<h4 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PublicInstanceProxyHandlers = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">&#123; _: instance &#125;, key, value</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data, setupState, ctx &#125; = instance;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (setupState !== EMPTY_OBJ &amp;&amp; hasOwn(setupState, key)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 给 setupState 赋值</span></span><br><span class=\"line\">      setupState[key] = value;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data !== EMPTY_OBJ &amp;&amp; hasOwn(data, key)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 给 data 赋值</span></span><br><span class=\"line\">      data[key] = value;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> instance.props) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不能直接给 props 赋值</span></span><br><span class=\"line\">      process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">`Attempting to mutate prop &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot;. Props are readonly.`</span>,</span><br><span class=\"line\">          instance</span><br><span class=\"line\">        );</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">&quot;$&quot;</span> &amp;&amp; key.slice(<span class=\"number\">1</span>) <span class=\"keyword\">in</span> instance) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不能给 Vue 内部以 $ 开头的保留属性赋值</span></span><br><span class=\"line\">      process.env.NODE_ENV !== <span class=\"string\">&quot;production&quot;</span> &amp;&amp;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          <span class=\"string\">`Attempting to mutate public property &quot;<span class=\"subst\">$&#123;key&#125;</span>&quot;. `</span> +</span><br><span class=\"line\">            <span class=\"string\">`Properties starting with $ are reserved and readonly.`</span>,</span><br><span class=\"line\">          instance</span><br><span class=\"line\">        );</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 用户自定义数据赋值</span></span><br><span class=\"line\">      ctx[key] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>set</code> 函数主要做的事情就是对渲染上下文 <code>instance.ctx</code> 中的属性赋值，它实际上是代理到对应的数据类型中去完成赋值操作的。这里仍然要注意顺序问题，和 <code>get</code> 一样，优先判断 <code>setupState</code>，然后是 <code>data</code>，接着是 <code>props</code></p>\n<h4 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"has\"></a>has</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PublicInstanceProxyHandlers = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">has</span>(<span class=\"params\">&#123; _: &#123; data, setupState, accessCache, ctx, type, appContext &#125; &#125;, key</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 依次判断</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      accessCache[key] !== <span class=\"literal\">undefined</span> ||</span><br><span class=\"line\">      (data !== EMPTY_OBJ &amp;&amp; hasOwn(data, key)) ||</span><br><span class=\"line\">      (setupState !== EMPTY_OBJ &amp;&amp; hasOwn(setupState, key)) ||</span><br><span class=\"line\">      (type.props &amp;&amp; hasOwn(normalizePropsOptions(type.props)[<span class=\"number\">0</span>], key)) ||</span><br><span class=\"line\">      hasOwn(ctx, key) ||</span><br><span class=\"line\">      hasOwn(publicPropertiesMap, key) ||</span><br><span class=\"line\">      hasOwn(appContext.config.globalProperties, key)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这个函数的实现很简单，依次判断 <code>key</code> 是否存在于 <code>accessCache、data、setupState、props</code> 、用户数据、公开属性以及全局属性中，然后返回结果。</p>\n<h3 id=\"判断处理-setup-函数\"><a href=\"#判断处理-setup-函数\" class=\"headerlink\" title=\"判断处理 setup 函数\"></a>判断处理 setup 函数</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断处理 setup 函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; setup &#125; = Component;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (setup) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 setup 函数带参数，则创建一个 setupContext</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setupContext = (instance.setupContext =</span><br><span class=\"line\">    setup.length &gt; <span class=\"number\">1</span> ? createSetupContext(instance) : <span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 执行 setup 函数获取结果</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setupResult = callWithErrorHandling(</span><br><span class=\"line\">    setup,</span><br><span class=\"line\">    instance,</span><br><span class=\"line\">    <span class=\"number\">0</span> <span class=\"comment\">/* SETUP_FUNCTION */</span>,</span><br><span class=\"line\">    [instance.props, setupContext]</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"comment\">// 处理 setup 执行结果</span></span><br><span class=\"line\">  handleSetupResult(instance, setupResult);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果组件中定义了 <code>setup</code> 函数，接下来就是处理 <code>setup</code> 函数的流程，主要是三个步骤：创建 <code>setup</code> 函数上下文，执行 <code>setup</code> 函数并获取结果和处理 <code>setup</code> 函数的执行结果</p>\n<p>首先判断 setup 函数的参数长度，如果大于 1，就创建 setupContext 上下文</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setupContext = (instance.setupContext =</span><br><span class=\"line\">  setup.length &gt; <span class=\"number\">1</span> ? createSetupContext(instance) : <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createSetupContext</span>(<span class=\"params\">instance</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">attrs</span>: instance.attrs,</span><br><span class=\"line\">    <span class=\"attr\">slots</span>: instance.slots,</span><br><span class=\"line\">    <span class=\"attr\">emit</span>: instance.emit,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;onClick&quot;</span>&gt;</span>Toggle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">props</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">msg</span>: <span class=\"built_in\">String</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    setup (props, &#123; emit &#125;) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onClick</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        emit(<span class=\"string\">&#x27;toggle&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        onClick</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">HelloWorld</span> @<span class=\"attr\">toggle</span>=<span class=\"string\">&quot;toggle&quot;</span> <span class=\"attr\">:msg</span>=<span class=\"string\">&quot;msg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">HelloWorld</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/HelloWorld&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">components</span>: &#123; HelloWorld &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    setup () &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">const</span> msg = ref(<span class=\"string\">&#x27;Hello World&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggle</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        msg.value = msg.value === <span class=\"string\">&#x27;Hello World&#x27;</span> ? <span class=\"string\">&#x27;Hello Vue&#x27;</span> : <span class=\"string\">&#x27;Hello World&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        toggle,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        msg</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>可以看出 <code>setupContext</code> 对应的就是 <code>setup</code> 函数第二个参数，接下来看一下 <code>setup</code> 函数时如何执行的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setupResult = callWithErrorHandling(setup, instance, <span class=\"number\">0</span> <span class=\"comment\">/* SETUP_FUNCTION */</span>, [instance.props, setupContext])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callWithErrorHandling</span> (<span class=\"params\">fn, instance, type, args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    res = args ? fn(...args) : fn()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    handleError(err, instance, type)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>callWithErrorHandling</code> 对 <code>fn</code> 做了一层包装，内部执行 <code>fn</code>，所以 <code>setup</code> 函数的第一个参数是 <code>instance.props</code> 第二个参数是 <code>setupContext</code></p>\n<p>执行 <code>setup</code> 函数并拿到了返回的结果，那么接下来就是要用 <code>handleSetupResult</code> 函数来处理结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">handleSetupResult(instance, setupResult)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleSetupResult</span>(<span class=\"params\">instance, setupResult</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isFunction(setupResult)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// setup 返回渲染函数</span></span><br><span class=\"line\">    instance.render = setupResult</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isObject(setupResult)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把 setup 返回结果变成响应式</span></span><br><span class=\"line\">    instance.setupState = reactive(setupResult)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  finishComponentSetup(instance)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 <code>setupResult</code> 是一个对象的时候，我们把它变成了响应式并赋值给 <code>instance.setupState</code>，这样在模板渲染的时候，依据前面的代理规则，<code>instance.ctx</code> 就可以从 <code>instance.setupState</code> 上获取到对应的数据，这就在 setup 函数与模板渲染间建立了联系</p>\n<p>如果返回的是一个函数的话, 这个函数会作为组件的渲染函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; h &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">msg</span>: <span class=\"built_in\">String</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setup (props, &#123; emit &#125;) &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onClick</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        emit(<span class=\"string\">&#x27;toggle&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">ctx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [</span><br><span class=\"line\">          h(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"literal\">null</span>, ctx.msg),</span><br><span class=\"line\">          h(<span class=\"string\">&#x27;button&#x27;</span>, &#123; <span class=\"attr\">onClick</span>: onClick &#125;, <span class=\"string\">&#x27;Toggle&#x27;</span>)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>最后就是执行 finishComponentSetup 完成组件实例的设置</p>\n<h3 id=\"完成组件实例设置\"><a href=\"#完成组件实例设置\" class=\"headerlink\" title=\"完成组件实例设置\"></a>完成组件实例设置</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">finishComponentSetup</span> (<span class=\"params\">instance</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> Component = instance.type</span><br><span class=\"line\">  <span class=\"comment\">// 对模板或者渲染函数的标准化</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!instance.render) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (compile &amp;&amp; Component.template &amp;&amp; !Component.render) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 运行时编译</span></span><br><span class=\"line\">      Component.render = compile(Component.template, &#123;</span><br><span class=\"line\">        <span class=\"attr\">isCustomElement</span>: instance.appContext.config.isCustomElement || NO</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      Component.render._rc = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &amp;&amp; !Component.render) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!compile &amp;&amp; Component.template) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只编写了 template 但使用了 runtime-only 的版本</span></span><br><span class=\"line\">        warn(<span class=\"string\">`Component provided template option but `</span> +</span><br><span class=\"line\">          <span class=\"string\">`runtime compilation is not supported in this build of Vue.`</span> +</span><br><span class=\"line\">          (<span class=\"string\">` Configure your bundler to alias &quot;vue&quot; to &quot;vue/dist/vue.esm-bundler.js&quot;.`</span></span><br><span class=\"line\">          ) <span class=\"comment\">/* should not happen */</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 既没有写 render 函数，也没有写 template 模板</span></span><br><span class=\"line\">        warn(<span class=\"string\">`Component is missing template or render function.`</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 组件对象的 render 函数赋值给 instance</span></span><br><span class=\"line\">    instance.render = (Component.render || NOOP)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instance.render._rc) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 对于使用 with 块的运行时编译的渲染函数，使用新的渲染上下文的代理</span></span><br><span class=\"line\">      instance.withProxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(instance.ctx, RuntimeCompiledPublicInstanceProxyHandlers)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 兼容 Vue.js 2.x Options API</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    currentInstance = instance</span><br><span class=\"line\">    applyOptions(instance, Component)</span><br><span class=\"line\">    currentInstance = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>vue3</code> 依然支持 <code>vue2</code> 的 <code>options API</code>，这主要就是通过 <code>applyOptions</code> 方法实现的............................</p>\n","categories":["vue"],"tags":["笔记","vue3"]},{"title":"vuex源码阅读笔记","url":"/blog-next/2020/09/14/vuex%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/","content":"<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vuex:</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  Store,</span><br><span class=\"line\">  install,</span><br><span class=\"line\">  <span class=\"attr\">version</span>: <span class=\"string\">&#x27;__VERSION__&#x27;</span>,</span><br><span class=\"line\">  mapState,</span><br><span class=\"line\">  mapMutations,</span><br><span class=\"line\">  mapGetters,</span><br><span class=\"line\">  mapActions,</span><br><span class=\"line\">  createNamespacedHelpers</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>vuex</code> 提供了一个 <code>install</code> 方法用来注册插件，我们 <code>use</code> 的时候就会执行，并把 <code>Vue</code> 作为参数传入，执行 <code>install</code> 会执行 <code>applyMixin(Vue)</code>，这个函数就是全局混入了 <code>beforeCreate</code> 钩子，在这个钩子中报错了 <code>this.$store = options.store</code>，并通过 <code>vm.parent</code> 把所有的组件都添加这个属性</p>\n<h2 id=\"Store-实例化\"><a href=\"#Store-实例化\" class=\"headerlink\" title=\"Store 实例化\"></a>Store 实例化</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  modules</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>实例化过程执行 Store 的 constructor，主要步骤有三步</p>\n<ol>\n<li><code>this._modules = new ModuleCollection(options)</code> 初始化模块</li>\n<li><code>installModule(this, state, [], this._modules.root)</code> 安装模块</li>\n<li><code>resetStoreVM(this, state)</code> 初始化 store._vm</li>\n</ol>\n<h3 id=\"初始化模块\"><a href=\"#初始化模块\" class=\"headerlink\" title=\"初始化模块\"></a>初始化模块</h3><p>vuex 设计成不仅仅可以在根实例上初始化状态，也允许分割成一个个 module，每个模块拥有自己的 state mutation action getter，而且可以无限嵌套</p>\n<p>从数据结构上来看，模块的设计就是一个树形结构，store 本身可以理解为一个 root module，它下面的 modules 就是子模块， vux 需要完成这棵树的构建，构建的入口就是 <code>this._modules = new ModuleCollection(options)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModuleCollection</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">rawRootModule</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// register root module (Vuex.Store options)</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.register([], rawRootModule, <span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">path</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> path.reduce(<span class=\"function\">(<span class=\"params\"><span class=\"built_in\">module</span>, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.getChild(key)</span><br><span class=\"line\">    &#125;, <span class=\"built_in\">this</span>.root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getNamespace</span>(<span class=\"params\">path</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"built_in\">module</span> = <span class=\"built_in\">this</span>.root</span><br><span class=\"line\">    <span class=\"keyword\">return</span> path.reduce(<span class=\"function\">(<span class=\"params\">namespace, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">module</span> = <span class=\"built_in\">module</span>.getChild(key)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> namespace + (<span class=\"built_in\">module</span>.namespaced ? key + <span class=\"string\">&#x27;/&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">update</span>(<span class=\"params\">rawRootModule</span>)</span> &#123;</span><br><span class=\"line\">    update([], <span class=\"built_in\">this</span>.root, rawRootModule)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">register</span>(<span class=\"params\">path, rawModule, runtime = <span class=\"literal\">true</span></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      assertRawModule(path, rawModule)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newModule = <span class=\"keyword\">new</span> Module(rawModule, runtime)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.root = newModule</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> parent = <span class=\"built_in\">this</span>.get(path.slice(<span class=\"number\">0</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">      parent.addChild(path[path.length - <span class=\"number\">1</span>], newModule)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// register nested modules</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rawModule.modules) &#123;</span><br><span class=\"line\">      forEachValue(rawModule.modules, <span class=\"function\">(<span class=\"params\">rawChildModule, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.register(path.concat(key), rawChildModule, runtime)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">unregister</span>(<span class=\"params\">path</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parent = <span class=\"built_in\">this</span>.get(path.slice(<span class=\"number\">0</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = path[path.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!parent.getChild(key).runtime) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    parent.removeChild(key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ModuleCollection</code> 实例化的过程就是执行了 <code>register</code> 方法，它接受三个参数，<code>path</code> 表示路径， 表示定义模块的原始配置，<code>runtime</code> 表示是否是一个运行时创建的模块</p>\n<p><code>register</code> 方法首先通过 <code>const newModule = new Module(rawModule, runtime)</code> 创建了一个 <code>Module</code> 的实例，<code>Module</code> 是用来描述单个模块的类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Module</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">rawModule, runtime</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.runtime = runtime</span><br><span class=\"line\">    <span class=\"comment\">// Store some children item</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._children = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"comment\">// Store the origin module object which passed by programmer</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>._rawModule = rawModule</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rawState = rawModule.state</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Store the origin module&#x27;s state</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = (<span class=\"keyword\">typeof</span> rawState === <span class=\"string\">&#x27;function&#x27;</span> ? rawState() : rawState) || &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title\">namespaced</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!<span class=\"built_in\">this</span>._rawModule.namespaced</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">addChild</span>(<span class=\"params\">key, <span class=\"built_in\">module</span></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._children[key] = <span class=\"built_in\">module</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">removeChild</span>(<span class=\"params\">key</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"built_in\">this</span>._children[key]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getChild</span>(<span class=\"params\">key</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._children[key]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">update</span>(<span class=\"params\">rawModule</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>._rawModule.namespaced = rawModule.namespaced</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rawModule.actions) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._rawModule.actions = rawModule.actions</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rawModule.mutations) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._rawModule.mutations = rawModule.mutations</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rawModule.getters) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>._rawModule.getters = rawModule.getters</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">forEachChild</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    forEachValue(<span class=\"built_in\">this</span>._children, fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">forEachGetter</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>._rawModule.getters) &#123;</span><br><span class=\"line\">      forEachValue(<span class=\"built_in\">this</span>._rawModule.getters, fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">forEachAction</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>._rawModule.actions) &#123;</span><br><span class=\"line\">      forEachValue(<span class=\"built_in\">this</span>._rawModule.actions, fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">forEachMutation</span>(<span class=\"params\">fn</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>._rawModule.mutations) &#123;</span><br><span class=\"line\">      forEachValue(<span class=\"built_in\">this</span>._rawModule.mutations, fn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过递归调用 register 函数，就会建议一颗完整的 module 树</p>\n<h3 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h3><p>对模块中 state getters mutations actions 做初始化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = <span class=\"built_in\">this</span>._modules.root.state</span><br><span class=\"line\">installModule(<span class=\"built_in\">this</span>, state, [], <span class=\"built_in\">this</span>._modules.root)</span><br></pre></td></tr></table></figure>\n\n<p>installModule 的定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">installModule</span>(<span class=\"params\">store, rootState, path, <span class=\"built_in\">module</span>, hot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isRoot = !path.length</span><br><span class=\"line\">  <span class=\"keyword\">const</span> namespace = store._modules.getNamespace(path)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// register in namespace map</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">module</span>.namespaced) &#123;</span><br><span class=\"line\">    store._modulesNamespaceMap[namespace] = <span class=\"built_in\">module</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// set state</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isRoot &amp;&amp; !hot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentState = getNestedState(rootState, path.slice(<span class=\"number\">0</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">const</span> moduleName = path[path.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    store._withCommit(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      Vue.set(parentState, moduleName, <span class=\"built_in\">module</span>.state)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> local = (<span class=\"built_in\">module</span>.context = makeLocalContext(store, namespace, path))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.forEachMutation(<span class=\"function\">(<span class=\"params\">mutation, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> namespacedType = namespace + key</span><br><span class=\"line\">    registerMutation(store, namespacedType, mutation, local)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.forEachAction(<span class=\"function\">(<span class=\"params\">action, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = action.root ? key : namespace + key</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = action.handler || action</span><br><span class=\"line\">    registerAction(store, type, handler, local)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.forEachGetter(<span class=\"function\">(<span class=\"params\">getter, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> namespacedType = namespace + key</span><br><span class=\"line\">    registerGetter(store, namespacedType, getter, local)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.forEachChild(<span class=\"function\">(<span class=\"params\">child, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    installModule(store, rootState, path.concat(key), child, hot)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>installModule</code> 支持五个参数，<code>store</code> 表示 <code>root</code> <code>store</code>；<code>state</code> 表示 <code>root</code> <code>state</code>，<code>path</code> 表示模块的访问路径；<code>module</code> 表示当前的模块，<code>hot</code> 表示是否热更新</p>\n<p>默认情况下，模块内部的 <code>mutation</code> <code>action</code> <code>getter</code> 是注册在全局命名空间的，如果添加 <code>namespace:true</code>, 当模块被注册后，他的所有 <code>getter</code> <code>action</code> <code>mutation</code> 都会自动根据模块注册的路径调整命名</p>\n<p>回到 <code>installModule</code> 方法，我们首先根据 <code>path</code> 获取 <code>namespace</code>，返回 / 拼接的字符串或者空字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">getNamespace (path) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"built_in\">module</span> = <span class=\"built_in\">this</span>.root</span><br><span class=\"line\">  <span class=\"keyword\">return</span> path.reduce(<span class=\"function\">(<span class=\"params\">namespace, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span> = <span class=\"built_in\">module</span>.getChild(key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> namespace + (<span class=\"built_in\">module</span>.namespaced ? key + <span class=\"string\">&#x27;/&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  &#125;, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pip install virtualenv  -i https:<span class=\"comment\">//pypi.douban.com/simple</span></span><br><span class=\"line\">pip install apache-superset -i https:<span class=\"comment\">//pypi.douban.com/simple</span></span><br><span class=\"line\">flask fab  create-admin</span><br><span class=\"line\">set FLASK_APP=superset</span><br><span class=\"line\">set FLASK_ENV=development</span><br><span class=\"line\">python superset db upgrade</span><br><span class=\"line\">python superset init</span><br><span class=\"line\">python superset runserver</span><br></pre></td></tr></table></figure>\n\n<p>接着 <code>namespaced</code> 为 <code>true</code> 则把 <code>module</code> 保存到 <code>_modulesNamespaceMap</code> <code>store._modulesNamespaceMap[namespace] = module</code></p>\n<p>接着判断 isroot 为 false 就把 parentState 和 module.state 设置属性关系 <code>Vue.set(parentState, moduleName, module.state)</code>，值得一提的是，<code>_withCommit</code> 保证是 <code>commit</code> 提交的，直接修改在 <code>strict</code> 模式下会报错</p>\n<p>接着执行 <code>const local = module.context = makeLocalContext(store, namespace, path)</code> 生成 local 对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeLocalContext</span>(<span class=\"params\">store, namespace, path</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> noNamespace = namespace === <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> local = &#123;</span><br><span class=\"line\">    <span class=\"attr\">dispatch</span>: noNamespace</span><br><span class=\"line\">      ? store.dispatch</span><br><span class=\"line\">      : <span class=\"function\">(<span class=\"params\">_type, _payload, _options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> args = unifyObjectStyle(_type, _payload, _options)</span><br><span class=\"line\">          <span class=\"keyword\">const</span> &#123; payload, options &#125; = args</span><br><span class=\"line\">          <span class=\"keyword\">let</span> &#123; type &#125; = args</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!options || !options.root) &#123;</span><br><span class=\"line\">            type = namespace + type</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; !store._actions[type]) &#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown local action type: <span class=\"subst\">$&#123;args.type&#125;</span>, global type: <span class=\"subst\">$&#123;type&#125;</span>`</span>)</span><br><span class=\"line\">              <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">return</span> store.dispatch(type, payload)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">commit</span>: noNamespace</span><br><span class=\"line\">      ? store.commit</span><br><span class=\"line\">      : <span class=\"function\">(<span class=\"params\">_type, _payload, _options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> args = unifyObjectStyle(_type, _payload, _options)</span><br><span class=\"line\">          <span class=\"keyword\">const</span> &#123; payload, options &#125; = args</span><br><span class=\"line\">          <span class=\"keyword\">let</span> &#123; type &#125; = args</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!options || !options.root) &#123;</span><br><span class=\"line\">            type = namespace + type</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; !store._mutations[type]) &#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown local mutation type: <span class=\"subst\">$&#123;args.type&#125;</span>, global type: <span class=\"subst\">$&#123;type&#125;</span>`</span>)</span><br><span class=\"line\">              <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          store.commit(type, payload, options)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// getters and state object must be gotten lazily</span></span><br><span class=\"line\">  <span class=\"comment\">// because they will be changed by vm update</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperties(local, &#123;</span><br><span class=\"line\">    <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">get</span>: noNamespace ? <span class=\"function\">() =&gt;</span> store.getters : <span class=\"function\">() =&gt;</span> makeLocalGetters(store, namespace)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\">() =&gt;</span> getNestedState(store.state, path)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> local</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法定义了 <code>local</code> 对象，对于 <code>dispatch</code> 和 <code>commit</code> 方法，如果没有 <code>namespace</code>，它们就直接指向了 <code>root store</code> 的 <code>dispatch</code> 和 <code>commit</code> 方法，否则会创建方法，把 <code>type</code> 自动拼接上 <code>namespace</code>，然后执行 <code>store</code> 上对应的方法<br>对于 <code>getters</code> 而言，如果没有 <code>namespace</code>，则直接返回 <code>root store</code> 的 <code>getters</code>，否则返回 <code>makeLocalGetters(store, namespace)</code> 的返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeLocalGetters</span>(<span class=\"params\">store, namespace</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> gettersProxy = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> splitPos = namespace.length</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(store.getters).forEach(<span class=\"function\"><span class=\"params\">type</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// skip if the target getter is not match this namespace</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type.slice(<span class=\"number\">0</span>, splitPos) !== namespace) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// extract local getter type</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> localType = type.slice(splitPos)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add a port to the getters proxy.</span></span><br><span class=\"line\">    <span class=\"comment\">// Define as getter property because</span></span><br><span class=\"line\">    <span class=\"comment\">// we do not want to evaluate the getters in this time.</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(gettersProxy, localType, &#123;</span><br><span class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\">() =&gt;</span> store.getters[type],</span><br><span class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> gettersProxy</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>makeLocalGetters</code> 首先获取 <code>namespace</code> 长度，然后遍历 <code>root store</code> 下所有的 <code>getters</code>, 如果符合 <code>namespace</code>, 就截取后面的 <code>localType</code>，用 <code>Object.defineProperty</code> 定义了 <code>gettersProxy</code>, 获取 <code>localType</code> 实际上是访问了 <code>store.getters[type]</code></p>\n<p><code>state</code> 相对比较简单，就根据 <code>path</code> 查找 <code>state</code></p>\n<p>构造完 <code>local</code> 上下文后，我们回调 <code>installModule</code> 方法，接下来他会遍历模块中定义的<code>mutations actions getters</code> 分别执行他们的注册工作，<br>过程就是执行 <code>registerMutaions</code> 给 <code>rootStore</code> 的 <code>_mutations[types]</code> 添加 <code>wrappedMutationHandler</code> 方法，<br>执行 <code>registerActions</code> 给 <code>root store</code> 的 <code>_actions[types]</code> 添加 <code>wrappedActionHandler</code> 方法，<br>执行 <code>registerGetter</code> 给 <code>root store</code> 上的 <code>_wrappedGetters[key]</code> 指定 <code>wrappedGetter</code> 方法</p>\n<p>再回到 <code>installModule</code> 方法，最后一步就是遍历模块中的所有子 <code>modules</code>，递归执行 <code>installModule</code> 方法</p>\n<p><code>installModule</code> 实际上就是完成了模块下的<code>state、getters、actions、mutations</code> 的初始化工作，并且通过递归遍历的方式，就完成了所有子模块的安装工作。</p>\n<h3 id=\"初始化-store-vm\"><a href=\"#初始化-store-vm\" class=\"headerlink\" title=\"初始化 store._vm\"></a>初始化 <code>store._vm</code></h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetStoreVM</span>(<span class=\"params\">store, state, hot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldVm = store._vm</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// bind store public getters</span></span><br><span class=\"line\">  store.getters = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrappedGetters = store._wrappedGetters</span><br><span class=\"line\">  <span class=\"keyword\">const</span> computed = &#123;&#125;</span><br><span class=\"line\">  forEachValue(wrappedGetters, <span class=\"function\">(<span class=\"params\">fn, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// use computed to leverage its lazy-caching mechanism</span></span><br><span class=\"line\">    computed[key] = <span class=\"function\">() =&gt;</span> fn(store)</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(store.getters, key, &#123;</span><br><span class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\">() =&gt;</span> store._vm[key],</span><br><span class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span> <span class=\"comment\">// for local getters</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// use a Vue instance to store the state tree</span></span><br><span class=\"line\">  <span class=\"comment\">// suppress warnings just in case the user has added</span></span><br><span class=\"line\">  <span class=\"comment\">// some funky global mixins</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> silent = Vue.config.silent</span><br><span class=\"line\">  Vue.config.silent = <span class=\"literal\">true</span></span><br><span class=\"line\">  store._vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">$$state</span>: state</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  Vue.config.silent = silent</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// enable strict mode for new vm</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store.strict) &#123;</span><br><span class=\"line\">    enableStrictMode(store)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (oldVm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hot) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// dispatch changes in all subscribed watchers</span></span><br><span class=\"line\">      <span class=\"comment\">// to force getter re-evaluation for hot reloading.</span></span><br><span class=\"line\">      store._withCommit(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        oldVm._data.$$state = <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Vue.nextTick(<span class=\"function\">() =&gt;</span> oldVm.$destroy())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>resetStoreVM</code> 的作用就是想建立 <code>getters</code> 和 <code>state</code> 的联系，因为从设计上 <code>getters</code> 的获取就依赖了<code>state</code>，并且希望它的依赖能被缓存起来，且只有依赖值发生变化才会重新计算，这里直接用了 <code>vue</code> 的 <code>computed</code> 实现</p>\n<p><code>resetStoreVM</code> 首先遍历了 <code>_wrappedGetters</code> 获取每个 <code>getter</code> 的函数 <code>fn</code> 和 <code>key</code>，然后定义了 <code>computed[key] = () =&gt; fn(store)</code>, 这里的 <code>fn(store)</code> 就相当于执行 <code>wrapperGetter</code>, 返回的就是 <code>rawGetter</code> 执行函数，<code>rawGetter</code> 就是用户定义的 <code>getter</code> 函数，他的前两个参数是 <code>local state</code> 和 <code>local getters</code>，后两个参数就是 <code>root state</code> 和 <code>root getters</code><br>接着实例化一个 <code>vue</code> 实例，<code>store._vm</code> 并把 <code>computed</code> 传入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">store._vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">$$state</span>: state</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>我们发现 data 选项里定义了 <code>$$state</code> 属性，而我们访问 <code>store.state</code> 的时候，实际上会访问 <code>store</code> 类上定义的 <code>state</code> 的 <code>get</code> 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">get state () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._vm._data.$$state</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上就是访问的 <code>$$state</code>，那么 <code>getters</code> 和 <code>state</code> 是如何建立依赖逻辑的呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">forEachValue(wrappedGetters, <span class=\"function\">(<span class=\"params\">fn, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// use computed to leverage its lazy-caching mechanism</span></span><br><span class=\"line\">  computed[key] = <span class=\"function\">() =&gt;</span> fn(store)</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(store.getters, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\">() =&gt;</span> store._vm[key],</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span> <span class=\"comment\">// for local getters</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当我根据 <code>key</code> 访问 <code>store.getters</code> 的某一个 <code>getter</code> 的时候，实际上就是访问了 <code>store._vm[key]</code>，也就是 <code>computed[key]</code>，在执行 <code>computed[key]</code> 对应的函数的时候，会执行 <code>rawGetter(local.state,..)</code> 方法，那么就会访问到 <code>store.state</code>, 进而访问到 <code>$$state</code>, 这样就建立了一个依赖关系</p>\n<p>当严格模式下，<code>store._vm</code> 会添加一个 <code>wathcer</code> 来观测 <code>this._data.$$state</code> 的变化，也就是当 <code>store.state</code> 被修改的时候, <code>store._committing</code> 必须为 <code>true</code>，否则在开发阶段会报警告。<code>store._committing</code> 默认值是 <code>false</code>，那么它什么时候会 <code>true</code> 呢，<code>Store</code> 定义了 <code>_withCommit</code> 实例方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">_withCommit (fn) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> committing = <span class=\"built_in\">this</span>._committing</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._committing = <span class=\"literal\">true</span></span><br><span class=\"line\">  fn()</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._committing = committing</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它就是对 <code>fn</code> 包装了一个环境，确保在 <code>fn</code> 中执行任何逻辑的时候 <code>this._committing = true</code>。所以外部任何非通过 <code>Vuex</code> 提供的接口直接操作修改 <code>state</code> 的行为都会在开发阶段触发警告。</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>对 <code>store</code> 做存取的操作</p>\n<h3 id=\"数据获取\"><a href=\"#数据获取\" class=\"headerlink\" title=\"数据获取\"></a>数据获取</h3><p>``Vuex<code>最终存储的数据是在 state 上，我们之前分析过在</code>store.state<code>存储的是</code>root state<code>, 那么对于模块上的</code>state<code>，假设我们有 2个嵌套的</code>modules<code>，他们的</code>key<code>分别为</code>a<code>和</code>b<code>，我们可以 通过</code>store.state.a.b.xxx<code>的方式去获取</code><br>它的实现发生在 <code>installModule</code> 的时候</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">installModule</span>(<span class=\"params\">store, rootState, path, <span class=\"built_in\">module</span>, hot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isRoot = !path.length</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// set state</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isRoot &amp;&amp; !hot) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentState = getNestedState(rootState, path.slice(<span class=\"number\">0</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">const</span> moduleName = path[path.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">    store._withCommit(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      Vue.set(parentState, moduleName, <span class=\"built_in\">module</span>.state)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在递归执行 installModule 的过程中，递归执行了所有 getters 定义的注册，在之后的 resetStoreVM 过程中，执行了 store.getters 的初始化工作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">installModule</span>(<span class=\"params\">store, rootState, path, <span class=\"built_in\">module</span>, hot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> namespace = store._modules.getNamespace(path)</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> local = (<span class=\"built_in\">module</span>.context = makeLocalContext(store, namespace, path))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.forEachGetter(<span class=\"function\">(<span class=\"params\">getter, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> namespacedType = namespace + key</span><br><span class=\"line\">    registerGetter(store, namespacedType, getter, local)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerGetter</span>(<span class=\"params\">store, type, rawGetter, local</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store._wrappedGetters[type]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] duplicate getter key: <span class=\"subst\">$&#123;type&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  store._wrappedGetters[type] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrappedGetter</span>(<span class=\"params\">store</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rawGetter(</span><br><span class=\"line\">      local.state, <span class=\"comment\">// local state</span></span><br><span class=\"line\">      local.getters, <span class=\"comment\">// local getters</span></span><br><span class=\"line\">      store.state, <span class=\"comment\">// root state</span></span><br><span class=\"line\">      store.getters <span class=\"comment\">// root getters</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetStoreVM</span>(<span class=\"params\">store, state, hot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// bind store public getters</span></span><br><span class=\"line\">  store.getters = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrappedGetters = store._wrappedGetters</span><br><span class=\"line\">  <span class=\"keyword\">const</span> computed = &#123;&#125;</span><br><span class=\"line\">  forEachValue(wrappedGetters, <span class=\"function\">(<span class=\"params\">fn, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// use computed to leverage its lazy-caching mechanism</span></span><br><span class=\"line\">    computed[key] = <span class=\"function\">() =&gt;</span> fn(store)</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(store.getters, key, &#123;</span><br><span class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\">() =&gt;</span> store._vm[key],</span><br><span class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span> <span class=\"comment\">// for local getters</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// use a Vue instance to store the state tree</span></span><br><span class=\"line\">  <span class=\"comment\">// suppress warnings just in case the user has added</span></span><br><span class=\"line\">  <span class=\"comment\">// some funky global mixins</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  store._vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">$$state</span>: state</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>installModule</code> 的过程中，建立了每个模块的上下文环境，因此当我们访问 <code>store.getters.xxx</code> 的时候，实际上就是执行 <code>rawGetter(local.state, local.getters, root.state, root.getters)</code></p>\n<h3 id=\"数据存储\"><a href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h3><p><code>Vuex</code> 对数据存储本质上就是对 <code>state</code> 做修改，并且只允许我们通过提交 <code>mutation</code> 的形式去修改 <code>state</code>，<code>mutation</code> 是一个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment (state) &#123;</span><br><span class=\"line\">    state.count++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>mutations</code> 的初始化也是在 <code>installModule</code> 的时候</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">installModule</span>(<span class=\"params\">store, rootState, path, <span class=\"built_in\">module</span>, hot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> namespace = store._modules.getNamespace(path)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> local = (<span class=\"built_in\">module</span>.context = makeLocalContext(store, namespace, path))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.forEachMutation(<span class=\"function\">(<span class=\"params\">mutation, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> namespacedType = namespace + key</span><br><span class=\"line\">    registerMutation(store, namespacedType, mutation, local)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerMutation</span>(<span class=\"params\">store, type, handler, local</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry =</span><br><span class=\"line\">    store._mutations[type] ||</span><br><span class=\"line\">    (store._mutations[type] = []) -</span><br><span class=\"line\">      entry.push(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrappedMutationHandler</span>(<span class=\"params\">payload</span>) </span>&#123;</span><br><span class=\"line\">        handler.call(store, local.state, payload)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>store</code> 提供了一个 <code>commit</code> 方法提交一个 <code>mutation</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">commit (_type, _payload, _options) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// check object-style commit</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    payload,</span><br><span class=\"line\">    options</span><br><span class=\"line\">  &#125; = unifyObjectStyle(_type, _payload, _options)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> mutation = &#123; type, payload &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = <span class=\"built_in\">this</span>._mutations[type]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!entry) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown mutation type: <span class=\"subst\">$&#123;type&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._withCommit(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    entry.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">commitIterator</span> (<span class=\"params\">handler</span>) </span>&#123;</span><br><span class=\"line\">      handler(payload)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._subscribers.forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub(mutation, <span class=\"built_in\">this</span>.state))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class=\"line\">    options &amp;&amp; options.silent</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(</span><br><span class=\"line\">      <span class=\"string\">`[vuex] mutation type: <span class=\"subst\">$&#123;type&#125;</span>. Silent option has been removed. `</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;Use the filter functionality in the vue-devtools&#x27;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历 <code>this._mutations</code> 获取每个 <code>handler(payload)</code> 执行，实际就是执行了 <code>wrappedMutationHandler(payload)</code>，然后执行我们定义在 <code>mutation</code> 的函数, 传入 并 <code>local.state</code></p>\n<p>需要注意的是 <code>mutation</code> 必须是同步函数，因为我们有异步的需求，所以 <code>action</code> 也经常用到</p>\n<p><code>action</code> 类似于 <code>mutation</code>，不同在于 <code>action</code> 提交的是 <code>mutation</code>，而不是直接操作 <code>state</code>，并且它可以包含任意异步操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment (state) &#123;</span><br><span class=\"line\">    state.count++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">  increment (context) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      context.commit(<span class=\"string\">&#x27;increment&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>actions 的初始化也是在 installModule 的时候</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">installModule</span>(<span class=\"params\">store, rootState, path, <span class=\"built_in\">module</span>, hot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> namespace = store._modules.getNamespace(path)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> local = (<span class=\"built_in\">module</span>.context = makeLocalContext(store, namespace, path))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.forEachAction(<span class=\"function\">(<span class=\"params\">action, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = action.root ? key : namespace + key</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = action.handler || action</span><br><span class=\"line\">    registerAction(store, type, handler, local)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerAction</span>(<span class=\"params\">store, type, handler, local</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = store._actions[type] || (store._actions[type] = [])</span><br><span class=\"line\">  entry.push(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrappedActionHandler</span>(<span class=\"params\">payload, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = handler.call(</span><br><span class=\"line\">      store,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">dispatch</span>: local.dispatch,</span><br><span class=\"line\">        <span class=\"attr\">commit</span>: local.commit,</span><br><span class=\"line\">        <span class=\"attr\">getters</span>: local.getters,</span><br><span class=\"line\">        <span class=\"attr\">state</span>: local.state,</span><br><span class=\"line\">        <span class=\"attr\">rootGetters</span>: store.getters,</span><br><span class=\"line\">        <span class=\"attr\">rootState</span>: store.state</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      payload,</span><br><span class=\"line\">      cb</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isPromise(res)) &#123;</span><br><span class=\"line\">      res = <span class=\"built_in\">Promise</span>.resolve(res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (store._devtoolHook) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        store._devtoolHook.emit(<span class=\"string\">&#x27;vuex:error&#x27;</span>, err)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>store</code> 提供了一个 <code>dispatch</code> 方法让我们提交一个 <code>action</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">dispatch (_type, _payload) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// check object-style dispatch</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    payload</span><br><span class=\"line\">  &#125; = unifyObjectStyle(_type, _payload)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> action = &#123; type, payload &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = <span class=\"built_in\">this</span>._actions[type]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!entry) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown action type: <span class=\"subst\">$&#123;type&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>._actionSubscribers.forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub(action, <span class=\"built_in\">this</span>.state))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> entry.length &gt; <span class=\"number\">1</span></span><br><span class=\"line\">    ? <span class=\"built_in\">Promise</span>.all(entry.map(<span class=\"function\"><span class=\"params\">handler</span> =&gt;</span> handler(payload)))</span><br><span class=\"line\">    : entry[<span class=\"number\">0</span>](payload)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历 <code>store._actions</code> 中对应的数组，找个每个 <code>handler</code> 然后执行 <code>wrappedActionHandler(payload)</code>，接着会执行我们定义的 <code>action</code> 函数，<br>并传入了一个对象，包含当前模块的 <code>dispatch</code> <code>commit</code> <code>getters</code> <code>state</code> 以及全局的 <code>rootState</code> <code>rootGetters</code>, 所以我们定义的 <code>action</code> 函数能拿到<br>当前模块下的 <code>commit</code> 方法,</p>\n<p><strong>因此 action 比我们自己写一个函数执行异步操作然后提交 mutation 的好处是在于它可以在参数中获取到当前模块的一些方法和状态，Vuex 帮我们做好了这些</strong></p>\n<h3 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"语法糖\"></a>语法糖</h3><h4 id=\"mapState\"><a href=\"#mapState\" class=\"headerlink\" title=\"mapState\"></a>mapState</h4><p>用法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: mapState(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 箭头函数可使代码更简练</span></span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传字符串参数 &#x27;count&#x27; 等同于 `state =&gt; state.count`</span></span><br><span class=\"line\">    <span class=\"attr\">countAlias</span>: <span class=\"string\">&#x27;count&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">countPlusLocalState</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count + <span class=\"built_in\">this</span>.localCount</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mapState = normalizeNamespace(<span class=\"function\">(<span class=\"params\">namespace, states</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</span><br><span class=\"line\">  normalizeMap(states).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedState</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> state = <span class=\"built_in\">this</span>.$store.state</span><br><span class=\"line\">      <span class=\"keyword\">let</span> getters = <span class=\"built_in\">this</span>.$store.getters</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (namespace) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"built_in\">module</span> = getModuleByNamespace(<span class=\"built_in\">this</span>.$store, <span class=\"string\">&#x27;mapState&#x27;</span>, namespace)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">module</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        state = <span class=\"built_in\">module</span>.context.state</span><br><span class=\"line\">        getters = <span class=\"built_in\">module</span>.context.getters</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">&#x27;function&#x27;</span> ? val.call(<span class=\"built_in\">this</span>, state, getters) : state[val]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// mark vuex getter for devtools</span></span><br><span class=\"line\">    res[key].vuex = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalizeNamespace</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">namespace, map</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> namespace !== <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">      map = namespace</span><br><span class=\"line\">      namespace = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (namespace.charAt(namespace.length - <span class=\"number\">1</span>) !== <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">      namespace += <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn(namespace, map)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">normalizeMap</span>(<span class=\"params\">map</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(map) ? map.map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> (&#123; key, <span class=\"attr\">val</span>: key &#125;)) : <span class=\"built_in\">Object</span>.keys(map).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> (&#123; key, <span class=\"attr\">val</span>: map[key] &#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当执行 <code>mapState(map)</code> 函数的时候，实际上就是执行 <code>normalizeNamespace</code> 包裹的函数，然后把 <code>map</code> 作为参数 <code>states</code> 传入，<code>mapState</code> 最终要构建一个对象，每个对象的元素都是一个方法，因为这个对象是要扩展到组件的 <code>computed</code> 属性的。<br>函数首先执行 <code>normalizeMap</code> 方法，把这个 <code>states</code> 变成一个数组，数组的每个元素都是 <code>key:value</code> 的形式，然后再遍历这个数组，以 <code>key</code> 作为对象的 <code>key</code>，值为一个 <code>mappedState</code> 函数，在这个 函数内部获取 <code>$store.state</code> 和 <code>$store.getters</code>,<br>如果 <code>val</code> 是函数就行，否则直接访问 <code>state[val]</code></p>\n<p>如果是模块中的 state，我们可以这样写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  mapState(<span class=\"string\">&#x27;some/nested/module&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.a,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.b</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"mapGetters\"><a href=\"#mapGetters\" class=\"headerlink\" title=\"mapGetters\"></a>mapGetters</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class=\"line\">    mapGetters([</span><br><span class=\"line\">      <span class=\"string\">&#x27;doneTodosCount&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;anotherGetter&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和 mapState 基本类似</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mapGetters = normalizeNamespace(<span class=\"function\">(<span class=\"params\">namespace, getters</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</span><br><span class=\"line\">  normalizeMap(getters).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// thie namespace has been mutate by normalizeNamespace</span></span><br><span class=\"line\">    val = namespace + val</span><br><span class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedGetter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (namespace &amp;&amp; !getModuleByNamespace(<span class=\"built_in\">this</span>.$store, <span class=\"string\">&#x27;mapGetters&#x27;</span>, namespace)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; !(val <span class=\"keyword\">in</span> <span class=\"built_in\">this</span>.$store.getters)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">`[vuex] unknown getter: <span class=\"subst\">$&#123;val&#125;</span>`</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.getters[val]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// mark vuex getter for devtools</span></span><br><span class=\"line\">    res[key].vuex = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"mapMutaions\"><a href=\"#mapMutaions\" class=\"headerlink\" title=\"mapMutaions\"></a>mapMutaions</h4><p>我们可以在组件中使用 <code>this.$store.commit(&#39;xx&#39;)</code> 提交 <code>mutation</code>，或者使用 <code>mapMutations</code> 辅助函数将组件中的 <code>methods</code> 映射为 <code>store.commit</code></p>\n<p>用法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    ...mapMutations([</span><br><span class=\"line\">      <span class=\"string\">&#x27;increment&#x27;</span>, <span class=\"comment\">// 将 `this.increment()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// `mapMutations` 也支持载荷：</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;incrementBy&#x27;</span> <span class=\"comment\">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&#x27;incrementBy&#x27;, amount)`</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    ...mapMutations(&#123;</span><br><span class=\"line\">      <span class=\"attr\">add</span>: <span class=\"string\">&#x27;increment&#x27;</span> <span class=\"comment\">// 将 `this.add()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mapMutations 支持传入一个数组或者对象，目标都是组件中对应的 methods 映射为 store.commit 的调用</p>\n<p>定义：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mapMutations = normalizeNamespace(<span class=\"function\">(<span class=\"params\">namespace, mutations</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</span><br><span class=\"line\">  normalizeMap(mutations).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedMutation</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Get the commit method from store</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> commit = <span class=\"built_in\">this</span>.$store.commit</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (namespace) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"built_in\">module</span> = getModuleByNamespace(<span class=\"built_in\">this</span>.$store, <span class=\"string\">&#x27;mapMutations&#x27;</span>, namespace)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">module</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        commit = <span class=\"built_in\">module</span>.context.commit</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">&#x27;function&#x27;</span> ? val.apply(<span class=\"built_in\">this</span>, [commit].concat(args)) : commit.apply(<span class=\"built_in\">this</span>.$store, [val].concat(args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 <code>mappedMutation</code> 同样支持了 <code>namespace</code>, 并且支持了传入额外的参数 <code>args</code>，作为提交 <code>mutation</code> 的 <code>payload</code>, 最终就是执行了 <code>store.commit</code> 方法，并且这个 <code>commit</code> 会根据传入的 <code>namespace</code> 映射到对应 <code>module</code> 的 <code>commit</code> 上</p>\n<h4 id=\"mapActions\"><a href=\"#mapActions\" class=\"headerlink\" title=\"mapActions\"></a>mapActions</h4><p>我们可以在组件中使用 <code>this.$store.dispatch(&#39;xx&#39;)</code> 提交 <code>action</code>，或者使用 <code>mapActions</code> 辅助函数将组件中的 <code>methods</code> 映射为 <code>store.dispatch</code> 的调用</p>\n<p>定义，和 mapMutaions 基本一样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mapActions = normalizeNamespace(<span class=\"function\">(<span class=\"params\">namespace, actions</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = &#123;&#125;</span><br><span class=\"line\">  normalizeMap(actions).forEach(<span class=\"function\">(<span class=\"params\">&#123; key, val &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res[key] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mappedAction</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// get dispatch function from store</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> dispatch = <span class=\"built_in\">this</span>.$store.dispatch</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (namespace) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"built_in\">module</span> = getModuleByNamespace(<span class=\"built_in\">this</span>.$store, <span class=\"string\">&#x27;mapActions&#x27;</span>, namespace)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">module</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dispatch = <span class=\"built_in\">module</span>.context.dispatch</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> val === <span class=\"string\">&#x27;function&#x27;</span> ? val.apply(<span class=\"built_in\">this</span>, [dispatch].concat(args)) : dispatch.apply(<span class=\"built_in\">this</span>.$store, [val].concat(args))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态更新模块\"><a href=\"#动态更新模块\" class=\"headerlink\" title=\"动态更新模块\"></a>动态更新模块</h3><p>在 <code>Vuex</code> 初始化阶段我们构造了模块树，初始化了模块上各个部分。在有一些场景下，我们需要动态去注入一些新的模块，<code>Vuex</code> 提供了模块动态注册功能，在 <code>store</code> 上提供了一个 <code>registerModule</code> 的 <code>API</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">registerModule (path, rawModule, options = &#123;&#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> path === <span class=\"string\">&#x27;string&#x27;</span>) path = [path]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">    assert(<span class=\"built_in\">Array</span>.isArray(path), <span class=\"string\">`module path must be a string or an Array.`</span>)</span><br><span class=\"line\">    assert(path.length &gt; <span class=\"number\">0</span>, <span class=\"string\">&#x27;cannot register the root module by using registerModule.&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>._modules.register(path, rawModule)</span><br><span class=\"line\">  installModule(<span class=\"built_in\">this</span>, <span class=\"built_in\">this</span>.state, path, <span class=\"built_in\">this</span>._modules.get(path), options.preserveState)</span><br><span class=\"line\">  <span class=\"comment\">// reset store to update getters...</span></span><br><span class=\"line\">  resetStoreVM(<span class=\"built_in\">this</span>, <span class=\"built_in\">this</span>.state)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有一个卸载的函数，当然这里只会卸载动态创建的模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">unregisterModule (path) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> path === <span class=\"string\">&#x27;string&#x27;</span>) path = [path]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">    assert(<span class=\"built_in\">Array</span>.isArray(path), <span class=\"string\">`module path must be a string or an Array.`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>._modules.unregister(path)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._withCommit(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentState = getNestedState(<span class=\"built_in\">this</span>.state, path.slice(<span class=\"number\">0</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">    Vue.delete(parentState, path[path.length - <span class=\"number\">1</span>])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  resetStore(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["vue"],"tags":["vue2.x","笔记","vuex"]},{"title":"webpack4","url":"/blog-next/2018/07/29/webpack4/","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>突然从 webpack2 升级到了 webpack4 遇到了很多问题，安装的时候突然就冒出一个 webpack-cli 的脚手架工具，据说可以像 parcel 那样 0 配置直接开发项目，但是还是不打算直接用。</p>\n<ul>\n<li>首先先说一下安装的问题<br>  全局安装需要安装 webpack 和 webpack-cli，必须全部安装，但是内部文件中使用 webpack 的时候还是会有问题，会有 module 未能找到的报错，不知道 bin 目录中究竟是安装了什么东西<br>  但是如果你是直接在自己的根目录下安装 webpack 和 webpack-cli 的话，是不会有什么问题的，步骤如下：  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install webpack -D</span><br><span class=\"line\">npm install webpack-cli -D</span><br><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n  但是以前的直接用 webpack 直接打包的命令是不能用了，而且现在需要你把入口名字直接放到 src/index.js 里面， 使用如下命令便能直接打包相关文件了  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">webpack --mode-development</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h3><ul>\n<li>entry 文件的入口，也是打包的入口，个人习惯是一个对象，这样扩展性比较好，可以有单个或者多个entry</li>\n<li>output 打包的文件 bundle，可以自定义名字，可以多个，可以自定义规格</li>\n<li>module 存放各种 loader</li>\n<li>plugins 参与打包的整个过程，配置编译时的变量，打包优化和压缩</li>\n<li>optimization 这个 webpack4 新增的属性，就是优化的意思，就是以前 plugins 里面的内容抽离出来的</li>\n</ul>\n<h3 id=\"基础命令和脚手架工具\"><a href=\"#基础命令和脚手架工具\" class=\"headerlink\" title=\"基础命令和脚手架工具\"></a>基础命令和脚手架工具</h3><ul>\n<li><p>脚手架工具感觉还是不太成熟，可以关注 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay1jbGkvdHJlZS9hY2YwZmQ5NjE5NThjN2ExZWE5ODQ5MTRkMmIwZGJlYjQ3MDM0YzNl\">webpack-cli<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>平时自己还是敲命令会灵活一点，比如<br><code>webpack -config webpack.config.js</code></p>\n<h3 id=\"编译-es6、7\"><a href=\"#编译-es6、7\" class=\"headerlink\" title=\"编译 es6、7\"></a>编译 es6、7</h3></li>\n<li><p>babel(包括babel-loader;babel-presets;babel-plugin;)处理语法为 es3 之类的</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install babel-loader babel-core babel-presets</span><br></pre></td></tr></table></figure></li>\n<li><p>babel-polyfill;babel-runtime 处理低版本浏览器没有的 api, 当然开发就选择polyfill，全局 import 就 ok，runtime 是局部垫片，一般开发框架用</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install babel-polyfill babel-runtime babel-plugin-transform-runtime </span><br></pre></td></tr></table></figure></li>\n<li><p>还有一点就是一般会在根目录下写一个 babelrc 文件用来写 babel 的配置，这样就不需要再 babel-loader 中在配置 options</p>\n</li>\n</ul>\n<h3 id=\"使用-ts\"><a href=\"#使用-ts\" class=\"headerlink\" title=\"使用 ts\"></a>使用 ts</h3><ul>\n<li>需要安装 typescript ts-loader awesome-typescript-loader<br>  配置文件 .tsconfig.json  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class=\"line\">    &quot;target&quot;: &quot;es5&quot;,</span><br><span class=\"line\">    &quot;allowJs&quot;: true,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;include&quot;: [&quot;./src/*&quot;],</span><br><span class=\"line\">  &quot;exclude&quot;: [&quot;./node_modules&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n  具体使用见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpaWNvbi9qcy1saWJyYXJ5L3RyZWUvbWFzdGVyL3BhY2thZ2UvdHlwZXNjcmlwdA==\">typescript<i class=\"fa fa-external-link-alt\"></i></span><h3 id=\"打包公共代码\"><a href=\"#打包公共代码\" class=\"headerlink\" title=\"打包公共代码\"></a>打包公共代码</h3></li>\n<li>webpack3 是用 webpack.commonPlugin, webpack4 是用 splitChunks, 这个的配置官网说的简直是太迷了，试了好多次才掌握了怎么去使用</li>\n</ul>\n<p>config 的配置一般写在 optimization 下，第一步，提取单文件组件中的公共 js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">    minimize: false,  \t\t\t\t\t// 不压缩</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: &#x27;all&#x27;,\t\t\t\t\t// 范围为全部块</span><br><span class=\"line\">      name: true,\t\t\t\t\t\t// 自动命名</span><br><span class=\"line\">      cacheGroups: &#123;\t\t\t\t\t// 缓存组</span><br><span class=\"line\">        default: false,\t\t\t\t\t// 公共代码在 default，不想用 false</span><br><span class=\"line\">        commons: &#123;\t\t\t\t\t\t// commons 只是一个名字</span><br><span class=\"line\">          name: &#x27;common&#x27;,\t\t\t\t// 指定 chunkname</span><br><span class=\"line\">          chunks: &#x27;all&#x27;,\t\t\t\t</span><br><span class=\"line\">          minChunks: 1,\t\t\t\t\t// 1 还是 2 不清楚</span><br><span class=\"line\">          maxInitialRequests: 5,\t\t// 初始化并行请求最大数</span><br><span class=\"line\">          minSize: 0\t\t\t\t\t// 打包条件，最小为 0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>需要注意的是 cacheGroups 中的 priority test reuseExistingChunk 不能继承覆盖父级属性</strong></p>\n<ul>\n<li>但是可以看出来，打包的结果虽然可以分开两个文件，但是公共代码并没有提取出来，因为 webpack 其实支持的是多 entry 提取公共代码，so， 第二步，多 entry 提取公共代码</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cacheGroups: &#123;</span><br><span class=\"line\">\tdefault: false,</span><br><span class=\"line\">\tcommons: &#123;</span><br><span class=\"line\">\t  name: &#x27;common&#x27;,</span><br><span class=\"line\">\t  chunks: &#x27;all&#x27;,</span><br><span class=\"line\">\t  minChunks: 2,\t\t\t\t\t// 一般都至少为 2</span><br><span class=\"line\">\t  maxInitialRequests: 5,</span><br><span class=\"line\">\t  minSize: 0</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过这样就可以提取多文件的公共代码了, 但是如果页面中引入了第三方插件，或者 npm 引入了第三方代码，我们一般都要把其与业务代码分离, 用下面的方式就都能做到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    filename: &#x27;[name].bundle.js&#x27;,</span><br><span class=\"line\">    chunkFilename: &#x27;[name].chunk.js&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    minimize: false,</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: &#x27;all&#x27;,</span><br><span class=\"line\">      name: true,</span><br><span class=\"line\">      maxSize: 30000,</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        default: false,</span><br><span class=\"line\">        commons: &#123;</span><br><span class=\"line\">          name: &#x27;common&#x27;,</span><br><span class=\"line\">          chunks: &#x27;all&#x27;,</span><br><span class=\"line\">          minChunks: 2,</span><br><span class=\"line\">          maxInitialRequests: 5,</span><br><span class=\"line\">          minSize: 0</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        vendors: &#123;</span><br><span class=\"line\">          chunks: &#x27;initial&#x27;,</span><br><span class=\"line\">          test: /[\\\\/]node_modules[\\\\/]/,</span><br><span class=\"line\">          priority: 10</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new cleanWebpackPlugin(&#x27;dist&#x27;),</span><br><span class=\"line\"></span><br><span class=\"line\">    new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">      $: &#x27;jquery&#x27;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      jquery$: path.resolve(__dirname, &#x27;./src/js/jquery.js&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过上面的代码可以打包多文件入口，再次回到提取同一个文件相同的 chunk，这个主要是用在懒加载、还有区分自己的业务公共代码、第三方公共代码、业务代码， 自己的业务代码可以用两种方法分割<ol>\n<li>require.ensure([], fn, vendor) 这种方式呢公用代码需要自己写 require.include() 这是 webpack 的方式</li>\n<li>import(/* webpackChunkName: vendor, &#39;&#39; */).then()  这是 es6 的方式<br>基本上还是通过上面的配置就能实现分离自己的业务代码，业务公共代码，已经第三方代码 如下</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var webpack = require(&#x27;webpack&#x27;)</span><br><span class=\"line\">var cleanWebpackPlugin = require(&#x27;clean-webpack-plugin&#x27;)</span><br><span class=\"line\">var path = require(&#x27;path&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    pagea: &#x27;./src/pagea.js&#x27;,</span><br><span class=\"line\">    // pageb: &#x27;./src/pageb.js&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#x27;[name].bundle.js&#x27;,</span><br><span class=\"line\">    chunkFilename: &#x27;[name].chunk.js&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    minimize: false,</span><br><span class=\"line\">    occurrenceOrder: true,</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      name: true,</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        default: false,</span><br><span class=\"line\">        commons: &#123;</span><br><span class=\"line\">          name: &#x27;common&#x27;,</span><br><span class=\"line\">          chunks: &#x27;all&#x27;,</span><br><span class=\"line\">          minChunks: 2,</span><br><span class=\"line\">          maxInitialRequests: 5,</span><br><span class=\"line\">          minSize: 0</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        vendors: &#123;</span><br><span class=\"line\">          chunks: &#x27;initial&#x27;,</span><br><span class=\"line\">          test: /node_modules/,</span><br><span class=\"line\">          priority: 10,</span><br><span class=\"line\">          enforce: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new cleanWebpackPlugin(&#x27;dist&#x27;),</span><br><span class=\"line\"></span><br><span class=\"line\">    new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">      $: &#x27;jquery&#x27;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      jquery$: path.resolve(__dirname, &#x27;./src/js/jquery.js&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>上面说的比较啰嗦，但是是一个思维过程，下面贴出最终的 splitChunks</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var webpack = require(&#x27;webpack&#x27;)</span><br><span class=\"line\">var cleanWebpackPlugin = require(&#x27;clean-webpack-plugin&#x27;)</span><br><span class=\"line\">var path = require(&#x27;path&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    pagea: &#x27;./src/pagea.js&#x27;,</span><br><span class=\"line\">    pageb: &#x27;./src/pageb.js&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#x27;[name].bundle.js&#x27;,</span><br><span class=\"line\">    chunkFilename: &#x27;[name].chunk.js&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    minimize: false,</span><br><span class=\"line\">    occurrenceOrder: true,</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      name: true,</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        default: false,</span><br><span class=\"line\">        commons: &#123;\t\t\t\t\t\t// 初始代码提取到 common</span><br><span class=\"line\">          name: &#x27;common&#x27;,</span><br><span class=\"line\">          chunks: &#x27;initial&#x27;,</span><br><span class=\"line\">          minChunks: 2,</span><br><span class=\"line\">          maxInitialRequests: 5,</span><br><span class=\"line\">          minSize: 0</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        asyncommon: &#123;\t\t\t\t\t// 异步加载的提取到 async-common</span><br><span class=\"line\">          name: &#x27;async-common&#x27;,</span><br><span class=\"line\">          minChunks: 2,</span><br><span class=\"line\">          chunks: &#x27;async&#x27;,</span><br><span class=\"line\">          maxInitialRequests: 5,</span><br><span class=\"line\">          minSize: 0</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        vendors: &#123;</span><br><span class=\"line\">          chunks: &#x27;initial&#x27;,\t\t\t// 第三方依赖提取到 vendor</span><br><span class=\"line\">          test: /node_modules/,</span><br><span class=\"line\">          priority: 10,</span><br><span class=\"line\">          enforce: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new cleanWebpackPlugin(&#x27;dist&#x27;),</span><br><span class=\"line\"></span><br><span class=\"line\">    new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">      $: &#x27;jquery&#x27;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      jquery$: path.resolve(__dirname, &#x27;./src/js/jquery.js&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"处理-css\"><a href=\"#处理-css\" class=\"headerlink\" title=\"处理 css\"></a>处理 css</h3><p>安装 loader 和插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">style-loader </span><br><span class=\"line\">css-loader</span><br><span class=\"line\">postcss-loader</span><br><span class=\"line\">less-loader less</span><br><span class=\"line\">sass-loader node-sass</span><br><span class=\"line\">提取 css mini-css-extract-plugin</span><br><span class=\"line\">压缩 css optimize-css-assets-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<p>配置如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);</span><br><span class=\"line\">var UglifyJsPlugin = require(&#x27;uglifyjs-webpack-plugin&#x27;);</span><br><span class=\"line\">var OptimizeCSSAssetsPlugin = require(&#x27;optimize-css-assets-webpack-plugin&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: &#x27;./src/app.js&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#x27;[name].bundle.js&#x27;,</span><br><span class=\"line\">    publicPath: &#x27;./dist/&#x27;,</span><br><span class=\"line\">    chunkFilename: &#x27;[name].chunk.js&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    minimize: false,</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        styles: &#123;</span><br><span class=\"line\">          name: &#x27;styles&#x27;,</span><br><span class=\"line\">          test: /\\.css$/,</span><br><span class=\"line\">          chunks: &#x27;all&#x27;,</span><br><span class=\"line\">          enforce: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    minimizer: [</span><br><span class=\"line\">      new UglifyJsPlugin(&#123;</span><br><span class=\"line\">        cache: true,</span><br><span class=\"line\">        parallel: true,</span><br><span class=\"line\">        sourceMap: true // set to true if you want JS source maps</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      new OptimizeCSSAssetsPlugin(&#123;&#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.less$/,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &#x27;style-loader&#x27;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: MiniCssExtractPlugin.loader</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &#x27;css-loader&#x27;,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              minimize: true,</span><br><span class=\"line\">              // modules: true,</span><br><span class=\"line\">              localIdentName: &#x27;[path][name]__[local]--[hash:base64:5]&#x27;,</span><br><span class=\"line\">              sourceMap: true,</span><br><span class=\"line\">              importLoaders: 2</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &#x27;postcss-loader&#x27;,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              ident: &#x27;postcss&#x27;,</span><br><span class=\"line\">              plugins: [</span><br><span class=\"line\">                // require(&#x27;autoprefixer&#x27;)()</span><br><span class=\"line\">                require(&#x27;postcss-cssnext&#x27;)()</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &#x27;less-loader&#x27;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      filename: &#x27;[name].min.css&#x27;,</span><br><span class=\"line\">      chunkFilename: &#x27;[name].css&#x27;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tree-shaking\"><a href=\"#tree-shaking\" class=\"headerlink\" title=\"tree shaking\"></a>tree shaking</h3><p>其实上面就已经都有配置了，占空留着以后写吧</p>\n<h3 id=\"处理文件\"><a href=\"#处理文件\" class=\"headerlink\" title=\"处理文件\"></a>处理文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">file-loader</span><br><span class=\"line\">url-loader\t\t// 处理图片的时候可以只用 url-loader</span><br><span class=\"line\">img-loader  \t\t// 压缩好像不太好用了</span><br><span class=\"line\">postcss-sprites \t// css 雪碧图</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tloader: &#x27;postcss-loader&#x27;,</span><br><span class=\"line\">\toptions: &#123;</span><br><span class=\"line\">\t  ident: &#x27;postcss&#x27;,</span><br><span class=\"line\">\t  plugins: [</span><br><span class=\"line\">\t    // require(&#x27;autoprefixer&#x27;)()</span><br><span class=\"line\">\t    require(&#x27;postcss-sprites&#x27;)(&#123;</span><br><span class=\"line\">\t      spritePath: &#x27;./dist/assets/&#x27;,</span><br><span class=\"line\">\t      retina: true</span><br><span class=\"line\">\t    &#125;),</span><br><span class=\"line\">\t    require(&#x27;postcss-cssnext&#x27;)()</span><br><span class=\"line\">\t  ]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ttest: /\\.(jpg|png|jpeg|gif)$/,</span><br><span class=\"line\">\tuse: [</span><br><span class=\"line\">\t  // &#123;</span><br><span class=\"line\">\t  //   loader: &#x27;file-loader&#x27;,</span><br><span class=\"line\">\t  //   options: &#123;</span><br><span class=\"line\">\t  //     publicPath: &#x27;./assets/&#x27;,</span><br><span class=\"line\">\t  //     outputPath: &#x27;&#x27;,</span><br><span class=\"line\">\t  //     useRelativePath: true</span><br><span class=\"line\">\t  //   &#125;</span><br><span class=\"line\">\t  // &#125;,</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    loader: &#x27;url-loader&#x27;,</span><br><span class=\"line\">\t    options: &#123;</span><br><span class=\"line\">\t      name: &#x27;[name]-[hash:6].[ext]&#x27;,</span><br><span class=\"line\">\t      limit: 1000,</span><br><span class=\"line\">\t      publicPath: &#x27;./assets/&#x27;,</span><br><span class=\"line\">\t      outputPath: &#x27;&#x27;,</span><br><span class=\"line\">\t      useRelativePath: true</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  &#125;,</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    // 用img-loader来压缩图片竟然是不好用了</span><br><span class=\"line\">\t    loader: &#x27;img-loader&#x27;,</span><br><span class=\"line\">\t    options: &#123;</span><br><span class=\"line\">\t      pngquant: &#123;</span><br><span class=\"line\">\t        quality: 20</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\ttest: /\\.(eot|svg|ttf|woff2?)$/,</span><br><span class=\"line\">\tuse: [</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    loader: &#x27;url-loader&#x27;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成-HTML\"><a href=\"#生成-HTML\" class=\"headerlink\" title=\"生成 HTML\"></a>生成 HTML</h3><p>html-webpack-plugin  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">rules: &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\ttest: /\\.html$/,</span><br><span class=\"line\">\tuse: [</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t    loader: &#x27;html-loader&#x27;,</span><br><span class=\"line\">\t    options: &#123;</span><br><span class=\"line\">\t      attrs: [&#x27;img:src&#x27;, &#x27;img:data-src&#x27;],</span><br><span class=\"line\">\t      minimize: false,</span><br><span class=\"line\">\t      collapseWhitespace: true</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">\tnew htmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: &#x27;index.html&#x27;,</span><br><span class=\"line\">      template: &#x27;./index.html&#x27;,</span><br><span class=\"line\">      inject: true,</span><br><span class=\"line\">      minimize: true</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3><p>就说devserver, 一个简单的例子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">\tport: 0000,</span><br><span class=\"line\">\thot: true,</span><br><span class=\"line\">\tinline: false,</span><br><span class=\"line\">\toverlay: true,</span><br><span class=\"line\">\tproxy: &#123;</span><br><span class=\"line\">\t\t&#x27;/&#x27;: &#123;</span><br><span class=\"line\">        target: &#x27;http://apitest.zyh365.com&#x27;,</span><br><span class=\"line\">        changeOrigin: true,</span><br><span class=\"line\">        logLevel: &#x27;debug&#x27;,</span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">          &#x27;^/common&#x27;: &#x27;/mobile/web/common&#x27;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        headers: &#123;&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\thistoryApiFallback: &#123;</span><br><span class=\"line\">      rewrites: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          from: /^\\/([a-zA-Z0-9]+\\/?)([a-zA-Z0-9]+)/,</span><br><span class=\"line\">          to: function(context) &#123;</span><br><span class=\"line\">            return &#x27;/&#x27; + context.match[1] + context.match[2] + &#x27;.html&#x27;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack-merge\"><a href=\"#webpack-merge\" class=\"headerlink\" title=\"webpack-merge\"></a>webpack-merge</h3><p>在 webpack3 以前一般都是通过打包命令传一个参数过来指定是 development 还是 production，然后利用 webpack-merge 以 common 为基础文件，生成不同环境下的不同文件</p>\n<p>但是 webpack4 之后呢，提供了一个 mode 的参数, 就是可以指定不同配置文件，这样的情况下就不用再传参数，再在 common 中做一大堆的判断了，只需要分开公共部分就可以了，下面就是 3 和 4 的对比</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">const path = require(&#x27;path&#x27;)</span><br><span class=\"line\">const webpack = require(&#x27;webpack&#x27;)</span><br><span class=\"line\">const devConfig = require(&#x27;./webpack.dev.conf&#x27;)</span><br><span class=\"line\">const prodConfig = require(&#x27;./webpack.prod.conf&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">const merge = require(&#x27;webpack-merge&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;)</span><br><span class=\"line\">const htmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">const generate = env =&gt; &#123;</span><br><span class=\"line\">  const scriptLoader = [&#x27;babel-loader&#x27;].concat(</span><br><span class=\"line\">    env === &#x27;production&#x27;</span><br><span class=\"line\">      ? []</span><br><span class=\"line\">      : [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &#x27;eslint-loader&#x27;,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              formatter: require(&#x27;eslint-friendly-formatter&#x27;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">  )</span><br><span class=\"line\">  const cssLoader = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      loader: &#x27;css-loader&#x27;,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        // minimize: true,</span><br><span class=\"line\">        // modules: true,</span><br><span class=\"line\">        localIdentName: &#x27;[path][name]__[local]--[hash:base64:5]&#x27;,</span><br><span class=\"line\">        sourceMap: env === &#x27;development&#x27;,</span><br><span class=\"line\">        importLoaders: 2</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      loader: &#x27;postcss-loader&#x27;,</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        ident: &#x27;postcss&#x27;,</span><br><span class=\"line\">        sourceMap: env === &#x27;development&#x27;,</span><br><span class=\"line\">        plugins: [</span><br><span class=\"line\">          // require(&#x27;autoprefixer&#x27;)(),</span><br><span class=\"line\">          require(&#x27;postcss-cssnext&#x27;)()</span><br><span class=\"line\">        ].concat(</span><br><span class=\"line\">          env === &#x27;production&#x27;</span><br><span class=\"line\">            ? [</span><br><span class=\"line\">                require(&#x27;postcss-sprites&#x27;)(&#123;</span><br><span class=\"line\">                  spritePath: &#x27;../dist/assets/&#x27;,</span><br><span class=\"line\">                  retina: true</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            : []</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  const styleLoader = (env === &#x27;development&#x27;</span><br><span class=\"line\">    ? [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: &#x27;style-loader&#x27;,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            // insertInto: &#x27;#app&#x27;,</span><br><span class=\"line\">            // singleton: true,</span><br><span class=\"line\">            transform: &#x27;util/css.transform.js&#x27;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    : [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          loader: MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          options: &#123; sourceMap: true, publicPath: &#x27;/&#x27; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">  ).concat(cssLoader)</span><br><span class=\"line\"></span><br><span class=\"line\">  const fileLoader =</span><br><span class=\"line\">    env === &#x27;development&#x27;</span><br><span class=\"line\">      ? [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &#x27;file-loader&#x27;,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              publicPath: &#x27;&#x27;,</span><br><span class=\"line\">              outputPath: &#x27;./assets/&#x27;</span><br><span class=\"line\">              // useRelativePath: true</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      : [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &#x27;url-loader&#x27;,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: &#x27;[name]-[hash:6].[ext]&#x27;,</span><br><span class=\"line\">              limit: 2000,</span><br><span class=\"line\">              publicPath: &#x27;&#x27;,</span><br><span class=\"line\">              outputPath: &#x27;./assets/&#x27;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          // &#123; </span><br><span class=\"line\">          // 这里可千万不能有空行，浪费了五个小时才找到这个错误</span><br><span class=\"line\">          //   // loader: &#x27;img-loader&#x27;,</span><br><span class=\"line\">          //   // options: &#123; pngquant: &#123; quality: 80 &#125; &#125;</span><br><span class=\"line\">          // &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    entry: &#123; app: &#x27;./src/app.js&#x27; &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: &#x27;js/[name].bundle.js&#x27;,</span><br><span class=\"line\">      publicPath: &#x27;/&#x27;,</span><br><span class=\"line\">      path: path.resolve(__dirname, &#x27;../dist&#x27;),</span><br><span class=\"line\">      chunkFilename: &#x27;js/[name].chunk.js&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">      alias: &#123; jquery$: path.resolve(__dirname, &#x27;../src/js/jquery.js&#x27;) &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">      rules: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: /\\.js$/,</span><br><span class=\"line\">          exclude: /node_modules/,</span><br><span class=\"line\">          include: path.resolve(__dirname, &#x27;../src&#x27;),</span><br><span class=\"line\">          use: scriptLoader</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: /\\.css$/,</span><br><span class=\"line\">          use: styleLoader</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: /\\.(jpg|png|jpeg|gif)$/,</span><br><span class=\"line\">          use: fileLoader</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          test: /\\.html$/,</span><br><span class=\"line\">          use: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              loader: &#x27;html-loader&#x27;,</span><br><span class=\"line\">              options: &#123;</span><br><span class=\"line\">                attrs: [&#x27;img:src&#x27;, &#x27;img:data-src&#x27;],</span><br><span class=\"line\">                minimize: true,</span><br><span class=\"line\">                collapseWhitespace: true</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123; test: /\\.(eot|svg|ttf|woff2?)$/, use: [&#123; loader: &#x27;url-loader&#x27; &#125;] &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">        filename: &#x27;./css/[name].min.css&#x27;,</span><br><span class=\"line\">        chunkFilename: &#x27;./css/[name].css&#x27;</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      new htmlWebpackPlugin(&#123;</span><br><span class=\"line\">        filename: &#x27;index.html&#x27;,</span><br><span class=\"line\">        template: &#x27;./index.html&#x27;,</span><br><span class=\"line\">        inject: true,</span><br><span class=\"line\">        minimize: true</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">        $: &#x27;jquery&#x27;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = env =&gt; &#123;</span><br><span class=\"line\">  let config = env === &#x27;development&#x27; ? devConfig : prodConfig</span><br><span class=\"line\">  return merge(generate(env), config)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">webpack.common.js</span><br><span class=\"line\"></span><br><span class=\"line\">+ const path = require(&#x27;path&#x27;);</span><br><span class=\"line\">+ const CleanWebpackPlugin = require(&#x27;clean-webpack-plugin&#x27;);</span><br><span class=\"line\">+ const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class=\"line\">+</span><br><span class=\"line\">+ module.exports = &#123;</span><br><span class=\"line\">+   entry: &#123;</span><br><span class=\"line\">+     app: &#x27;./src/index.js&#x27;</span><br><span class=\"line\">+   &#125;,</span><br><span class=\"line\">+   plugins: [</span><br><span class=\"line\">+     new CleanWebpackPlugin([&#x27;dist&#x27;]),</span><br><span class=\"line\">+     new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">+       title: &#x27;Production&#x27;</span><br><span class=\"line\">+     &#125;)</span><br><span class=\"line\">+   ],</span><br><span class=\"line\">+   output: &#123;</span><br><span class=\"line\">+     filename: &#x27;[name].bundle.js&#x27;,</span><br><span class=\"line\">+     path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class=\"line\">+   &#125;</span><br><span class=\"line\">+ &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">+ webpack.dev.js</span><br><span class=\"line\"></span><br><span class=\"line\">+ const merge = require(&#x27;webpack-merge&#x27;);</span><br><span class=\"line\">+ const common = require(&#x27;./webpack.common.js&#x27;);</span><br><span class=\"line\">+</span><br><span class=\"line\">+ module.exports = merge(common, &#123;</span><br><span class=\"line\">+   mode: &#x27;development&#x27;,</span><br><span class=\"line\">+   devtool: &#x27;inline-source-map&#x27;,</span><br><span class=\"line\">+   devServer: &#123;</span><br><span class=\"line\">+     contentBase: &#x27;./dist&#x27;</span><br><span class=\"line\">+   &#125;</span><br><span class=\"line\">+ &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">webpack.prod.js</span><br><span class=\"line\"></span><br><span class=\"line\">+ const merge = require(&#x27;webpack-merge&#x27;);</span><br><span class=\"line\">+ const common = require(&#x27;./webpack.common.js&#x27;);</span><br><span class=\"line\">+</span><br><span class=\"line\">+ module.exports = merge(common, &#123;</span><br><span class=\"line\">+   mode: &#x27;production&#x27;,</span><br><span class=\"line\">+ &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这篇博客其实只是记录了学习中个人有感觉的一些点，当然也都是一些基本功能，webpack 本身并不复杂，只是配置项太多了，并不能静下心来去仔细看所有的 api config.., 但是我觉得应该在项目中再继续完善这篇博客，这篇记录算是对 2018 年 7 月的一个 ending 吧。</p>\n","categories":["前端工程化"],"tags":["webpack"]},{"title":"图解HTTP读书笔记","url":"/blog-next/2018/11/27/%E5%9B%BE%E8%A7%A3HTTP%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","content":"<h2 id=\"了解-web-及网络基础\"><a href=\"#了解-web-及网络基础\" class=\"headerlink\" title=\"了解 web 及网络基础\"></a>了解 web 及网络基础</h2><h3 id=\"使用-http-访问-web\"><a href=\"#使用-http-访问-web\" class=\"headerlink\" title=\"使用 http 访问 web\"></a>使用 http 访问 web</h3><ol>\n<li>http：HyperText Transfer Protocal 超文本传输协议，可以说 web 是建立在 http 协议上通信的</li>\n<li>网络基础 TCP/IP 协议族， http 是他的一个子集</li>\n<li>TCP/IP 的分层管理，分为四层：应用层，传输层，网络层，数据链路层。<ol>\n<li>应用层决定了向用户提供应用服务是通信的活动 http DNS</li>\n<li>传输层对上层应用层，提供处于网络连接中两台计算机的数据传输 TCP UDP</li>\n<li>网络层用来处理在网络上流动的数据包，该层决定了通过怎样的路径到达对方计算机</li>\n<li>链路层用来处理连接网络的硬件部分，包括控制操作系统、硬件的设备驱动、NIC（网卡），以及光纤等物理可见部分</li>\n</ol>\n</li>\n<li>TCP/IP 通信数据流<br><img src=\"http://p1ix9dj97.bkt.clouddn.com/940171-20170308000555563-666203198.png\" alt=\"示意图\" loading=\"lazy\"><br>这种把数据信息包装起来的做法称为封装（encapsulate）</li>\n<li>与 Http 密切相关的 3 个协议（IP, TCP, DNS）<ol>\n<li>IP 协议位于网络层，他的作用就是把各种数据包传输给对方，要保证确实传送到需要两个条件， IP 地址和 MAC 地址，IP 地址是指节点被分配的地址， MAC 地址是网卡所属的固定地址，这两可以进行配对，ip 可变， mac 地址基本不变</li>\n<li>使用 ARP (address resolution Protocal) 协议凭借 mac 地址进行通信，作为中转，他是一中解析地址的协议，根据 IP 可反查出 mac 地址</li>\n<li>TCP 位于传输层，提供可靠的字节流服务（byte stream service）为了传输将大块数据分割成报文段为单位的数据包进行管理，一言以蔽之，TCP 协议为了更容易传输大数据才把数据分割，而且 TCP 协议能够准确确认最终是否送达对方<ul>\n<li>当然这个时候就需要三次握手了 <img src=\"http://p1ix9dj97.bkt.clouddn.com/825196-20170327122810983-651007038.jpg\" alt=\"示意图\" loading=\"lazy\"></li>\n<li>上图所示，tcp 采用 flag -- SYN(synchronize) 和 ACK (acknowledgement) 确认收到的信，简单说一下流程，发送端首先发送一个带 syn 标志的数据包给对方，服务端接受到后，回传一个带有 syn/ack 标志的数据包以示传达确认信息，最后，发送端再回传一个带 ACK 标志的数据包，代表‘握手结束’</li>\n</ul>\n</li>\n<li>负责域名解析的 DNS 服务，（Domain Name System）处于应用层，他提供域名到 ip 地址之间的解析服务</li>\n<li>与 URI（Uniform Resource Identifier） 相比，我们更熟悉 URL（Uniform Resource Locator），URI 用字符串标识某一互联网资源，而 URL 表示资源的地点，所以 url 是 uri 子集<ul>\n<li>uri 包括登录信息，服务器地址，服务器端口号，带层次的文件路径，查询字符串，片段表示符<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://user:pass@www.example.jp:80/dir/index.html?uid=1#hash1</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"简单的-HTTP-协议\"><a href=\"#简单的-HTTP-协议\" class=\"headerlink\" title=\"简单的 HTTP 协议\"></a>简单的 HTTP 协议</h3><h4 id=\"http-协议用于客户端和服务端之间的通信\"><a href=\"#http-协议用于客户端和服务端之间的通信\" class=\"headerlink\" title=\"http 协议用于客户端和服务端之间的通信\"></a>http 协议用于客户端和服务端之间的通信</h4><p>用 http 协议就可以区分哪端是客户端，哪端是服务端</p>\n<h4 id=\"通过请求和响应的交换达成通信\"><a href=\"#通过请求和响应的交换达成通信\" class=\"headerlink\" title=\"通过请求和响应的交换达成通信\"></a>通过请求和响应的交换达成通信</h4><h4 id=\"http-是不保存状态的协议（stateless-protocal）\"><a href=\"#http-是不保存状态的协议（stateless-protocal）\" class=\"headerlink\" title=\"http 是不保存状态的协议（stateless protocal）\"></a>http 是不保存状态的协议（stateless protocal）</h4><p>也就是说协议对于发送过的请求或响应都不做持久化处理，不保留之前一切的请求或响应报文的信息。这是为了更快的处理大量事物，确保协议的可伸缩性</p>\n<h4 id=\"请求-URI-定位资源\"><a href=\"#请求-URI-定位资源\" class=\"headerlink\" title=\"请求 URI 定位资源\"></a>请求 URI 定位资源</h4><p>http 协议使用 URI 定位互联网上的资源，除此之外，如果不是访问特定的资源而是对服务器本身发起请求就可以用一个 * 来代替请求 URI</p>\n<h4 id=\"告知服务器意图的-http-方法\"><a href=\"#告知服务器意图的-http-方法\" class=\"headerlink\" title=\"告知服务器意图的 http 方法\"></a>告知服务器意图的 http 方法</h4><ol>\n<li>GET： 获取资源</li>\n<li>POST： 传输实体主体 （主要目的不是获取相应的主体内容）</li>\n<li>PUT： 传输文件 （本身不带验证机制）</li>\n<li>TRACE： 容易引发 XST， 一般也不怎么用</li>\n<li>CONNECT： 要求用隧道协议连接代理 （主要使用 SSL TLS）把通信内容加密后经网络隧道传输</li>\n</ol>\n<h4 id=\"使用方法下达命令\"><a href=\"#使用方法下达命令\" class=\"headerlink\" title=\"使用方法下达命令\"></a>使用方法下达命令</h4><p>GET POST PUT HEAD DELETE OPTIONS TRACE CONNECT</p>\n<h4 id=\"持久连接节省通信量\"><a href=\"#持久连接节省通信量\" class=\"headerlink\" title=\"持久连接节省通信量\"></a>持久连接节省通信量</h4><ol>\n<li>HTTP keep-alive 持久连接的好处在于减少了 tcp 连接的重复建立和断开所造成的额外开销，减轻了服务端的负载，这样 web 页面你的显示速度也就相应的提高了。http/1.1 所有的连接默认都是持久连接</li>\n<li>管线化（pipelining）不用等待相应亦可直接发送下一个请求</li>\n</ol>\n<h4 id=\"使用-cookie-的状态管理\"><a href=\"#使用-cookie-的状态管理\" class=\"headerlink\" title=\"使用 cookie 的状态管理\"></a>使用 cookie 的状态管理</h4><p>不可否认，无状态的协议当然有它的优点。由于不必保存状态，自然可以减少服务器的 cpu 及内存资源的消耗。因为简单，所以被应用在各种场景里。<br>cookie 技术在请求和相应的报文中写入 cookie 信息来控制客户端的状态。cookie 会根据从服务端发送的响应报文内的一个叫做 set-cookie 的首部字段信息，通知客户端保存 cookie ，下次客户端再往服务器发送请求时，客户端会在请求报文中加入 cookie 值后发送出去。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Set-Cookie: sid=132525583905; path=/; expires=wed,10-oct-12 ...</span><br><span class=\"line\"></span><br><span class=\"line\">Cookie: sid=132525583905</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-HTTP-报文内的-http-信息\"><a href=\"#3-HTTP-报文内的-http-信息\" class=\"headerlink\" title=\"3.HTTP 报文内的 http 信息\"></a>3.HTTP 报文内的 http 信息</h3><h4 id=\"HTTP-报文\"><a href=\"#HTTP-报文\" class=\"headerlink\" title=\"HTTP 报文\"></a>HTTP 报文</h4><p>用于 HTTP 协议交互的信息被称为 http 报文，请求端的称为请求报文，相应端的称为相应报文。http 报文本身是由多行数据构成的字符串文本。</p>\n<p>http 报文大致分为报文首部和报文主体两块。两者由最初的（CR+LF）来划分，通常，并不一定要有报文主体。</p>\n<h4 id=\"请求报文及响应报文的结构\"><a href=\"#请求报文及响应报文的结构\" class=\"headerlink\" title=\"请求报文及响应报文的结构\"></a>请求报文及响应报文的结构</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">请求报文--&gt; 请求报文首部</span><br><span class=\"line\">请求报文--&gt; 空行</span><br><span class=\"line\">请求报文--&gt; 报文主体</span><br><span class=\"line\">请求报文首部--&gt;请求行</span><br><span class=\"line\">请求报文首部--&gt;请求首部字段</span><br><span class=\"line\">请求报文首部--&gt;通用首部字段</span><br><span class=\"line\">请求报文首部--&gt;实体首部字段</span><br><span class=\"line\">请求报文首部--&gt;其他</span><br><span class=\"line\">报文主体--&gt;实体主体</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">响应报文--&gt; 响应报文首部</span><br><span class=\"line\">响应报文--&gt; 空行</span><br><span class=\"line\">响应报文--&gt; 报文主体</span><br><span class=\"line\">响应报文首部--&gt;状态行</span><br><span class=\"line\">响应报文首部--&gt;响应首部字段</span><br><span class=\"line\">响应报文首部--&gt;通用首部字段</span><br><span class=\"line\">响应报文首部--&gt;实体首部字段</span><br><span class=\"line\">响应报文首部--&gt;其他</span><br><span class=\"line\">报文主体--&gt;实体主体</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以看出来，首部字段一般有四种，分别是通用首部，请求首部，响应首部，实体首部</li>\n<li>而报文的首部则是由请求行，状态行，首部字段，其他组成</li>\n</ul>\n<h4 id=\"编码提升传输速率\"><a href=\"#编码提升传输速率\" class=\"headerlink\" title=\"编码提升传输速率\"></a>编码提升传输速率</h4><h5 id=\"报文主体和实体主体的差异\"><a href=\"#报文主体和实体主体的差异\" class=\"headerlink\" title=\"报文主体和实体主体的差异\"></a>报文主体和实体主体的差异</h5><ul>\n<li>报文（message）是 http 通信中的基本单位，由八位组字节流组成（octet sequence），通过 http 通信传输</li>\n<li>实体（entity）作为请求或响应的有效载荷数据被传输，其内容由实体首部和实体主体组成<br>http 报文的主体用于传输请求或响应的实体主体，通常报文主体等于实体主体，只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异</li>\n</ul>\n<h5 id=\"压缩传输的内容编码\"><a href=\"#压缩传输的内容编码\" class=\"headerlink\" title=\"压缩传输的内容编码\"></a>压缩传输的内容编码</h5><ul>\n<li><p>内容编码指明应用在实体内容上的编码格式，并保持实体信息原样压缩，内容编码后的实体由客户端接受并负责解码</p>\n</li>\n<li><p>常用的编码有一下几种</p>\n<p>1.gzip (GNU zip)<br>2.compress (UNIX 系统的标准压缩)<br>3.deflate (zlib)<br>4.identity (不进行压缩)</p>\n</li>\n</ul>\n<h5 id=\"分割发送的分块传输编码\"><a href=\"#分割发送的分块传输编码\" class=\"headerlink\" title=\"分割发送的分块传输编码\"></a>分割发送的分块传输编码</h5><ul>\n<li>把实体主体分块的功能称为分块传输编码 chunked transfer coding</li>\n</ul>\n<h5 id=\"发送多种数据的多部分对象集合\"><a href=\"#发送多种数据的多部分对象集合\" class=\"headerlink\" title=\"发送多种数据的多部分对象集合\"></a>发送多种数据的多部分对象集合</h5><ul>\n<li><p>MIME multipurpose Internet Mail Extensions （多用途因特网邮件扩展机制）</p>\n</li>\n<li><p>MIME 扩展中会使用一种称为多部分对象集合（multipart）的方法，来容纳多份不同类型的数据，http 协议中也采用了这种方法。</p>\n</li>\n<li><p>多部分对象集合包含的对象如下</p>\n<ol>\n<li>multipart/form-data 在 web 表单文件上传时使用</li>\n<li>multipart/byteranges 在状态码 206 响应报文包含了多个范围的内容时使用</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"获取部分内容的范围请求\"><a href=\"#获取部分内容的范围请求\" class=\"headerlink\" title=\"获取部分内容的范围请求\"></a>获取部分内容的范围请求</h4><ul>\n<li>指定范围发送的请求叫做范围请求（Range Request）</li>\n<li>执行请求时，会用到首部字段 Range 来指定资源的 byte 范围</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Range: bytes = 5001-10000</span><br><span class=\"line\">Range: bytes = 5001-</span><br><span class=\"line\">Range: bytes = -3000, 5000-7000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>响应会返回 206 partial content，而且会在首部字段 content-type 标明 multipart/bytesranges 后返回响应报文，如果服务器无法响应范围请求，就会返回 200 和完整的尸体内容</li>\n</ul>\n<h4 id=\"内容协商返回最合适的内容\"><a href=\"#内容协商返回最合适的内容\" class=\"headerlink\" title=\"内容协商返回最合适的内容\"></a>内容协商返回最合适的内容</h4><ul>\n<li><p>内容协商机制 content negotiation，是指客户端和服务端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源，内容协商会以响应资源的语言，字符集，编码方式等最为判断的基准，包含在请求报文中的某些字段就是判断的基准：</p>\n<ol>\n<li>Accept</li>\n<li>Accept-Charset</li>\n<li>Accept-Encoding</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h3><h4 id=\"状态码告知服务器请求返回的结果\"><a href=\"#状态码告知服务器请求返回的结果\" class=\"headerlink\" title=\"状态码告知服务器请求返回的结果\"></a>状态码告知服务器请求返回的结果</h4><p>状态码的类别</p>\n<table>\n<thead>\n<tr>\n<th>xxx</th>\n<th>类别</th>\n<th>原因短语</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1xx</td>\n<td>informational（信息性状态码）</td>\n<td>接受的请求正在处理</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>success （成功状态码）</td>\n<td>请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>Redirection（重定向状态码）</td>\n<td>需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>Client Error（客户端错误状态码）</td>\n<td>服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>Server Error（服务器错误状态码）</td>\n<td>服务器请求出错</td>\n</tr>\n</tbody></table>\n<p>具有代表性的 14 种状态码</p>\n<ol>\n<li>200 OK 表示从客户端发来的请求在服务端被正常处理了</li>\n<li>204 No Content 表示服务器接受的请求已成功处理，但在返回的响应报文中不含实体的主体部分，比如返回 204 之后，浏览器显示的页面不更新</li>\n<li>206 Partial Content 表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求</li>\n<li>301 Move Permanently 表示永久性重定向，当指定资源的路径最后忘记添加横杠，就会产生 301 状态码，如 <code>http://example.com/sample</code></li>\n<li>302 Found 临时性重定向</li>\n<li>303 See Other 表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源</li>\n<li>304 Not Modified 表示客户端发送附带条件的请求时，服务端允许请求访问资源，但因发生未满足条件的请求后，直接返回 304</li>\n<li>307 Temporary Redirect 基本和 302 相同，不会阻止转换方法</li>\n<li>400 Bad Request 表示请求报文中存在语法错误</li>\n<li>401 Unauthorized 表示发送的请求需要通过 HTTP 认证的认证信息，若之前已经进行过 1 次请求，则表示用户认证失败、</li>\n<li>403 Forbidden 请求资源的访问别服务器拒绝了</li>\n<li>404 Not Found 表示服务器上无法找到请求的资源</li>\n<li>500 Internal Server Error 标明服务器端在执行请求时发生了错误，也有可能是 web 应用的 bug 或某些临时的故障</li>\n<li>503 Service Unavailable 表示服务端暂时处于超负荷或正在进行停机维护</li>\n<li>504 Gateway Timeout</li>\n</ol>\n<h3 id=\"与-HTTP-协作的-web-服务器\"><a href=\"#与-HTTP-协作的-web-服务器\" class=\"headerlink\" title=\"与 HTTP 协作的 web 服务器\"></a>与 HTTP 协作的 web 服务器</h3><h4 id=\"用单台虚拟主机实现多个域名\"><a href=\"#用单台虚拟主机实现多个域名\" class=\"headerlink\" title=\"用单台虚拟主机实现多个域名\"></a>用单台虚拟主机实现多个域名</h4><p>在相同的 IP 地址下，由于虚拟主机可以寄存多个不同的主机名和域名的 web 网站，新词在发送请求的时候，必须在 Host 首部内完整指定主机名和域名</p>\n<h4 id=\"通信数据转发程序：代理、网关、隧道\"><a href=\"#通信数据转发程序：代理、网关、隧道\" class=\"headerlink\" title=\"通信数据转发程序：代理、网关、隧道\"></a>通信数据转发程序：代理、网关、隧道</h4><blockquote>\n<p>代理是一种有转发功能的应用程序，他扮演了位于服务器和客户端中间人的角色，接受客户端发送的请求并转发给服务器，同时也接受服务器返回的响应并转发给客户端</p>\n</blockquote>\n<p>转发请求需要附加 via 首部字段以标识出经过的主机信息<br>使用缓存代理服务器的理由有： 利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的<br>代理有两种分类，一种是是否使用缓存，另外一种是是否修改报文。比如缓存代理和透明代理</p>\n<blockquote>\n<p>网关是转发其他服务器通信数据的服务器，接受到从客户端发送来的请求时，它就像自己拥有服务器一样对资源进行处理，又是客户端都不会察觉，自己的通信目标是一个网关</p>\n</blockquote>\n<p>网关的工作机制和代理十分相似，而网关能使通信线路上的服务提供非 HTTP 协议服务</p>\n<blockquote>\n<p>隧道是在相隔甚远的客户端和服务端两者之间进行中转，并保持双方通信连接的应用程序</p>\n</blockquote>\n<p>隧道可按要求建立起一条与其他服务器的通信线路，届时使用 ssl 等加密手段进行通信，隧道的目的是确保客户端和服务端能进行安全通信</p>\n<h4 id=\"保存资源的缓存\"><a href=\"#保存资源的缓存\" class=\"headerlink\" title=\"保存资源的缓存\"></a>保存资源的缓存</h4><blockquote>\n<p>缓存是指代理服务器或客户端本地磁盘内保存的资源副本，当然缓存服务器是代理服务器的一种，归类在缓存代理类型中</p>\n</blockquote>\n<p>缓存是有有效期的</p>\n<h3 id=\"HTTP-首部\"><a href=\"#HTTP-首部\" class=\"headerlink\" title=\"HTTP 首部\"></a>HTTP 首部</h3><p>HTTP 首部字段一览</p>\n<ul>\n<li>通用首部字段</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>首部字段名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Cache-Control</td>\n<td>控制缓存的行为</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>逐跳首部、连接的管理</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>创建报文的日期时间</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>报文指令</td>\n</tr>\n<tr>\n<td>Trailer</td>\n<td>报文末端的首部一览</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>指定报文主体的传输编码方式</td>\n</tr>\n<tr>\n<td>Upgrade</td>\n<td>升级为其他协议</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>代理服务器的相关信息</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>错误通知</td>\n</tr>\n</tbody></table>\n<ul>\n<li>请求首部字段</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>首部字段名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept</td>\n<td>用户代理可处理的媒体类型</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>优先的字符集</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>优先的内容编码</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>优先的语言</td>\n</tr>\n<tr>\n<td>Authorization</td>\n<td>WEB 认证信息</td>\n</tr>\n<tr>\n<td>Expect</td>\n<td>期待服务器的特定行为</td>\n</tr>\n<tr>\n<td>From</td>\n<td>用户的电子邮箱地址</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>请求资源所在的服务器</td>\n</tr>\n<tr>\n<td>If-Match</td>\n<td>比较实体标记（ETag）</td>\n</tr>\n<tr>\n<td>If-Modify-Since</td>\n<td>比较资源的更新时间</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>比较实体标记，与 If-Match 相反</td>\n</tr>\n<tr>\n<td>If-Range</td>\n<td>资源未更新时发送实体 Byte 的范围请求</td>\n</tr>\n<tr>\n<td>If-Unmodified-Since</td>\n<td>比较资源的更新时间，与 if-modify-since 相反</td>\n</tr>\n<tr>\n<td>Max-forwards</td>\n<td>最大传输逐跳数</td>\n</tr>\n<tr>\n<td>Proxy-Authorization</td>\n<td>代理服务器要求客户端的认证信息</td>\n</tr>\n<tr>\n<td>Range</td>\n<td>实体的字节范围请求</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>对请求中 URI 的原始获取方</td>\n</tr>\n<tr>\n<td>TE</td>\n<td>传输编码的优先级</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>HTTP 客户端程序的信息</td>\n</tr>\n</tbody></table>\n<ul>\n<li>响应首部字段</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>首部字段名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept—Ranges</td>\n<td>是否接受字节范围请求</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>推算资源创建经过的时间</td>\n</tr>\n<tr>\n<td>Etag</td>\n<td>资源的匹配信息</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>令客户端重定向至指定的 URI</td>\n</tr>\n<tr>\n<td>Proxy-Authenticate</td>\n<td>代理服务器对客户端的认证信息</td>\n</tr>\n<tr>\n<td>Retry-After</td>\n<td>对再次发送请求的时机要求</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>HTTP 服务器的安装信息</td>\n</tr>\n<tr>\n<td>Vary</td>\n<td>代理服务器缓存的管理信息</td>\n</tr>\n<tr>\n<td>WWW-authenticate</td>\n<td>服务器对客户端的认证信息</td>\n</tr>\n</tbody></table>\n<ul>\n<li>实体首部字段</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>首部字段名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Allow</td>\n<td>资源可支持的 HTTP 方法</td>\n</tr>\n<tr>\n<td>Content-Encoding</td>\n<td>实体主体适用的编码方式</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>实体主体的自然语言</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>实体主体的大小</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>替代对应资源的 URI</td>\n</tr>\n<tr>\n<td>Content-MD5</td>\n<td>实体主体的报文摘要</td>\n</tr>\n<tr>\n<td>Content-Range</td>\n<td>实体主体的位置范围</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>实体主体的媒体类型</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>实体主体过期的日期时间</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>资源的最后修改日期时间</td>\n</tr>\n</tbody></table>\n<h3 id=\"hTTPS\"><a href=\"#hTTPS\" class=\"headerlink\" title=\"hTTPS\"></a>hTTPS</h3><p>HTTP 的缺点</p>\n<ol>\n<li>通信中使用明文，内容可能被窃听</li>\n<li>不验证通信方的身份，因此有可能遭遇伪装</li>\n<li>无法证明报文的完整性，所以有可能已经遭到篡改</li>\n</ol>\n<h5 id=\"通信使用明文可能会被窃听\"><a href=\"#通信使用明文可能会被窃听\" class=\"headerlink\" title=\"通信使用明文可能会被窃听\"></a>通信使用明文可能会被窃听</h5><ol>\n<li>通信的加密</li>\n<li>内容的加密</li>\n</ol>\n<h5 id=\"不验证通信方的身份就可能遭遇伪装\"><a href=\"#不验证通信方的身份就可能遭遇伪装\" class=\"headerlink\" title=\"不验证通信方的身份就可能遭遇伪装\"></a>不验证通信方的身份就可能遭遇伪装</h5><h5 id=\"无法证明报文的完整性，可能已遭篡改\"><a href=\"#无法证明报文的完整性，可能已遭篡改\" class=\"headerlink\" title=\"无法证明报文的完整性，可能已遭篡改\"></a>无法证明报文的完整性，可能已遭篡改</h5><p>HTTP + 加密 + 认证 + 完整性保护 = HTTPS</p>\n<ol>\n<li>http 加上加密处理和认证以及完整性保护后就是 https</li>\n<li>https 是身披 ssl 外壳的 http</li>\n<li>相互交换缪安平的公开密钥加密技术</li>\n<li>证明公开密钥正确性的证书</li>\n<li>HTTPS 的安全通行机制</li>\n</ol>\n<h3 id=\"确认访问用户身份的认证\"><a href=\"#确认访问用户身份的认证\" class=\"headerlink\" title=\"确认访问用户身份的认证\"></a>确认访问用户身份的认证</h3><ol>\n<li>认证</li>\n<li>BASIC 认证</li>\n<li>DIGEST 认证</li>\n<li>SSL 客户端认证</li>\n<li>基于表单认证<br>认证多半为基于表单认证<br>Session 管理及 Cookie 应用</li>\n</ol>\n<h3 id=\"基于-HTTP-的功能追加协议\"><a href=\"#基于-HTTP-的功能追加协议\" class=\"headerlink\" title=\"基于 HTTP 的功能追加协议\"></a>基于 HTTP 的功能追加协议</h3><ol>\n<li>SPDY</li>\n<li>WebSocket</li>\n<li>推送功能</li>\n<li>减少通信量</li>\n<li>HTTP2.0</li>\n<li>WebDAV</li>\n</ol>\n<h3 id=\"构建-WEB-内容的技术\"><a href=\"#构建-WEB-内容的技术\" class=\"headerlink\" title=\"构建 WEB 内容的技术\"></a>构建 WEB 内容的技术</h3><ol>\n<li>HTML</li>\n<li>动态 HTML</li>\n<li>Web 应用</li>\n<li>数据发布的格式及语言</li>\n</ol>\n<h3 id=\"web-的攻击技术\"><a href=\"#web-的攻击技术\" class=\"headerlink\" title=\"web 的攻击技术\"></a>web 的攻击技术</h3><h4 id=\"针对-Web-的攻击技术\"><a href=\"#针对-Web-的攻击技术\" class=\"headerlink\" title=\"针对 Web 的攻击技术\"></a>针对 Web 的攻击技术</h4><ol>\n<li>HTTP 不具备必要的安全功能</li>\n<li>在客户端即可篡改请求</li>\n<li>针对 web 应用的攻击模式</li>\n<li>以服务器为主的主动攻击</li>\n<li>以服务器为主的被动攻击</li>\n</ol>\n<h4 id=\"因输出值转义不完全引发的安全漏洞\"><a href=\"#因输出值转义不完全引发的安全漏洞\" class=\"headerlink\" title=\"因输出值转义不完全引发的安全漏洞\"></a>因输出值转义不完全引发的安全漏洞</h4><h5 id=\"跨站脚本攻击\"><a href=\"#跨站脚本攻击\" class=\"headerlink\" title=\"跨站脚本攻击\"></a>跨站脚本攻击</h5><p>是指通过存在安全漏洞的 web 网站注册用户的浏览器内运行非法的 html 或者 js 进行的一种攻击</p>\n<p>可能造成以下影响</p>\n<ol>\n<li>利用虚假输入表单骗取用户个人信息</li>\n<li>用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求</li>\n<li>显示伪造的文章或图片</li>\n</ol>\n<p>XSS 是攻击者利用预先设置的陷阱触发的被动攻击</p>\n<h5 id=\"sql-注入攻击\"><a href=\"#sql-注入攻击\" class=\"headerlink\" title=\"sql 注入攻击\"></a>sql 注入攻击</h5><p>sql injection 是指针对 web 应用使用的数据库，通过运行非法的 sql 而产生的攻击</p>\n<h5 id=\"OS-命令注入攻击\"><a href=\"#OS-命令注入攻击\" class=\"headerlink\" title=\"OS 命令注入攻击\"></a>OS 命令注入攻击</h5><p>OS Command Injection 是指通过 web 应用，执行非法的操作系统命令达到攻击的目的，只要在能调用 shell 函数的地方就存在被攻击的风险</p>\n<h5 id=\"HTTP-首部注入攻击\"><a href=\"#HTTP-首部注入攻击\" class=\"headerlink\" title=\"HTTP 首部注入攻击\"></a>HTTP 首部注入攻击</h5><p>HTTP Header Injection 是指攻击者通过在响应首部字段内插入换行，添加任意响应首部或主体的一种攻击，属于被动攻击模式</p>\n<h5 id=\"邮件首部注入攻击\"><a href=\"#邮件首部注入攻击\" class=\"headerlink\" title=\"邮件首部注入攻击\"></a>邮件首部注入攻击</h5><h5 id=\"目录遍历攻击\"><a href=\"#目录遍历攻击\" class=\"headerlink\" title=\"目录遍历攻击\"></a>目录遍历攻击</h5><h5 id=\"远程文件包含漏洞\"><a href=\"#远程文件包含漏洞\" class=\"headerlink\" title=\"远程文件包含漏洞\"></a>远程文件包含漏洞</h5><h4 id=\"因设置或者设计上的缺陷引发的安全漏洞\"><a href=\"#因设置或者设计上的缺陷引发的安全漏洞\" class=\"headerlink\" title=\"因设置或者设计上的缺陷引发的安全漏洞\"></a>因设置或者设计上的缺陷引发的安全漏洞</h4><ol>\n<li>强制浏览</li>\n<li>不正确的错误消息处理</li>\n<li>开放重定向</li>\n</ol>\n<h4 id=\"因会话管理疏忽引发的安全漏洞\"><a href=\"#因会话管理疏忽引发的安全漏洞\" class=\"headerlink\" title=\"因会话管理疏忽引发的安全漏洞\"></a>因会话管理疏忽引发的安全漏洞</h4><h5 id=\"会话劫持-和-会话固定劫持-都是拿到-sessionID-伪装成用户进行攻击\"><a href=\"#会话劫持-和-会话固定劫持-都是拿到-sessionID-伪装成用户进行攻击\" class=\"headerlink\" title=\"会话劫持 和 会话固定劫持 都是拿到 sessionID 伪装成用户进行攻击\"></a>会话劫持 和 会话固定劫持 都是拿到 sessionID 伪装成用户进行攻击</h5><h5 id=\"跨站点请求伪造\"><a href=\"#跨站点请求伪造\" class=\"headerlink\" title=\"跨站点请求伪造\"></a>跨站点请求伪造</h5><p>Cross Site Request Forgeries CSRF 攻击是指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。<br>可能会造成以下影响</p>\n<ol>\n<li>利用已通过认证的用户权限更新设定信息</li>\n<li>利用已通过认证的用户权限购买商品</li>\n<li>利用已通过认证的用户权限在留言板上发表言论</li>\n</ol>\n<h4 id=\"其他安全漏洞\"><a href=\"#其他安全漏洞\" class=\"headerlink\" title=\"其他安全漏洞\"></a>其他安全漏洞</h4><ol>\n<li>密码破解</li>\n<li>点击劫持</li>\n<li>Dos 攻击</li>\n<li>后门程序</li>\n</ol>\n","categories":["读书笔记"],"tags":["HTTP"]},{"title":"vue-router 源码阅读笔记","url":"/blog-next/2020/09/02/vue-router%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/","content":"<h1 id=\"Vue-Router\"><a href=\"#Vue-Router\" class=\"headerlink\" title=\"Vue Router\"></a>Vue Router</h1><p>使用 <code>Vue.js + Vue Router</code> 创建单页只需要将组件 <code>components</code> 映射到路由 <code>routes</code>，然后告诉 <code>Vue Router</code> 在哪里渲染它们</p>\n<a id=\"more\"></a>\n\n<h2 id=\"路由注册\"><a href=\"#路由注册\" class=\"headerlink\" title=\"路由注册\"></a>路由注册</h2><p>Vue 主要是解决视图渲染的问题，其他的能力是通过插件的方式解决</p>\n<h3 id=\"Vue-use\"><a href=\"#Vue-use\" class=\"headerlink\" title=\"Vue.use\"></a><code>Vue.use</code></h3><p>Vue 提供了 use 的全局 API 来注册这些插件，定义在 <code>vue/src/core/global-api/use.js</code> 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initUse</span>(<span class=\"params\">Vue: GlobalAPI</span>) </span>&#123;</span><br><span class=\"line\">  Vue.use = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">plugin: <span class=\"built_in\">Function</span> | <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> installedPlugins = <span class=\"built_in\">this</span>._installedPlugins || (<span class=\"built_in\">this</span>._installedPlugins = [])</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (installedPlugins.indexOf(plugin) &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = toArray(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    args.unshift(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin.install === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      plugin.install.apply(plugin, args)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      plugin.apply(<span class=\"literal\">null</span>, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    installedPlugins.push(plugin)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Vue.use</code> 接受一个 <code>plugin</code> 参数，并且维护了一个 <code>_installPlugins</code> 数组，并存储所有注册过的 <code>plugins</code>,<br>接着判断 <code>install</code> 方法有没有定义，有则调用，注意第一个参数 <code>Vue</code>，最后把 plugin 存储在 <code>_installPlugins</code> 中</p>\n<h3 id=\"路由安装\"><a href=\"#路由安装\" class=\"headerlink\" title=\"路由安装\"></a>路由安装</h3><p>Vue-Router 的入口文件是 <code>src/index.js</code>，其中定义了 <code>VueRouter</code> 类，挂载了 <code>install</code> 方法 <code>VueRouter.install = install</code></p>\n<p>当我们执行 <code>Vue.use(VueRouter)</code> 的时候，就是执行了 <code>install</code> 方法，其中最重要的就是 通过 <code>Vue.mixin</code> 方法把 <code>beforeCreate</code> 和 <code>destroyed</code> 钩子注入到每一个组件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initMixin</span>(<span class=\"params\">Vue: GlobalAPI</span>) </span>&#123;</span><br><span class=\"line\">  Vue.mixin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mixin: <span class=\"built_in\">Object</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.options = mergeOptions(<span class=\"built_in\">this</span>.options, mixin)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它其实就是把定义的对象混入了 <code>Vue.options</code> 中，因为我们在组件创建阶段会执行 <code>extend</code> 把 <code>Vue.options</code> merge 到自身的 <code>options</code> 中，所以相当于每个组件都混入了这两个钩子</p>\n<p>我们再看 <code>install</code> 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">install</span>(<span class=\"params\">Vue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (install.installed &amp;&amp; _Vue === Vue) <span class=\"keyword\">return</span></span><br><span class=\"line\">  install.installed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _Vue = Vue</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isDef = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v !== <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> registerInstance = <span class=\"function\">(<span class=\"params\">vm, callVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = vm.$options._parentVnode</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDef(i) &amp;&amp; isDef((i = i.data)) &amp;&amp; isDef((i = i.registerRouteInstance))) &#123;</span><br><span class=\"line\">      i(vm, callVal)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Vue.mixin(&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">beforeCreate</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDef(<span class=\"built_in\">this</span>.$options.router)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>._routerRoot = <span class=\"built_in\">this</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>._router = <span class=\"built_in\">this</span>.$options.router</span><br><span class=\"line\">        <span class=\"built_in\">this</span>._router.init(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">        Vue.util.defineReactive(<span class=\"built_in\">this</span>, <span class=\"string\">&#x27;_route&#x27;</span>, <span class=\"built_in\">this</span>._router.history.current)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>._routerRoot = (<span class=\"built_in\">this</span>.$parent &amp;&amp; <span class=\"built_in\">this</span>.$parent._routerRoot) || <span class=\"built_in\">this</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      registerInstance(<span class=\"built_in\">this</span>, <span class=\"built_in\">this</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">destroyed</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      registerInstance(<span class=\"built_in\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(Vue.prototype, <span class=\"string\">&#x27;$router&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._routerRoot._router</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(Vue.prototype, <span class=\"string\">&#x27;$route&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>._routerRoot._route</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  Vue.component(<span class=\"string\">&#x27;RouterView&#x27;</span>, View)</span><br><span class=\"line\">  Vue.component(<span class=\"string\">&#x27;RouterLink&#x27;</span>, Link)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> strats = Vue.config.optionMergeStrategies</span><br><span class=\"line\">  <span class=\"comment\">// use the same hook merging strategy for route hooks</span></span><br><span class=\"line\">  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>混入的 <code>beforeCreate</code> 钩子，对于根 Vue 实例而言，执行该钩子 <code>this._routerRoot</code> 就是自身，<code>this._router</code> 表示 <code>router</code> 实例，然后执行 <code>this._router.init()</code> 初始化 <code>router</code>,<br>接着用 <code>defineReactive</code> 把 <code>this._router</code> 变成响应式对象<br>对于子组件的 <code>_routerRoot</code> 始终指向的离它最近的传入了 <code>router</code> 对象作为配置而实例化的父实例。</p>\n<p><code>beforeCreate</code> 和 <code>destroyed</code> 钩子都会执行 vnode 定义的 <code>registerInstance</code></p>\n<p>接着在实例原型上定义了 <code>$router</code> 和 <code>$route</code> 2 个属性的 get 方法，我们可以 <code>this.$router</code> 以及 <code>this.$route</code> 去访问 router</p>\n<p>接着通过 <code>Vue.component</code> 方法定义了全局的 <code>router-view</code> 和 <code>router-link</code> 组件</p>\n<p>最后定义了 <code>Vue Router</code> 钩子函数用 Vue 的 <code>created</code> 的钩子合并策略</p>\n<h2 id=\"VueRouter-对象\"><a href=\"#VueRouter-对象\" class=\"headerlink\" title=\"VueRouter 对象\"></a>VueRouter 对象</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VueRouter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> install: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> version: string</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">app</span>: any</span><br><span class=\"line\">  <span class=\"attr\">apps</span>: <span class=\"built_in\">Array</span>&lt;any&gt;</span><br><span class=\"line\">  ready: boolean</span><br><span class=\"line\">  <span class=\"attr\">readyCbs</span>: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">Function</span>&gt;</span><br><span class=\"line\">  options: RouterOptions</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: string</span><br><span class=\"line\">  <span class=\"attr\">history</span>: HashHistory | HTML5History | AbstractHistory</span><br><span class=\"line\">  <span class=\"attr\">matcher</span>: Matcher</span><br><span class=\"line\">  <span class=\"attr\">fallback</span>: boolean</span><br><span class=\"line\">  <span class=\"attr\">beforeHooks</span>: <span class=\"built_in\">Array</span>&lt;?NavigationGuard&gt;</span><br><span class=\"line\">  resolveHooks: <span class=\"built_in\">Array</span>&lt;?NavigationGuard&gt;</span><br><span class=\"line\">  afterHooks: <span class=\"built_in\">Array</span>&lt;?AfterNavigationHook&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">options: RouterOptions = &#123;&#125;</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.app = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.apps = []</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.options = options</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.beforeHooks = []</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.resolveHooks = []</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.afterHooks = []</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.matcher = createMatcher(options.routes || [], <span class=\"built_in\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> mode = options.mode || <span class=\"string\">&#x27;hash&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.fallback = mode === <span class=\"string\">&#x27;history&#x27;</span> &amp;&amp; !supportsPushState &amp;&amp; options.fallback !== <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.fallback) &#123;</span><br><span class=\"line\">      mode = <span class=\"string\">&#x27;hash&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!inBrowser) &#123;</span><br><span class=\"line\">      mode = <span class=\"string\">&#x27;abstract&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.mode = mode</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (mode) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;history&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.history = <span class=\"keyword\">new</span> HTML5History(<span class=\"built_in\">this</span>, options.base)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;hash&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.history = <span class=\"keyword\">new</span> HashHistory(<span class=\"built_in\">this</span>, options.base, <span class=\"built_in\">this</span>.fallback)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;abstract&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.history = <span class=\"keyword\">new</span> AbstractHistory(<span class=\"built_in\">this</span>, options.base)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"attr\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">          assert(<span class=\"literal\">false</span>, <span class=\"string\">`invalid mode: <span class=\"subst\">$&#123;mode&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  match(raw: RawLocation, current?: Route, redirectedFrom?: Location): Route &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.matcher.match(raw, current, redirectedFrom)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title\">currentRoute</span>(): ?<span class=\"title\">Route</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.history &amp;&amp; <span class=\"built_in\">this</span>.history.current</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\">app: any</span>)</span> &#123;</span><br><span class=\"line\">    process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; assert(install.installed, <span class=\"string\">`not installed. Make sure to call \\`Vue.use(VueRouter)\\` `</span> + <span class=\"string\">`before creating root instance.`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.apps.push(app)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.app) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.app = app</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"built_in\">this</span>.history</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (history <span class=\"keyword\">instanceof</span> HTML5History) &#123;</span><br><span class=\"line\">      history.transitionTo(history.getCurrentLocation())</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (history <span class=\"keyword\">instanceof</span> HashHistory) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> setupHashListener = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        history.setupListeners()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      history.transitionTo(history.getCurrentLocation(), setupHashListener, setupHashListener)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    history.listen(<span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.apps.forEach(<span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</span><br><span class=\"line\">        app._route = route</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  beforeEach(fn: <span class=\"built_in\">Function</span>): <span class=\"built_in\">Function</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registerHook(<span class=\"built_in\">this</span>.beforeHooks, fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  beforeResolve(fn: <span class=\"built_in\">Function</span>): <span class=\"built_in\">Function</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registerHook(<span class=\"built_in\">this</span>.resolveHooks, fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  afterEach(fn: <span class=\"built_in\">Function</span>): <span class=\"built_in\">Function</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registerHook(<span class=\"built_in\">this</span>.afterHooks, fn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">onReady</span>(<span class=\"params\">cb: <span class=\"built_in\">Function</span>, errorCb?: <span class=\"built_in\">Function</span></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.history.onReady(cb, errorCb)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">onError</span>(<span class=\"params\">errorCb: <span class=\"built_in\">Function</span></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.history.onError(errorCb)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">push</span>(<span class=\"params\">location: RawLocation, onComplete?: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.history.push(location, onComplete, onAbort)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">replace</span>(<span class=\"params\">location: RawLocation, onComplete?: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.history.replace(location, onComplete, onAbort)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">go</span>(<span class=\"params\">n: number</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.history.go(n)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">back</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.go(-<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">forward</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.go(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getMatchedComponents(to?: RawLocation | Route): <span class=\"built_in\">Array</span>&lt;any&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> route: any = to ? (to.matched ? to : <span class=\"built_in\">this</span>.resolve(to).route) : <span class=\"built_in\">this</span>.currentRoute</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!route) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [].concat.apply(</span><br><span class=\"line\">      [],</span><br><span class=\"line\">      route.matched.map(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(m.components).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> m.components[key]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  resolve(</span><br><span class=\"line\">    to: RawLocation,</span><br><span class=\"line\">    current?: Route,</span><br><span class=\"line\">    append?: boolean</span><br><span class=\"line\">  ): &#123;</span><br><span class=\"line\">    <span class=\"attr\">location</span>: Location,</span><br><span class=\"line\">    <span class=\"attr\">route</span>: Route,</span><br><span class=\"line\">    <span class=\"attr\">href</span>: string,</span><br><span class=\"line\">    <span class=\"attr\">normalizedTo</span>: Location,</span><br><span class=\"line\">    <span class=\"attr\">resolved</span>: Route</span><br><span class=\"line\">  &#125; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> location = normalizeLocation(to, current || <span class=\"built_in\">this</span>.history.current, append, <span class=\"built_in\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> route = <span class=\"built_in\">this</span>.match(location, current)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fullPath = route.redirectedFrom || route.fullPath</span><br><span class=\"line\">    <span class=\"keyword\">const</span> base = <span class=\"built_in\">this</span>.history.base</span><br><span class=\"line\">    <span class=\"keyword\">const</span> href = createHref(base, fullPath, <span class=\"built_in\">this</span>.mode)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      location,</span><br><span class=\"line\">      route,</span><br><span class=\"line\">      href,</span><br><span class=\"line\">      <span class=\"attr\">normalizedTo</span>: location,</span><br><span class=\"line\">      <span class=\"attr\">resolved</span>: route</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">addRoutes</span>(<span class=\"params\">routes: <span class=\"built_in\">Array</span>&lt;RouteConfig&gt;</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.matcher.addRoutes(routes)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.history.current !== START) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.history.transitionTo(<span class=\"built_in\">this</span>.history.getCurrentLocation())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>VueRouter 是一个类，先看构造函数做了那些事情，<code>this.app</code> 表示根 Vue 实例，<code>this.apps</code> 保存持有 <code>$options.router</code> 属性的 Vue 实例，<code>this.options</code> 保存路由配置，<code>beforeHooks,resolveHooks,afterHooks</code> 表示一些钩子，<code>this.matcher</code> 表示路由匹配器，<code>this.fallback</code>表示浏览器不支持回退到 <code>hash</code>模式，<code>this.mode</code>表示创建的模式，<code>this.history</code> 表示路由历史的具体的实现实例，不同的 <code>HTML5History,HashHistory,AbstractHistory</code> 类继承自 <code>History</code> 类</p>\n<p>我们在实例化 <code>Vue</code> 的时候传入 <code>VueRouter</code> 的实例 <code>router</code>，组件初始化时在混入的 <code>beforeCreate</code> 钩子中，如果定义了 <code>this.$options.router</code> 就会执行 <code>this._router.init(this)</code></p>\n<p>init 方法会把 this（vue 实例）存储在 <code>this.app</code> 中，只有根实例会存在 <code>this.app</code> 中，并且会拿当前的 <code>this.history</code> 执行 <code>history.transitionTo</code> 方法来做路由过渡</p>\n<h2 id=\"Matcher\"><a href=\"#Matcher\" class=\"headerlink\" title=\"Matcher\"></a>Matcher</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> type Matcher = &#123;</span><br><span class=\"line\">  <span class=\"attr\">match</span>: <span class=\"function\">(<span class=\"params\">raw: RawLocation, current?: Route, redirectedFrom?: Location</span>) =&gt;</span> Route,</span><br><span class=\"line\">  <span class=\"attr\">addRoutes</span>: <span class=\"function\">(<span class=\"params\">routes: <span class=\"built_in\">Array</span>&lt;RouteConfig&gt;</span>) =&gt;</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中涉及到了两个概念，<code>Location</code> 和 <code>Route</code>，可以发现 <code>Location</code> 基本和 <code>window.location</code> 是同样的意思，都是对 url 的结构化描述，<code>Route</code> 有了 <code>fullPath matched redirectedFrom meta</code> 等特有属性，他是路由中的一条线路</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">declare type Location = &#123;</span><br><span class=\"line\">  _normalized?: boolean,</span><br><span class=\"line\">  name?: string,</span><br><span class=\"line\">  path?: string,</span><br><span class=\"line\">  hash?: string,</span><br><span class=\"line\">  query?: Dictionary&lt;string&gt;,</span><br><span class=\"line\">  params?: Dictionary&lt;string&gt;,</span><br><span class=\"line\">  append?: boolean,</span><br><span class=\"line\">  replace?: boolean</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">declare type Route = &#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: ?string,</span><br><span class=\"line\">  <span class=\"attr\">hash</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">query</span>: Dictionary&lt;string&gt;,</span><br><span class=\"line\">  params: Dictionary&lt;string&gt;,</span><br><span class=\"line\">  fullPath: string,</span><br><span class=\"line\">  <span class=\"attr\">matched</span>: <span class=\"built_in\">Array</span>&lt;RouteRecord&gt;,</span><br><span class=\"line\">  redirectedFrom?: string,</span><br><span class=\"line\">  meta?: any</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>this.matcher</code> 就是在 <code>VueRouter</code> 实例化通过 <code>createMatcher</code> 创建的, <code>createMathcer</code> 接受两个参数，一个是 <code>routes</code>，一个是 <code>router</code> 实例</p>\n<p>createMatcher 首先执行<code>const &#123; pathList, pathMap, nameMap &#125; = createRouteMap(routes)</code> 创建路由映射表</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRouteMap</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  routes: <span class=\"built_in\">Array</span>&lt;RouteConfig&gt;,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  oldPathList?: <span class=\"built_in\">Array</span>&lt;string&gt;,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  oldPathMap?: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  oldNameMap?: Dictionary&lt;RouteRecord&gt;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>): </span>&#123;</span><br><span class=\"line\">  <span class=\"attr\">pathList</span>: <span class=\"built_in\">Array</span>&lt;string&gt;,</span><br><span class=\"line\">  pathMap: Dictionary&lt;RouteRecord&gt;,</span><br><span class=\"line\">  nameMap: Dictionary&lt;RouteRecord&gt;</span><br><span class=\"line\">&#125; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// the path list is used to control path matching priority</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> pathList: <span class=\"built_in\">Array</span>&lt;string&gt; = oldPathList || []</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> pathMap: Dictionary&lt;RouteRecord&gt; = oldPathMap || <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> nameMap: Dictionary&lt;RouteRecord&gt; = oldNameMap || <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  routes.forEach(<span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">    addRouteRecord(pathList, pathMap, nameMap, route)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ensure wildcard routes are always at the end</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = pathList.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pathList[i] === <span class=\"string\">&#x27;*&#x27;</span>) &#123;</span><br><span class=\"line\">      pathList.push(pathList.splice(i, <span class=\"number\">1</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\">      l--</span><br><span class=\"line\">      i--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    pathList,</span><br><span class=\"line\">    pathMap,</span><br><span class=\"line\">    nameMap</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>createRouteMap</code> 把路由映射表分成三部分，<code>pathList</code> 存储所有的 <code>path</code>，<code>pathMap</code> 表示 <code>path</code> 到 <code>routeRecord</code> 的映射关系，<code>nameMap</code> 表示 <code>name</code> 到 <code>routeRecord</code> 的映射关系</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">declare type RouteRecord = &#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">regex</span>: RouteRegExp,</span><br><span class=\"line\">  <span class=\"attr\">components</span>: Dictionary&lt;any&gt;,</span><br><span class=\"line\">  instances: Dictionary&lt;any&gt;,</span><br><span class=\"line\">  name: ?string,</span><br><span class=\"line\">  <span class=\"attr\">parent</span>: ?RouteRecord,</span><br><span class=\"line\">  <span class=\"attr\">redirect</span>: ?RedirectOption,</span><br><span class=\"line\">  <span class=\"attr\">matchAs</span>: ?string,</span><br><span class=\"line\">  <span class=\"attr\">beforeEnter</span>: ?NavigationGuard,</span><br><span class=\"line\">  <span class=\"attr\">meta</span>: any,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: boolean | <span class=\"built_in\">Object</span> | <span class=\"built_in\">Function</span> | Dictionary&lt;boolean | <span class=\"built_in\">Object</span> | <span class=\"built_in\">Function</span>&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>routeRecord</code> 就是 <code>addRouteRecord</code> 执行生成的，它遍历 <code>routes</code> 为每一个 <code>route</code> 执行 <code>addRouteRecord</code> 生成一条记录，然后用 <code>pathList</code> <code>pathMap</code> <code>nameMap</code> 管理起来<br>创建的 routeRecord 如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> record: RouteRecord = &#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: normalizedPath, <span class=\"comment\">// cleanPath(`$&#123;parent.path&#125;/$&#123;path&#125;`)</span></span><br><span class=\"line\">  <span class=\"attr\">regex</span>: compileRouteRegex(normalizedPath, pathToRegexpOptions),</span><br><span class=\"line\">  <span class=\"attr\">components</span>: route.components || &#123; <span class=\"attr\">default</span>: route.component &#125;,</span><br><span class=\"line\">  <span class=\"attr\">instances</span>: &#123;&#125;,</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  parent,</span><br><span class=\"line\">  matchAs,</span><br><span class=\"line\">  <span class=\"attr\">redirect</span>: route.redirect,</span><br><span class=\"line\">  <span class=\"attr\">beforeEnter</span>: route.beforeEnter,</span><br><span class=\"line\">  <span class=\"attr\">meta</span>: route.meta || &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: route.props == <span class=\"literal\">null</span> ? &#123;&#125; : route.components ? route.props : &#123; <span class=\"attr\">default</span>: route.props &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>path</code> 是规范化后的路径，<code>regex</code> 是一个正则的扩展 解析<code>url</code>，<code>components</code> 对应 <code>&#123;default: route.component&#125;</code>，instances 是组件实例，<code>parent</code> 是父的 <code>routeRecord</code>，因为我们一般也会配置子路由，所以 <code>RouteRecord</code> 也是一个树形结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (route.children) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  route.children.forEach(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> childMatchAs = matchAs ? cleanPath(<span class=\"string\">`<span class=\"subst\">$&#123;matchAs&#125;</span>/<span class=\"subst\">$&#123;child.path&#125;</span>`</span>) : <span class=\"literal\">undefined</span></span><br><span class=\"line\">    addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>递归执行 <code>addRouteRecord</code> 的时候把当前 <code>child</code> 作为 <code>parent</code> 参数传入，这样深度遍历，我们就能拿到 <code>route</code> 的全部记录</p>\n<p>因为 <code>pathList</code> <code>pathMap</code> <code>nameMap</code> 都是引用类型，所以我们会把所有的数据都统计到，经过 <code>createRouteMap</code> 的执行，我们会得到 <code>pathList pathMap nameMap</code>，有所有的<code>path</code>，以及对应的 <code>routeRecord</code></p>\n<p>回到 <code>createMatcher</code>，创建完路由映射表之后，定义一些方法，最后返回 <code>&#123; match, addRoutes &#125;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addRoutes</span>(<span class=\"params\">routes</span>) </span>&#123;</span><br><span class=\"line\">  createRouteMap(routes, pathList, pathMap, nameMap)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>addRoutes</code> 方法的作用就是动态添加路由，调用 <code>createRouteMap</code> 传入新的 <code>routes</code></p>\n<p><code>match</code> 函数接受 3 个参数，<code>raw</code> 是 <code>rawLocation</code> 类型，它可以是一个 <code>url</code> 字符串，也可以是一个 <code>Location</code> 对象，<code>currentRoute</code> 是 <code>route</code> 类型，表示当前的路径，<code>redirectFrom</code> 和重定向相关，<br><code>match</code> 方法就是接受一个 <code>raw</code> 和当前的 <code>currentRoute</code> 计算出一个新的路径并返回</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span>(<span class=\"params\">raw: RawLocation, currentRoute?: Route, redirectedFrom?: Location</span>): <span class=\"title\">Route</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> location = normalizeLocation(raw, currentRoute, <span class=\"literal\">false</span>, router)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; name &#125; = location</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> record = nameMap[name]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      warn(record, <span class=\"string\">`Route with name &#x27;<span class=\"subst\">$&#123;name&#125;</span>&#x27; does not exist`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record) <span class=\"keyword\">return</span> _createRoute(<span class=\"literal\">null</span>, location)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> paramNames = record.regex.keys.filter(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> !key.optional).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> key.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> location.params !== <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">      location.params = &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentRoute &amp;&amp; <span class=\"keyword\">typeof</span> currentRoute.params === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> currentRoute.params) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> location.params) &amp;&amp; paramNames.indexOf(key) &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          location.params[key] = currentRoute.params[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (record) &#123;</span><br><span class=\"line\">      location.path = fillParams(record.path, location.params, <span class=\"string\">`named route &quot;<span class=\"subst\">$&#123;name&#125;</span>&quot;`</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _createRoute(record, location, redirectedFrom)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (location.path) &#123;</span><br><span class=\"line\">    location.params = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; pathList.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> path = pathList[i]</span><br><span class=\"line\">      <span class=\"keyword\">const</span> record = pathMap[path]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (matchRoute(record.regex, location.path, location.params)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _createRoute(record, location, redirectedFrom)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _createRoute(<span class=\"literal\">null</span>, location)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先执行 <code>normalizeLocation</code> 方法，根据 <code>raw</code> <code>current</code> 计算出新的 <code>location</code>，他主要处理了两种情况，一种是有 <code>params</code> 且没有 <code>path</code>，一种是有 <code>path</code> 的，对于第一种情况，如果 <code>current</code> 有 <code>name</code>, 计算出的 <code>location</code> 也有 <code>name</code>。<code>normalizeLocation</code> 返回 <code>&#123;_normalized: true, path, query, hash&#125;</code></p>\n<p>计算出 <code>location</code> 后，对 <code>location</code> 的 <code>name</code> 和 <code>path</code> 的两种情况做了处理<br>有 <code>name</code> 情况根据 <code>nameMap</code> 匹配到 <code>record</code>，它是一个 <code>RouteRecord</code> 对象，如果 <code>record</code> 不存在，则匹配失败，返回一个空路径。然后拿到 <code>record</code> 对应的 <code>paramNames</code>，再对比 <code>currentRoute</code> 中的 <code>params</code>，把交集部分添加到 <code>location</code> 中，然后再通过 <code>fillParams</code> 方法根据 <code>record.path</code> 计算出 <code>location.path</code>，最后调用 <code>_createRoute(record, location, redirectedFrom)</code> 去生成一条新路径</p>\n<p>通过 <code>name</code> 我们可以很快找到 <code>record</code>，但是通过 <code>path</code> 并不能，因为我们计算后的 <code>location.path</code> 是一个真实路径，而 <code>record</code> 中的 <code>path</code> 可能会有 <code>param</code>，因此需要对所有的 <code>pathList</code> 做顺序遍历，然后通过 <code>matchRoute</code> 方法根据 <code>record.regex location.path location.params</code> 匹配，如果匹配到就通过 <code>_createRoute(record, location, redirectedFrom)</code> 去生成一条新路径。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_createRoute</span>(<span class=\"params\">record: ?RouteRecord, location: Location, redirectedFrom?: Location</span>): <span class=\"title\">Route</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (record &amp;&amp; record.redirect) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(record, redirectedFrom || location)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (record &amp;&amp; record.matchAs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> alias(record, location, record.matchAs)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> createRoute(record, location, redirectedFrom, router)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>createRoute</code> 可以根据 <code>record</code> 和 <code>location</code> 创建出一条 <code>route</code> 路径，<code>vue-router</code> 中所有的路径都是通过 <code>createRoute</code> 函数创建，并且是 <code>freeze</code> 不可被外部修改的，<code>Route</code> 最终都会有一个特别重要的属性 <code>matched</code>，它通过 <code>formatMatch</code> 计算而来</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatMatch</span>(<span class=\"params\">record: ?RouteRecord</span>): <span class=\"title\">Array</span>&lt;<span class=\"title\">RouteRecord</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (record) &#123;</span><br><span class=\"line\">    res.unshift(record)</span><br><span class=\"line\">    record = record.parent</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看它通过 <code>record</code> 循环向上找 <code>parent</code>，直到找到最外层，并把所有的 <code>record</code> 都 <code>push</code> 到一个数组中，最终返回的就是 <code>record</code> 数组，它记录了一条线路上的所有 <code>record</code>，<code>matched</code> 属性非常有用，它为之后渲染组件提供了依据</p>\n<h2 id=\"路径切换\"><a href=\"#路径切换\" class=\"headerlink\" title=\"路径切换\"></a>路径切换</h2><p>history.transitionTo 是 Vue-Router 中非常重要的方法，当我们切换路由线路的时候，就会执行该方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">transitionTo (location: RawLocation, onComplete?: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> route = <span class=\"built_in\">this</span>.router.match(location, <span class=\"built_in\">this</span>.current)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.confirmTransition(route, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.updateRoute(route)</span><br><span class=\"line\">    onComplete &amp;&amp; onComplete(route)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.ensureURL()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.ready) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.ready = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.readyCbs.forEach(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123; cb(route) &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (onAbort) &#123;</span><br><span class=\"line\">      onAbort(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err &amp;&amp; !<span class=\"built_in\">this</span>.ready) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.ready = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.readyErrorCbs.forEach(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123; cb(err) &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>transitionTo 首先根据目标 location 和当前路径 this.current 执行 this.router.match 方法去匹配到目标的路径，然后执行 confirmTransition 做真正的切换，<br>这个过程可能有一些异步的操作（异步操作），所以整个 cinfirmTransition API 设计成带有成功回调函数和失败回调函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">confirmTransition (route: Route, <span class=\"attr\">onComplete</span>: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> current = <span class=\"built_in\">this</span>.current</span><br><span class=\"line\">    <span class=\"keyword\">const</span> abort = <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// changed after adding errors with</span></span><br><span class=\"line\">      <span class=\"comment\">// https://github.com/vuejs/vue-router/pull/3047 before that change,</span></span><br><span class=\"line\">      <span class=\"comment\">// redirect and aborted navigation would produce an err == null</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isNavigationFailure(err) &amp;&amp; isError(err)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.errorCbs.length) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.errorCbs.forEach(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123;</span><br><span class=\"line\">            cb(err)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          warn(<span class=\"literal\">false</span>, <span class=\"string\">&#x27;uncaught error during route navigation:&#x27;</span>)</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.error(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      onAbort &amp;&amp; onAbort(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lastRouteIndex = route.matched.length - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> lastCurrentIndex = current.matched.length - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      isSameRoute(route, current) &amp;&amp;</span><br><span class=\"line\">      <span class=\"comment\">// in the case the route map has been dynamically appended to</span></span><br><span class=\"line\">      lastRouteIndex === lastCurrentIndex &amp;&amp;</span><br><span class=\"line\">      route.matched[lastRouteIndex] === current.matched[lastCurrentIndex]</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.ensureURL()</span><br><span class=\"line\">      <span class=\"keyword\">return</span> abort(createNavigationDuplicatedError(current, route))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; updated, deactivated, activated &#125; = resolveQueue(</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.current.matched,</span><br><span class=\"line\">      route.matched</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue: <span class=\"built_in\">Array</span>&lt;?NavigationGuard&gt; = [].concat(</span><br><span class=\"line\">      <span class=\"comment\">// in-component leave guards</span></span><br><span class=\"line\">      extractLeaveGuards(deactivated),</span><br><span class=\"line\">      <span class=\"comment\">// global before hooks</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.router.beforeHooks,</span><br><span class=\"line\">      <span class=\"comment\">// in-component update hooks</span></span><br><span class=\"line\">      extractUpdateHooks(updated),</span><br><span class=\"line\">      <span class=\"comment\">// in-config enter guards</span></span><br><span class=\"line\">      activated.map(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.beforeEnter),</span><br><span class=\"line\">      <span class=\"comment\">// async components</span></span><br><span class=\"line\">      resolveAsyncComponents(activated)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.pending = route</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iterator = <span class=\"function\">(<span class=\"params\">hook: NavigationGuard, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.pending !== route) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> abort(createNavigationCancelledError(current, route))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        hook(route, current, <span class=\"function\">(<span class=\"params\">to: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (to === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// next(false) -&gt; abort navigation, ensure current URL</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.ensureURL(<span class=\"literal\">true</span>)</span><br><span class=\"line\">            abort(createNavigationAbortedError(current, route))</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isError(to)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.ensureURL(<span class=\"literal\">true</span>)</span><br><span class=\"line\">            abort(to)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> to === <span class=\"string\">&#x27;string&#x27;</span> ||</span><br><span class=\"line\">            (<span class=\"keyword\">typeof</span> to === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp;</span><br><span class=\"line\">              (<span class=\"keyword\">typeof</span> to.path === <span class=\"string\">&#x27;string&#x27;</span> || <span class=\"keyword\">typeof</span> to.name === <span class=\"string\">&#x27;string&#x27;</span>))</span><br><span class=\"line\">          ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// next(&#x27;/&#x27;) or next(&#123; path: &#x27;/&#x27; &#125;) -&gt; redirect</span></span><br><span class=\"line\">            abort(createNavigationRedirectedError(current, route))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> to === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; to.replace) &#123;</span><br><span class=\"line\">              <span class=\"built_in\">this</span>.replace(to)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"built_in\">this</span>.push(to)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// confirm transition and pass on the value</span></span><br><span class=\"line\">            next(to)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        abort(e)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    runQueue(queue, iterator, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> postEnterCbs = []</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isValid = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">this</span>.current === route</span><br><span class=\"line\">      <span class=\"comment\">// wait until async components are resolved before</span></span><br><span class=\"line\">      <span class=\"comment\">// extracting in-component enter guards</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> enterGuards = extractEnterGuards(activated, postEnterCbs, isValid)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> queue = enterGuards.concat(<span class=\"built_in\">this</span>.router.resolveHooks)</span><br><span class=\"line\">      runQueue(queue, iterator, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.pending !== route) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> abort(createNavigationCancelledError(current, route))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pending = <span class=\"literal\">null</span></span><br><span class=\"line\">        onComplete(route)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.router.app) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.router.app.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            postEnterCbs.forEach(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123;</span><br><span class=\"line\">              cb()</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先定义了 <code>abort</code> 函数，然后判断如果满足计算后的 <code>route</code> 和 <code>current</code> 是相同路径的话，则直接调用 <code>this.ensureUrl</code> 和 <code>abort</code></p>\n<p>接着根据 <code>current.matched</code> 和 <code>route.matched</code> 执行 <code>resolveQueue</code> 方法解析出 3 个队列，因为 <code>matched</code> 是一个 <code>routeRecord</code> 数组，所以遍历长度长的找到两个 <code>route</code> 不一样的位置，拿到 <code>updated</code> <code>activeted</code> <code>deactiveted</code> 三个 <code>RouteRecord</code> 数组，接下来要执行一系列的钩子</p>\n<h3 id=\"导航守卫\"><a href=\"#导航守卫\" class=\"headerlink\" title=\"导航守卫\"></a>导航守卫</h3><p>守卫就是一系列钩子<br>接下里的逻辑就是首先构造一个队列 <code>queue</code>，然后再定义一个 iterator，最后执行 <code>runQueue</code> 执行这个队列</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runQueue</span>(<span class=\"params\">queue: <span class=\"built_in\">Array</span>&lt;?NavigationGuard&gt;, fn: <span class=\"built_in\">Function</span>, cb: <span class=\"built_in\">Function</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> step = <span class=\"function\"><span class=\"params\">index</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= queue.length) &#123;</span><br><span class=\"line\">      cb()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (queue[index]) &#123;</span><br><span class=\"line\">        fn(queue[index], <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          step(index + <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        step(index + <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  step(<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是一个非常经典的异步函数队列化执行的模式，queue 是一个 <code>NavigationGuard</code> 类型的数组，我们定义了 <code>step</code> 函数，每次根据 <code>index</code> 从 <code>queue</code> 中取出一个 <code>guard</code>，然后执行 <code>fn</code> 函数，<br>并且吧 <code>guard</code> 作为参数传入，第二个参数是一个函数，当这个函数执行的时候再递归执行 <code>step</code> 函数，前进到下一个，这里的 <code>fn</code> 就是 <code>iterator</code> 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> iterator = <span class=\"function\">(<span class=\"params\">hook: NavigationGuard, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.pending !== route) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> abort()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    hook(route, current, <span class=\"function\">(<span class=\"params\">to: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (to === <span class=\"literal\">false</span> || isError(to)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.ensureURL(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        abort(to)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> to === <span class=\"string\">&#x27;string&#x27;</span> || (<span class=\"keyword\">typeof</span> to === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; (<span class=\"keyword\">typeof</span> to.path === <span class=\"string\">&#x27;string&#x27;</span> || <span class=\"keyword\">typeof</span> to.name === <span class=\"string\">&#x27;string&#x27;</span>))) &#123;</span><br><span class=\"line\">        abort()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> to === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; to.replace) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.replace(to)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.push(to)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        next(to)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    abort(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>iterator</code> 函数就是去执行 每一个导航守卫 <code>hook</code>，并传入 <code>route</code> <code>current</code> 和匿名函数，这些参数对应文档中的 <code>to</code> <code>from</code> <code>next</code>, 如果执行了匿名函数，会根据一些条件执行 <code>abort</code> 和 <code>next</code>, 只有执行 <code>next</code> 才会进入下一个钩子。(这里的 <code>next</code> 就会调用 <code>runQueue</code> 中 <code>fn</code> 的回调)</p>\n<p>最后看一下 这个 <code>queue</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> queue: <span class=\"built_in\">Array</span>&lt;?NavigationGuard&gt; = [].concat(</span><br><span class=\"line\">  extractLeaveGuards(deactivated),</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.router.beforeHooks,</span><br><span class=\"line\">  extractUpdateHooks(updated),</span><br><span class=\"line\">  activated.map(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.beforeEnter),</span><br><span class=\"line\">  resolveAsyncComponents(activated)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>其中钩子的顺序如下：</p>\n<ol>\n<li>在失活的组件里调用离开守卫</li>\n<li>调用全局的 <code>beforeEach</code> 守卫</li>\n<li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫</li>\n<li>在激活的路由配置里调用 <code>beforeEnter</code></li>\n<li>解析异步路由</li>\n<li>在被激活的组件里调用 <code>beforeRouteEnter</code></li>\n<li>调用全局的 <code>beforeResolve</code> 钩子</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> enterGuards = extractEnterGuards(activated, postEnterCbs, isValid)</span><br><span class=\"line\"><span class=\"keyword\">const</span> queue = enterGuards.concat(<span class=\"built_in\">this</span>.router.resolveHooks)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>调用全局的 <code>afterEach</code> 钩子</li>\n<li>触发 <code>DOM</code> 更新</li>\n<li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.router.app) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.router.app.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    postEnterCbs.forEach(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123;</span><br><span class=\"line\">      cb()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h3><p>当我们点击 <code>router-link</code> 的时候，实际上最终会执行 <code>router.push</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">push (location: RawLocation, onComplete?: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!onComplete &amp;&amp; !onAbort &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.history.push(location, resolve, reject)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.history.push(location, onComplete, onAbort)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>hash</code> 模式下的 <code>history.push</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">push (location: RawLocation, onComplete?: <span class=\"built_in\">Function</span>, onAbort?: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; <span class=\"attr\">current</span>: fromRoute &#125; = <span class=\"built_in\">this</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.transitionTo(</span><br><span class=\"line\">    location,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">      pushHash(route.fullPath)</span><br><span class=\"line\">      handleScroll(<span class=\"built_in\">this</span>.router, route, fromRoute, <span class=\"literal\">false</span>)</span><br><span class=\"line\">      onComplete &amp;&amp; onComplete(route)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onAbort</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 transitionTo 成功的回调中，会调用 pushHash 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushHash</span>(<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (supportsPushState) &#123;</span><br><span class=\"line\">    pushState(getUrl(path))</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.location.hash = path</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 <code>supportPushState</code> 为 <code>true</code>，就执行 <code>pushState(getUrl(path))</code>，否则直接替换 <code>window.location.hash</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushState</span>(<span class=\"params\">url?: string, replace?: boolean</span>) </span>&#123;</span><br><span class=\"line\">  saveScrollPosition()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> history = <span class=\"built_in\">window</span>.history</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (replace) &#123;</span><br><span class=\"line\">      history.replaceState(&#123; <span class=\"attr\">key</span>: _key &#125;, <span class=\"string\">&#x27;&#x27;</span>, url)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      _key = genKey()</span><br><span class=\"line\">      history.pushState(&#123; <span class=\"attr\">key</span>: _key &#125;, <span class=\"string\">&#x27;&#x27;</span>, url)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.location[replace ? <span class=\"string\">&#x27;replace&#x27;</span> : <span class=\"string\">&#x27;assign&#x27;</span>](url)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>pushState</code> 会调用浏览器原生的 <code>history</code> 的 <code>pushState</code> 接口或者 <code>replaceState</code> 接口，更新浏览器的 <code>url</code> 地址，并把当前 <code>url</code> 压入历史栈中</p>\n<p>然后在 h`istory 的初始化中，会设置一个监听器，监听历史栈的变化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">setupListeners () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> router = <span class=\"built_in\">this</span>.router</span><br><span class=\"line\">  <span class=\"keyword\">const</span> expectScroll = router.options.scrollBehavior</span><br><span class=\"line\">  <span class=\"keyword\">const</span> supportsScroll = supportsPushState &amp;&amp; expectScroll</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (supportsScroll) &#123;</span><br><span class=\"line\">    setupScroll()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(supportsPushState ? <span class=\"string\">&#x27;popstate&#x27;</span> : <span class=\"string\">&#x27;hashchange&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> current = <span class=\"built_in\">this</span>.current</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ensureSlash()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.transitionTo(getHash(), <span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (supportsScroll) &#123;</span><br><span class=\"line\">        handleScroll(<span class=\"built_in\">this</span>.router, route, current, <span class=\"literal\">true</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!supportsPushState) &#123;</span><br><span class=\"line\">        replaceHash(route.fullPath)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>router.init</code> 的时候，首次执行 <code>transitionTo</code> 时成功或失败的回调都会设置为 <code>setupListeners</code>, 这个函数添加 <code>popstate</code> 或者 <code>hashchange</code> 事件，<br>事件的回调会执行 <code>transitionTo</code> 并把 <code>getHash()</code> 的结果作为第一个参数. 当点击浏览器返回按钮的时候，如果已经有 <code>url</code> 被压入历史栈，则会触发 <code>popstate</code> 事件</p>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>路由最终的渲染离不开组件，<code>Vue-Router</code> 内置了 <code>&lt;router-view&gt;</code> 组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;RouterView&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">functional</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"attr\">default</span>: <span class=\"string\">&#x27;default&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">_, &#123; props, children, parent, data &#125;</span>)</span> &#123;</span><br><span class=\"line\">    data.routerView = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> h = parent.$createElement</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = props.name</span><br><span class=\"line\">    <span class=\"keyword\">const</span> route = parent.$route</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cache = parent._routerViewCache || (parent._routerViewCache = &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> depth = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> inactive = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (parent &amp;&amp; parent._routerRoot !== parent) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parent.$vnode &amp;&amp; parent.$vnode.data.routerView) &#123;</span><br><span class=\"line\">        depth++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parent._inactive) &#123;</span><br><span class=\"line\">        inactive = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      parent = parent.$parent</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    data.routerViewDepth = depth</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inactive) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> h(cache[name], data, children)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> matched = route.matched[depth]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!matched) &#123;</span><br><span class=\"line\">      cache[name] = <span class=\"literal\">null</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> h()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> component = (cache[name] = matched.components[name])</span><br><span class=\"line\"></span><br><span class=\"line\">    data.registerRouteInstance = <span class=\"function\">(<span class=\"params\">vm, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> current = matched.instances[name]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((val &amp;&amp; current !== vm) || (!val &amp;&amp; current === vm)) &#123;</span><br><span class=\"line\">        matched.instances[name] = val</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ;(data.hook || (data.hook = &#123;&#125;)).prepatch = <span class=\"function\">(<span class=\"params\">_, vnode</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      matched.instances[name] = vnode.componentInstance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> propsToPass = (data.props = resolveProps(route, matched.props &amp;&amp; matched.props[name]))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (propsToPass) &#123;</span><br><span class=\"line\">      propsToPass = data.props = extend(&#123;&#125;, propsToPass)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> attrs = (data.attrs = data.attrs || &#123;&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> propsToPass) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!component.props || !(key <span class=\"keyword\">in</span> component.props)) &#123;</span><br><span class=\"line\">          attrs[key] = propsToPass[key]</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> propsToPass[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(component, data, children)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 是一个函数组件，它的渲染也是依赖 render 函数，我们分析一下他的渲染</p>\n<p>首先获取 createElement name route cache 等变量</p>\n<p>然后在 <code>router.init</code> 的时候，会执行 history.listen()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">history.listen(<span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.apps.forEach(<span class=\"function\">(<span class=\"params\">app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    app._route = route</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">listen (cb: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.cb = cb</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在 <code>transitionTo</code> 成功的回调中 <code>afterEach</code> 之前会执行 <code>updateRoute</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">updateRoute (route: Route) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.current = route</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.cb &amp;&amp; <span class=\"built_in\">this</span>.cb(route)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>$route</code> 是定义在 <code>Vue.prototype</code> 上。每个组件实例访问 <code>$route</code> 属性，就是访问根实例的 <code>_route</code>，也就是当前的路由线路。</p>\n<p><code>&lt;router-view&gt;</code> 是支持嵌套的，回到 <code>render</code> 函数，其中定义了 <code>depth</code> 的概念，他表示 <code>router-view</code> 嵌套的深度，每个 <code>router-view</code> 在渲染的时候都会执行如下逻辑：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data.routerView = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (parent &amp;&amp; parent._routerRoot !== parent) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (parent.$vnode &amp;&amp; parent.$vnode.data.routerView) &#123;</span><br><span class=\"line\">    depth++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (parent._inactive) &#123;</span><br><span class=\"line\">    inactive = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  parent = parent.$parent</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> matched = route.matched[depth]</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> component = (cache[name] = matched.components[name])</span><br></pre></td></tr></table></figure>\n\n<p><code>parent._routerRoot</code> 表示的是根 <code>Vue</code> 实例，在这个过程，如果碰到了父节点也是 <code>&lt;router-view&gt;</code> 的时候，说明有嵌套的情况，<code>depth++</code>, 遍历完成后，根据当前线路匹配的路径和 <code>depth</code><br>找到对应的 <code>RouteRecord</code>，进而找到该渲染的组件。</p>\n<p>除了找到了应该渲染的组件，还定义了一个注册路由实例的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data.registerRouteInstance = <span class=\"function\">(<span class=\"params\">vm, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = matched.instances[name]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((val &amp;&amp; current !== vm) || (!val &amp;&amp; current === vm)) &#123;</span><br><span class=\"line\">    matched.instances[name] = val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>给 <code>vnode</code> 的 <code>data</code> 定义了 <code>registerRouteInstance</code> 方法，调用该方法去注册路由的实例<br>在混入的 <code>beforeCreate</code> 钩子函数中，会执行 <code>registerInstance</code> 方法，进而执行 <code>render</code> 函数中定义的 <code>registerRouteInstance</code>，从而给 <code>matched.instances[name]</code> 赋值当前组件的 <code>vm</code> 实例</p>\n<p>render 函数最后根据 component 渲染出对应的组件 vnode</p>\n<p><strong>那么当我们执行 transitionTo 来更改路由后，组件是如何渲染的呢？</strong></p>\n<p>在混入的 <code>beforeCreate</code> 钩子中我们吧 <code>this._route</code> 变为了响应式属性，我们在 渲染 r<code>outer-view</code> 的时候，会访问 <code>parent.$route</code>, 触发了 <code>getter</code>，相当于 <code>router-view</code> 对它有依赖，然后再执行完 <code>transitionTo</code> 后，修改 <code>app._route</code> 的时候又触发了 <code>setter</code>，因此会通知 <code>router-view</code> 的渲染 <code>watcher</code> 更新，重新渲染组件</p>\n<p>VueRotuer 还内置了 <code>router-link</code> 组件</p>\n<p>通过 to 属性指定目标地址，默认渲染成带有正确连接的 a 标签，可以通过 tag 生成别的标签，另外当路由成功激活时，链接元素自动设置一个表示激活的 css 类名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;RouterLink&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">to</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: toTypes,</span><br><span class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">tag</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"attr\">default</span>: <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">exact</span>: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">    <span class=\"attr\">append</span>: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">    <span class=\"attr\">replace</span>: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">    <span class=\"attr\">activeClass</span>: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"attr\">exactActiveClass</span>: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    <span class=\"attr\">event</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: eventTypes,</span><br><span class=\"line\">      <span class=\"attr\">default</span>: <span class=\"string\">&#x27;click&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\">h: <span class=\"built_in\">Function</span></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> router = <span class=\"built_in\">this</span>.$router</span><br><span class=\"line\">    <span class=\"keyword\">const</span> current = <span class=\"built_in\">this</span>.$route</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; location, route, href &#125; = router.resolve(<span class=\"built_in\">this</span>.to, current, <span class=\"built_in\">this</span>.append)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> classes = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> globalActiveClass = router.options.linkActiveClass</span><br><span class=\"line\">    <span class=\"keyword\">const</span> globalExactActiveClass = router.options.linkExactActiveClass</span><br><span class=\"line\">    <span class=\"keyword\">const</span> activeClassFallback = globalActiveClass == <span class=\"literal\">null</span> ? <span class=\"string\">&#x27;router-link-active&#x27;</span> : globalActiveClass</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exactActiveClassFallback = globalExactActiveClass == <span class=\"literal\">null</span> ? <span class=\"string\">&#x27;router-link-exact-active&#x27;</span> : globalExactActiveClass</span><br><span class=\"line\">    <span class=\"keyword\">const</span> activeClass = <span class=\"built_in\">this</span>.activeClass == <span class=\"literal\">null</span> ? activeClassFallback : <span class=\"built_in\">this</span>.activeClass</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exactActiveClass = <span class=\"built_in\">this</span>.exactActiveClass == <span class=\"literal\">null</span> ? exactActiveClassFallback : <span class=\"built_in\">this</span>.exactActiveClass</span><br><span class=\"line\">    <span class=\"keyword\">const</span> compareTarget = location.path ? createRoute(<span class=\"literal\">null</span>, location, <span class=\"literal\">null</span>, router) : route</span><br><span class=\"line\"></span><br><span class=\"line\">    classes[exactActiveClass] = isSameRoute(current, compareTarget)</span><br><span class=\"line\">    classes[activeClass] = <span class=\"built_in\">this</span>.exact ? classes[exactActiveClass] : isIncludedRoute(current, compareTarget)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (guardEvent(e)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.replace) &#123;</span><br><span class=\"line\">          router.replace(location)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          router.push(location)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> on = &#123; <span class=\"attr\">click</span>: guardEvent &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(<span class=\"built_in\">this</span>.event)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.event.forEach(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        on[e] = handler</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      on[<span class=\"built_in\">this</span>.event] = handler</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> data: any = &#123;</span><br><span class=\"line\">      <span class=\"attr\">class</span>: classes</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.tag === <span class=\"string\">&#x27;a&#x27;</span>) &#123;</span><br><span class=\"line\">      data.on = on</span><br><span class=\"line\">      data.attrs = &#123; href &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> a = findAnchor(<span class=\"built_in\">this</span>.$slots.default)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a) &#123;</span><br><span class=\"line\">        a.isStatic = <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> extend = _Vue.util.extend</span><br><span class=\"line\">        <span class=\"keyword\">const</span> aData = (a.data = extend(&#123;&#125;, a.data))</span><br><span class=\"line\">        aData.on = on</span><br><span class=\"line\">        <span class=\"keyword\">const</span> aAttrs = (a.data.attrs = extend(&#123;&#125;, a.data.attrs))</span><br><span class=\"line\">        aAttrs.href = href</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        data.on = on</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h(<span class=\"built_in\">this</span>.tag, data, <span class=\"built_in\">this</span>.$slots.default)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>router.resolve</code> 函数执行<br>先规范生成目标 <code>location</code>，再根据 <code>location</code> 和 <code>match</code> 通过 <code>this.match</code> 方法计算生成目标路径 <code>route</code>，然后再根据 <code>base、fullPath</code> 和 <code>this.mode</code> 通过 <code>createHref</code> 方法计算出最终跳转的 <code>href</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">resolve (</span><br><span class=\"line\">  to: RawLocation,</span><br><span class=\"line\">  current?: Route,</span><br><span class=\"line\">  append?: boolean</span><br><span class=\"line\">): &#123;</span><br><span class=\"line\">  <span class=\"attr\">location</span>: Location,</span><br><span class=\"line\">  <span class=\"attr\">route</span>: Route,</span><br><span class=\"line\">  <span class=\"attr\">href</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">normalizedTo</span>: Location,</span><br><span class=\"line\">  <span class=\"attr\">resolved</span>: Route</span><br><span class=\"line\">&#125; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> location = normalizeLocation(</span><br><span class=\"line\">    to,</span><br><span class=\"line\">    current || <span class=\"built_in\">this</span>.history.current,</span><br><span class=\"line\">    append,</span><br><span class=\"line\">    <span class=\"built_in\">this</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">const</span> route = <span class=\"built_in\">this</span>.match(location, current)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fullPath = route.redirectedFrom || route.fullPath</span><br><span class=\"line\">  <span class=\"keyword\">const</span> base = <span class=\"built_in\">this</span>.history.base</span><br><span class=\"line\">  <span class=\"keyword\">const</span> href = createHref(base, fullPath, <span class=\"built_in\">this</span>.mode)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    location,</span><br><span class=\"line\">    route,</span><br><span class=\"line\">    href,</span><br><span class=\"line\">    <span class=\"attr\">normalizedTo</span>: location,</span><br><span class=\"line\">    <span class=\"attr\">resolved</span>: route</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createHref</span> (<span class=\"params\">base: string, fullPath: string, mode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> path = mode === <span class=\"string\">&#x27;hash&#x27;</span> ? <span class=\"string\">&#x27;#&#x27;</span> + fullPath : fullPath</span><br><span class=\"line\">  <span class=\"keyword\">return</span> base ? cleanPath(base + <span class=\"string\">&#x27;/&#x27;</span> + path) : path</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解析完路由后 添加 activeClass 和 exactActiveClass</p>\n<p>接着创建了一个守卫函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (guardEvent(e)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.replace) &#123;</span><br><span class=\"line\">      router.replace(location)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      router.push(location)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">guardEvent</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.defaultPrevented) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.button !== <span class=\"literal\">undefined</span> &amp;&amp; e.button !== <span class=\"number\">0</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.currentTarget &amp;&amp; e.currentTarget.getAttribute) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = e.currentTarget.getAttribute(<span class=\"string\">&#x27;target&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\b_blank\\b/i</span>.test(target)) <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.preventDefault) &#123;</span><br><span class=\"line\">    e.preventDefault()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> on = &#123; <span class=\"attr\">click</span>: guardEvent &#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(<span class=\"built_in\">this</span>.event)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.event.forEach(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    on[e] = handler</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  on[<span class=\"built_in\">this</span>.event] = handler</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终会监听点击事件或者其它可以通过 <code>prop</code> 传入的事件类型，执行 <code>hanlder</code> 函数，最终执行 <code>router.push</code> 或者 r<code>outer.replace</code> 函数</p>\n<p>最后判断当前 <code>tag</code> 是否是 <code>&lt;a&gt;</code> 标签，<code>&lt;router-link&gt;</code> 默认会渲染成 <code>&lt;a&gt;</code> 标签，当然我们也可以修改 <code>tag</code> 的 <code>prop</code> 渲染成其他节点，这种情况下会尝试找它子元素的 <code>&lt;a&gt;</code> 标签，如果有则把事件绑定到 <code>&lt;a&gt;</code> 标签上并添加 <code>href</code> 属性，否则绑定到外层元素本身</p>\n<p><strong>路径变化是路由中最重要的功能，我们要记住以下内容：路由始终会维护当前的线路，路由切换的时候会把当前线路切换到目标线路，切换过程中会执行一系列的导航守卫钩子函数，会更改 url，同样也会渲染对应的组件，切换完毕后会把目标线路更新替换当前线路，这样就会作为下一次的路径切换的依据。</strong></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li>路由钩子为什么要 bind</li>\n<li>this.current 什么时候赋值</li>\n</ol>\n<p><code>transitionTo</code> 成功回调执行 <code>updateRoute</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">updateRoute (route: Route) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//. ..</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.current = route</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.cb &amp;&amp; <span class=\"built_in\">this</span>.cb(route)</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>a 标签执行 router.push</li>\n<li>routerRecord.instance 什么时候赋值</li>\n</ol>\n<p><code>beforeCreate</code> 混入了 <code>registerInstance(this, this)</code>, 这个函数会执行 <code>registerRouteInstance</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">data.registerRouteInstance = <span class=\"function\">(<span class=\"params\">vm, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// val could be undefined for unregistration</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> current = matched.instances[name]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((val &amp;&amp; current !== vm) || (!val &amp;&amp; current === vm)) &#123;</span><br><span class=\"line\">    matched.instances[name] = val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["vue"],"tags":["vue2.x","笔记","vue-router"]},{"title":"vue3 组件核心源码阅读笔记","url":"/blog-next/2020/08/20/vue3%E7%BB%84%E4%BB%B6%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/","content":"<h1 id=\"Vue-js-的优化\"><a href=\"#Vue-js-的优化\" class=\"headerlink\" title=\"Vue.js 的优化\"></a>Vue.js 的优化</h1><p>Vue 3.0 从源码、性能和语法 API 三个大的方面优化了框架，也提高了开发人员的开发体验，相比于 2.x 有了很大的一个改变</p>\n<a id=\"more\"></a>\n\n<h2 id=\"源码优化\"><a href=\"#源码优化\" class=\"headerlink\" title=\"源码优化\"></a>源码优化</h2><ul>\n<li>更好的代码管理方式：monorepo</li>\n<li>有类型的 JavaScript：TypeScript</li>\n</ul>\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><ul>\n<li><p>源码体积优化</p>\n<ul>\n<li>首先，移除一些冷门的 feature（比如 filter、inline-template 等）</li>\n<li>其次，引入 tree-shaking 的技术，减少打包体积</li>\n</ul>\n</li>\n<li><p>数据劫持优化</p>\n</li>\n<li><p>编译优化，借助 Block tree，Vue.js 将 vnode 更新性能由与模版整体大小相关提升为与动态内容的数量相关，这是一个非常大的性能突破</p>\n</li>\n</ul>\n<h2 id=\"语法-API-优化：Composition-API\"><a href=\"#语法-API-优化：Composition-API\" class=\"headerlink\" title=\"语法 API 优化：Composition API\"></a>语法 API 优化：Composition API</h2><ol>\n<li>优化逻辑组织</li>\n<li>优化逻辑复用</li>\n</ol>\n<h2 id=\"引入-RFC：使每个版本改动可控\"><a href=\"#引入-RFC：使每个版本改动可控\" class=\"headerlink\" title=\"引入 RFC：使每个版本改动可控\"></a>引入 RFC：使每个版本改动可控</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3JmY3MvcHVsbHM/cT1pczpwcitpczptZXJnZWQrbGFiZWw6My54\">Vue.js-RFC<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h1 id=\"组件的实现：Vue-核心的实现\"><a href=\"#组件的实现：Vue-核心的实现\" class=\"headerlink\" title=\"组件的实现：Vue 核心的实现\"></a>组件的实现：Vue 核心的实现</h1><blockquote>\n<p>模板 + 对象描述 + 数据 = 组件</p>\n</blockquote>\n<h2 id=\"vnode-到真实-DOM-是如何转变的？\"><a href=\"#vnode-到真实-DOM-是如何转变的？\" class=\"headerlink\" title=\"vnode 到真实 DOM 是如何转变的？\"></a>vnode 到真实 DOM 是如何转变的？</h2><blockquote>\n<p>创建 vnode + 渲染 vnode + 生成 DOM</p>\n</blockquote>\n<h3 id=\"vue-初始化\"><a href=\"#vue-初始化\" class=\"headerlink\" title=\"vue 初始化\"></a>vue 初始化</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在 Vue.js 3.0 中，初始化一个应用的方式如下</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;./app&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(App);</span><br><span class=\"line\">app.mount(<span class=\"string\">&quot;#app&quot;</span>); <span class=\"comment\">// 把 App 组件挂载到 id 为 app 的 DOM 节点上</span></span><br></pre></td></tr></table></figure>\n\n<p>这其中导入了一个 createApp 入口函数，他是 Vue.js 对外暴露的一个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> createApp = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建 app 对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> app = ensureRenderer().createApp(...args);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; mount &#125; = app;</span><br><span class=\"line\">  <span class=\"comment\">// 重写 mount 方法</span></span><br><span class=\"line\">  app.mount = <span class=\"function\">(<span class=\"params\">containerOrSelector</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> app;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>从代码中可以看出 createApp 主要做了两件事情，创建 app 对象和重写 app.mount 方法</p>\n<h4 id=\"1-创建-app-对象\"><a href=\"#1-创建-app-对象\" class=\"headerlink\" title=\"1. 创建 app 对象\"></a>1. 创建 app 对象</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = ensureRenderer().createApp(...args);</span><br></pre></td></tr></table></figure>\n\n<p>其中 ensureRenderer() 用来创建一个渲染器对象，它的内部实现如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 渲染相关的一些配置，比如更新属性的方法，操作 DOM 的方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rendererOptions = &#123;</span><br><span class=\"line\">  patchProp,</span><br><span class=\"line\">  ...nodeOps,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> renderer;</span><br><span class=\"line\"><span class=\"comment\">// 延时创建渲染器，当用户只依赖响应式包的时候，可以通过 tree-shaking 移除核心渲染逻辑相关的代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ensureRenderer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> renderer || (renderer = createRenderer(rendererOptions));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRenderer</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> baseCreateRenderer(options);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baseCreateRenderer</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">vnode, container</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 组件渲染的核心逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    render,</span><br><span class=\"line\">    <span class=\"attr\">createApp</span>: createAppAPI(render),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createAppAPI</span>(<span class=\"params\">render</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// createApp createApp 方法接受的两个参数：根组件的对象和 prop</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createApp</span>(<span class=\"params\">rootComponent, rootProps = <span class=\"literal\">null</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = &#123;</span><br><span class=\"line\">      <span class=\"attr\">_component</span>: rootComponent,</span><br><span class=\"line\">      <span class=\"attr\">_props</span>: rootProps,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">mount</span>(<span class=\"params\">rootContainer</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建根组件的 vnode</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> vnode = createVNode(rootComponent, rootProps);</span><br><span class=\"line\">        <span class=\"comment\">// 利用渲染器渲染 vnode</span></span><br><span class=\"line\">        render(vnode, rootContainer);</span><br><span class=\"line\">        app._container = rootContainer;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vnode.component.proxy;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-重写-app-mount-方法\"><a href=\"#2-重写-app-mount-方法\" class=\"headerlink\" title=\"2. 重写 app.mount 方法\"></a>2. 重写 app.mount 方法</h4><p>Vue.js 不仅仅是为 Web 平台服务，它的目标是支持跨平台渲染，而 createApp 函数内部的 app.mount 方法是一个标准的可跨平台的组件渲染流程，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">mount</span>(<span class=\"params\">rootContainer</span>)</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 创建根组件的 vnode</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> vnode = createVNode(rootComponent, rootProps)</span><br><span class=\"line\"> <span class=\"comment\">// 利用渲染器渲染 vnode</span></span><br><span class=\"line\"> render(vnode, rootContainer)</span><br><span class=\"line\"> app._container = rootContainer</span><br><span class=\"line\"> <span class=\"keyword\">return</span> vnode.component.proxy</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>标准的跨平台渲染流程是先创建 vnode，再渲染 vnode。此外参数 rootContainer 也可以是不同类型的值，也就是这里是通用的渲染逻辑，<br>接下来完善 Web 平台下的渲染逻辑</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.mount = <span class=\"function\">(<span class=\"params\">containerOrSelector</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 标准化容器</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> container = normalizeContainer(containerOrSelector);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!container) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> component = app._component;</span><br><span class=\"line\">  <span class=\"comment\">// 如组件对象没有定义 render 函数和 template 模板，则取容器的 innerHTML 作为组件模板内容</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isFunction(component) &amp;&amp; !component.render &amp;&amp; !component.template) &#123;</span><br><span class=\"line\">    component.template = container.innerHTML;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 挂载前清空容器内容</span></span><br><span class=\"line\">  container.innerHTML = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 真正的挂载</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> mount(container);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>app.mount 就是 重写的 mount 方法，传入 container 参数，先标准化容器，然后取出 rootComponent，<br>如组件对象没有定义 render 函数和 template 模板，则取容器的 innerHTML 作为组件模板内容，<br>在挂载前清空容器内容，然后执行通用的 mount 方法</p>\n<h3 id=\"核心渲染流程：创建-vnode-和渲染-vnode\"><a href=\"#核心渲染流程：创建-vnode-和渲染-vnode\" class=\"headerlink\" title=\"核心渲染流程：创建 vnode 和渲染 vnode\"></a>核心渲染流程：创建 vnode 和渲染 vnode</h3><h4 id=\"创建-vnode\"><a href=\"#创建-vnode\" class=\"headerlink\" title=\"创建 vnode\"></a>创建 vnode</h4><p>组件 vnode 其实是对抽象事物的描述，这是因为我们并不会在页面上真正渲染一个 <code>&lt;custom-component&gt;</code> 标签，而是渲染组件内部定义的 HTML 标签。<br>vnode 有组件 vnode，普通元素 vnode，注释 vnode，文本 vnode</p>\n<p><strong>为什么要设计 vnode？</strong></p>\n<ul>\n<li>抽象</li>\n<li>跨平台都可以用</li>\n</ul>\n<p>回顾 app.mount 内部实现，用 createVnode 创建了根组件的 vnode</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vnode = createVNode(rootComponent, rootProps);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createVNode</span>(<span class=\"params\">type, props = <span class=\"literal\">null</span>, children = <span class=\"literal\">null</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理 props 相关逻辑，标准化 class 和 style</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 对 vnode 类型信息编码</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> shapeFlag = isString(type)</span><br><span class=\"line\">    ? <span class=\"number\">1</span> <span class=\"comment\">/* ELEMENT */</span></span><br><span class=\"line\">    : isSuspense(type)</span><br><span class=\"line\">    ? <span class=\"number\">128</span> <span class=\"comment\">/* SUSPENSE */</span></span><br><span class=\"line\">    : isTeleport(type)</span><br><span class=\"line\">    ? <span class=\"number\">64</span> <span class=\"comment\">/* TELEPORT */</span></span><br><span class=\"line\">    : isObject(type)</span><br><span class=\"line\">    ? <span class=\"number\">4</span> <span class=\"comment\">/* STATEFUL_COMPONENT */</span></span><br><span class=\"line\">    : isFunction(type)</span><br><span class=\"line\">    ? <span class=\"number\">2</span> <span class=\"comment\">/* FUNCTIONAL_COMPONENT */</span></span><br><span class=\"line\">    : <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vnode = &#123;</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    props,</span><br><span class=\"line\">    shapeFlag,</span><br><span class=\"line\">    <span class=\"comment\">// 一些其他属性</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 标准化子节点，把不同数据类型的 children 转成数组或者文本类型</span></span><br><span class=\"line\">  normalizeChildren(vnode, children);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vnode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出 createVnode 就是对 props 做标准化处理、对 vnode 的类型信息编码、创建 vnode 对象，标准化子节点 children，返回 vnode</p>\n<h4 id=\"渲染-vnode\"><a href=\"#渲染-vnode\" class=\"headerlink\" title=\"渲染 vnode\"></a>渲染 vnode</h4><p>在 app.mount 内部通过 render(vnode, rootContainer) 去渲染组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">render(vnode, rootContainer);</span><br><span class=\"line\"><span class=\"keyword\">const</span> render = <span class=\"function\">(<span class=\"params\">vnode, container</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vnode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 销毁组件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (container._vnode) &#123;</span><br><span class=\"line\">      unmount(container._vnode, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建或者更新组件</span></span><br><span class=\"line\">    patch(container._vnode || <span class=\"literal\">null</span>, vnode, container);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 缓存 vnode 节点，表示已经渲染</span></span><br><span class=\"line\">  container._vnode = vnode;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>通过 vnode 判断去执行卸载还是创建或更新，接下来看 patch</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> patch = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  anchor = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG = <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized = <span class=\"literal\">false</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果存在新旧节点, 且新旧节点类型不同，则销毁旧节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n1 &amp;&amp; !isSameVNodeType(n1, n2)) &#123;</span><br><span class=\"line\">    anchor = getNextHostNode(n1);</span><br><span class=\"line\">    unmount(n1, parentComponent, parentSuspense, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    n1 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; type, shapeFlag &#125; = n2;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Text:</span><br><span class=\"line\">      <span class=\"comment\">// 处理文本节点</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Comment:</span><br><span class=\"line\">      <span class=\"comment\">// 处理注释节点</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Static:</span><br><span class=\"line\">      <span class=\"comment\">// 处理静态节点</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Fragment:</span><br><span class=\"line\">      <span class=\"comment\">// 处理 Fragment 元素</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (shapeFlag &amp; <span class=\"number\">1</span> <span class=\"comment\">/* ELEMENT */</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理普通 DOM 元素</span></span><br><span class=\"line\">        processElement(</span><br><span class=\"line\">          n1,</span><br><span class=\"line\">          n2,</span><br><span class=\"line\">          container,</span><br><span class=\"line\">          anchor,</span><br><span class=\"line\">          parentComponent,</span><br><span class=\"line\">          parentSuspense,</span><br><span class=\"line\">          isSVG,</span><br><span class=\"line\">          optimized</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shapeFlag &amp; <span class=\"number\">6</span> <span class=\"comment\">/* COMPONENT */</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理组件</span></span><br><span class=\"line\">        processComponent(</span><br><span class=\"line\">          n1,</span><br><span class=\"line\">          n2,</span><br><span class=\"line\">          container,</span><br><span class=\"line\">          anchor,</span><br><span class=\"line\">          parentComponent,</span><br><span class=\"line\">          parentSuspense,</span><br><span class=\"line\">          isSVG,</span><br><span class=\"line\">          optimized</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shapeFlag &amp; <span class=\"number\">64</span> <span class=\"comment\">/* TELEPORT */</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理 TELEPORT</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shapeFlag &amp; <span class=\"number\">128</span> <span class=\"comment\">/* SUSPENSE */</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理 SUSPENSE</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们重点关注对组件的处理和对普通 dom 元素的处理<br>先看对组件的处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> processComponent = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  anchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n1 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 挂载组件</span></span><br><span class=\"line\">    mountComponent(</span><br><span class=\"line\">      n2,</span><br><span class=\"line\">      container,</span><br><span class=\"line\">      anchor,</span><br><span class=\"line\">      parentComponent,</span><br><span class=\"line\">      parentSuspense,</span><br><span class=\"line\">      isSVG,</span><br><span class=\"line\">      optimized</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新组件</span></span><br><span class=\"line\">    updateComponent(n1, n2, parentComponent, optimized);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>mountComponent 就做三件事情</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mountComponent = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  initialVNode,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  anchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建组件实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = (initialVNode.component = createComponentInstance(</span><br><span class=\"line\">    initialVNode,</span><br><span class=\"line\">    parentComponent,</span><br><span class=\"line\">    parentSuspense</span><br><span class=\"line\">  ));</span><br><span class=\"line\">  <span class=\"comment\">// 设置组件实例</span></span><br><span class=\"line\">  setupComponent(instance);</span><br><span class=\"line\">  <span class=\"comment\">// 设置并运行带副作用的渲染函数</span></span><br><span class=\"line\">  setupRenderEffect(</span><br><span class=\"line\">    instance,</span><br><span class=\"line\">    initialVNode,</span><br><span class=\"line\">    container,</span><br><span class=\"line\">    anchor,</span><br><span class=\"line\">    parentSuspense,</span><br><span class=\"line\">    isSVG,</span><br><span class=\"line\">    optimized</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>组件的创建不像 2.0 去实例化组件，内部通过返回对象创建，接着是设置组件实例，保留了很多组件相关的数据，维护了组件的上下文，包括对 props，插槽，以及其他实例的属性的初始化处理，最后是运行带副作用的渲染函数 <code>setupRenderEffect</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setupRenderEffect = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  instance,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  initialVNode,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  anchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建响应式的副作用渲染函数</span></span><br><span class=\"line\">  instance.update = effect(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">componentEffect</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!instance.isMounted) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 渲染组件生成子树 vnode</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> subTree = (instance.subTree = renderComponentRoot(instance));</span><br><span class=\"line\">      <span class=\"comment\">// 把子树 vnode 挂载到 container 中</span></span><br><span class=\"line\">      patch(<span class=\"literal\">null</span>, subTree, container, anchor, instance, parentSuspense, isSVG);</span><br><span class=\"line\">      <span class=\"comment\">// 保留渲染生成的子树根 DOM 节点</span></span><br><span class=\"line\">      initialVNode.el = subTree.el;</span><br><span class=\"line\">      instance.isMounted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 更新组件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, prodEffectOptions);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>该函数利用响应式库的 <code>effect</code> 函数创建了一个副作用渲染函数 <code>componentEffect</code>，当组件的数据发生变化时，<code>effect</code> 函数包裹的内部渲染函数 <code>componentEffect</code> 会重新执行一遍，从而达到重新渲染组件的目的。</p>\n<p>先分析初始渲染</p>\n<p><strong>初始渲染主要做两件事情：渲染组件生成 subTree、把 subTree 挂载到 container 中</strong></p>\n<p><code>initialVnode</code> 就是 <code>组件 vnode</code>，<code>subTree</code> 就是 <code>子树 vnode</code> 执行 <code>renderComponentRoot</code> 生成</p>\n<p>我们知道每个组件都会有对应的 <code>render</code> 函数，即使你写 <code>template</code>，也会编译成 <code>render</code> 函数，而 <code>renderComponentRoot</code> 函数就是去执行 <code>render</code> 函数创建整个组件树内部的 <code>vnode</code>，把这个 <code>vnode</code> 再经过内部一层标准化，就得到了该函数的返回结果：子树 vnode。</p>\n<p>渲染成子树 <code>vnode</code> 后，接下来就是继续调用 <code>patch</code> 函数把子树 <code>vnode</code> 挂载到 <code>container</code> 中</p>\n<p>又回到 <code>patch</code> 函数，会继续对这个子树的 <code>vnode</code> 类型进行判断，如果是 <code>div</code> 就对应的是 <code>普通元素 vnode</code>，<br>就会处理普通 dom 执行 <code>processElement</code> 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> processElement = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  anchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  isSVG = isSVG || n2.type === <span class=\"string\">&quot;svg&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n1 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//挂载元素节点</span></span><br><span class=\"line\">    mountElement(</span><br><span class=\"line\">      n2,</span><br><span class=\"line\">      container,</span><br><span class=\"line\">      anchor,</span><br><span class=\"line\">      parentComponent,</span><br><span class=\"line\">      parentSuspense,</span><br><span class=\"line\">      isSVG,</span><br><span class=\"line\">      optimized</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//更新元素节点</span></span><br><span class=\"line\">    patchElement(n1, n2, parentComponent, parentSuspense, isSVG, optimized);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>接下来看 mountElement 的逻辑</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mountElement = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  vnode,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  anchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> el;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; type, props, shapeFlag &#125; = vnode;</span><br><span class=\"line\">  <span class=\"comment\">// 创建 DOM 元素节点</span></span><br><span class=\"line\">  el = vnode.el = hostCreateElement(vnode.type, isSVG, props &amp;&amp; props.is);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (props) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理 props，比如 class、style、event 等属性</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> props) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isReservedProp(key)) &#123;</span><br><span class=\"line\">        hostPatchProp(el, key, <span class=\"literal\">null</span>, props[key], isSVG);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (shapeFlag &amp; <span class=\"number\">8</span> <span class=\"comment\">/* TEXT_CHILDREN */</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理子节点是纯文本的情况</span></span><br><span class=\"line\">    hostSetElementText(el, vnode.children);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shapeFlag &amp; <span class=\"number\">16</span> <span class=\"comment\">/* ARRAY_CHILDREN */</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理子节点是数组的情况 循环执行 child patch</span></span><br><span class=\"line\">    mountChildren(</span><br><span class=\"line\">      vnode.children,</span><br><span class=\"line\">      el,</span><br><span class=\"line\">      <span class=\"literal\">null</span>,</span><br><span class=\"line\">      parentComponent,</span><br><span class=\"line\">      parentSuspense,</span><br><span class=\"line\">      isSVG &amp;&amp; type !== <span class=\"string\">&quot;foreignObject&quot;</span>,</span><br><span class=\"line\">      optimized || !!vnode.dynamicChildren</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 把创建的 DOM 元素节点挂载到 container 上</span></span><br><span class=\"line\">  hostInsert(el, container, anchor);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，挂载元素函数主要做四件事情，创建 <code>DOM</code> 元素节点，处理 <code>props</code>，处理 <code>children</code>，挂载 <code>DOM</code> 到 container 上</p>\n<p>渲染完 <code>subTree</code> 之后，就会执行 <code>componentEffect</code> 函数中的剩余逻辑</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">initialVNode.el = subTree.el;</span><br><span class=\"line\">instance.isMounted = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件更新：完整的-DOM-diff-流程是怎样的？（上）\"><a href=\"#组件更新：完整的-DOM-diff-流程是怎样的？（上）\" class=\"headerlink\" title=\"组件更新：完整的 DOM diff 流程是怎样的？（上）\"></a>组件更新：完整的 DOM diff 流程是怎样的？（上）</h2><h3 id=\"副作用渲染函数更新组件的过程\"><a href=\"#副作用渲染函数更新组件的过程\" class=\"headerlink\" title=\"副作用渲染函数更新组件的过程\"></a>副作用渲染函数更新组件的过程</h3><p>带副作用的渲染函数 <code>setupRenderEffect</code> 会在 instance.update 上挂载 <code>componentEffect</code> 函数，数据变化后就会执行该函数的 <code>else</code> 逻辑</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setupRenderEffect = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  instance,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  initialVNode,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  anchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建响应式的副作用渲染函数</span></span><br><span class=\"line\">  instance.update = effect(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">componentEffect</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!instance.isMounted) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 渲染组件</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 更新组件</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123; next, vnode &#125; = instance;</span><br><span class=\"line\">      <span class=\"comment\">// next 表示新的组件 vnode</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (next) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 更新组件 vnode 节点信息</span></span><br><span class=\"line\">        updateComponentPreRender(instance, next, optimized);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        next = vnode;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 渲染新的子树 vnode</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextTree = renderComponentRoot(instance);</span><br><span class=\"line\">      <span class=\"comment\">// 缓存旧的子树 vnode</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> prevTree = instance.subTree;</span><br><span class=\"line\">      <span class=\"comment\">// 更新子树 vnode</span></span><br><span class=\"line\">      instance.subTree = nextTree;</span><br><span class=\"line\">      <span class=\"comment\">// 组件更新核心逻辑，根据新旧子树 vnode 做 patch</span></span><br><span class=\"line\">      patch(</span><br><span class=\"line\">        prevTree,</span><br><span class=\"line\">        nextTree,</span><br><span class=\"line\">        <span class=\"comment\">// 如果在 teleport 组件中父节点可能已经改变，所以容器直接找旧树 DOM 元素的父节点</span></span><br><span class=\"line\">        hostParentNode(prevTree.el),</span><br><span class=\"line\">        <span class=\"comment\">// 参考节点在 fragment 的情况可能改变，所以直接找旧树 DOM 元素的下一个节点</span></span><br><span class=\"line\">        getNextHostNode(prevTree),</span><br><span class=\"line\">        instance,</span><br><span class=\"line\">        parentSuspense,</span><br><span class=\"line\">        isSVG</span><br><span class=\"line\">      );</span><br><span class=\"line\">      <span class=\"comment\">// 缓存更新后的 DOM 节点</span></span><br><span class=\"line\">      next.el = nextTree.el;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, prodEffectOptions);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，更新组件主要做三件事情：更新组件 <code>vnode</code> 节点，渲染新的子树 <code>vnode</code> 根据新旧子树 <code>vnode</code> 执行 <code>patch</code> 逻辑</p>\n<p>更新组件 <code>vnode</code> 的时候，要判断有没有新组件 <code>vnode</code> <code>next</code>，有则更新，没有就用之前的 <code>vnode</code><br>渲染新的子树 <code>vnode</code> 和之前的一样<br>最后就是核心的 <code>patch</code> 逻辑，用来找出新旧子树 vnode 的不同，并找到一种合适的方式更新 DOM</p>\n<h3 id=\"核心-patch\"><a href=\"#核心-patch\" class=\"headerlink\" title=\"核心 patch\"></a>核心 patch</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> patch = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  anchor = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG = <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized = <span class=\"literal\">false</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果存在新旧节点, 且新旧节点类型不同，则销毁旧节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n1 &amp;&amp; !isSameVNodeType(n1, n2)) &#123;</span><br><span class=\"line\">    anchor = getNextHostNode(n1);</span><br><span class=\"line\">    unmount(n1, parentComponent, parentSuspense, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">// n1 设置为 null 保证后续都走 mount 逻辑</span></span><br><span class=\"line\">    n1 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; type, shapeFlag &#125; = n2;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Text:</span><br><span class=\"line\">      <span class=\"comment\">// 处理文本节点</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Comment:</span><br><span class=\"line\">      <span class=\"comment\">// 处理注释节点</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Static:</span><br><span class=\"line\">      <span class=\"comment\">// 处理静态节点</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Fragment:</span><br><span class=\"line\">      <span class=\"comment\">// 处理 Fragment 元素</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (shapeFlag &amp; <span class=\"number\">1</span> <span class=\"comment\">/* ELEMENT */</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理普通 DOM 元素</span></span><br><span class=\"line\">        processElement(</span><br><span class=\"line\">          n1,</span><br><span class=\"line\">          n2,</span><br><span class=\"line\">          container,</span><br><span class=\"line\">          anchor,</span><br><span class=\"line\">          parentComponent,</span><br><span class=\"line\">          parentSuspense,</span><br><span class=\"line\">          isSVG,</span><br><span class=\"line\">          optimized</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shapeFlag &amp; <span class=\"number\">6</span> <span class=\"comment\">/* COMPONENT */</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理组件</span></span><br><span class=\"line\">        processComponent(</span><br><span class=\"line\">          n1,</span><br><span class=\"line\">          n2,</span><br><span class=\"line\">          container,</span><br><span class=\"line\">          anchor,</span><br><span class=\"line\">          parentComponent,</span><br><span class=\"line\">          parentSuspense,</span><br><span class=\"line\">          isSVG,</span><br><span class=\"line\">          optimized</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shapeFlag &amp; <span class=\"number\">64</span> <span class=\"comment\">/* TELEPORT */</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理 TELEPORT</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shapeFlag &amp; <span class=\"number\">128</span> <span class=\"comment\">/* SUSPENSE */</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理 SUSPENSE</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isSameVNodeType</span>(<span class=\"params\">n1, n2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// n1 和 n2 节点的 type 和 key 都相同，才是相同节点</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> n1.type === n2.type &amp;&amp; n1.key === n2.key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个过程中，首先判断新旧节点是否是相同的 <code>vnode</code> 类型，如果不同，比如一个 <code>div</code> 更新成一个 <code>ul</code>，那么最简单的操作就是删除旧的 <code>div</code> 节点，再去挂载新的 <code>ul</code> 节点</p>\n<p>如果是相同的 <code>vnode</code>，那就要走 <code>diff</code> 更新流程了，接着会根据不同的 <code>vnode</code> 类型执行不同的处理逻辑，这里我们仍然只分析普通元素类型和组件类型的处理过程</p>\n<h4 id=\"处理组件\"><a href=\"#处理组件\" class=\"headerlink\" title=\"处理组件\"></a>处理组件</h4><p>如何处理组件的呢？举个例子，我们在父组件 App 中里引入了 Hello 组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>This is an app.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">hello</span> <span class=\"attr\">:msg</span>=<span class=\"string\">&quot;msg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">hello</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;toggle&quot;</span>&gt;</span>Toggle msg<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"attr\">msg</span>: <span class=\"string\">&#x27;Vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"function\"><span class=\"title\">toggle</span>(<span class=\"params\"></span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">this</span>.msg = <span class=\"built_in\">this</span>.msg ==== <span class=\"string\">&#x27;Vue&#x27;</span>? <span class=\"string\">&#x27;World&#x27;</span>: <span class=\"string\">&#x27;Vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, &#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"attr\">props</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">msg</span>: <span class=\"built_in\">String</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>点击 App 组件中的按钮执行 toggle 函数，就会修改 data 中的 msg，并且会触发 App 组件的重新渲染</p>\n<p>结合前面对渲染流程的分析，这里的 App 组件的根节点是 div，重新渲染的子树 vnode 节点是一个普通元素的 vnode，应该先走 processElement 逻辑，组件的更新最终还是要转换成真实的 DOM 更新<br>而实际上普通元素的处理才是 DOM 的更新<br>和渲染流程相似，更新过程也是一个树的深度优先遍历的过程，更新完当前节点后，就会遍历更新它的子节点，因此在遍历的过程中会遇到 hello 这个 组件 vnode 节点，就会执行到 processComponent 的处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> processComponent = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  anchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n1 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 挂载组件</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新子组件</span></span><br><span class=\"line\">    updateComponent(n1, n2, parentComponent, optimized);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> updateComponent = <span class=\"function\">(<span class=\"params\">n1, n2, parentComponent, optimized</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = (n2.component = n1.component);</span><br><span class=\"line\">  <span class=\"comment\">// 根据新旧子组件 vnode 判断是否需要更新子组件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (shouldUpdateComponent(n1, n2, parentComponent, optimized)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 新的子组件 vnode 赋值给 instance.next</span></span><br><span class=\"line\">    instance.next = n2;</span><br><span class=\"line\">    <span class=\"comment\">// 子组件也可能因为数据变化被添加到更新队列里了，移除它们防止对一个子组件重复更新</span></span><br><span class=\"line\">    invalidateJob(instance.update);</span><br><span class=\"line\">    <span class=\"comment\">// 执行子组件的副作用渲染函数</span></span><br><span class=\"line\">    instance.update();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不需要更新，只复制属性</span></span><br><span class=\"line\">    n2.component = n1.component;</span><br><span class=\"line\">    n2.el = n1.el;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到， <code>processComponent</code> 通过 <code>updateComponent</code> 函数来更新组件，<code>updateComponent</code> 函数在更新子组件的时候，会先执行 <code>shouldUpdateComponent</code> 函数，根据新旧子组件 <code>vnode</code> 来判断是否需要更新子组件<br>如果 <code>shouldUpdateComponent</code> 返回 true， 那么在它的最后先执行<code> invalidateJob（instance.update）</code>避免子组件由于自身数据变化导致的重复更新，然后又执行了子组件的副作用渲染函数 <code>instance.update</code> 来主动触发子组件的更新</p>\n<p>然后再到 <code>setupRenderEffect</code> 函数的 <code>update</code> 逻辑</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新组件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; next, vnode &#125; = instance;</span><br><span class=\"line\"><span class=\"comment\">// next 表示新的组件 vnode</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (next) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 更新组件 vnode 节点信息</span></span><br><span class=\"line\">  updateComponentPreRender(instance, next, optimized);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  next = vnode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> updateComponentPreRender = <span class=\"function\">(<span class=\"params\">instance, nextVNode, optimized</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 新组件 vnode 的 component 属性指向组件实例</span></span><br><span class=\"line\">  nextVNode.component = instance;</span><br><span class=\"line\">  <span class=\"comment\">// 旧组件 vnode 的 props 属性</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> prevProps = instance.vnode.props;</span><br><span class=\"line\">  <span class=\"comment\">// 组件实例的 vnode 属性指向新的组件 vnode</span></span><br><span class=\"line\">  instance.vnode = nextVNode;</span><br><span class=\"line\">  <span class=\"comment\">// 清空 next 属性，为了下一次重新渲染准备</span></span><br><span class=\"line\">  instance.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 更新 props</span></span><br><span class=\"line\">  updateProps(instance, nextVNode.props, prevProps, optimized);</span><br><span class=\"line\">  <span class=\"comment\">// 更新 插槽</span></span><br><span class=\"line\">  updateSlots(instance, nextVNode.children);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>结合上面的代码，我们在更新组件的 <code>DOM</code> 前，需要先更新组件 <code>vnode</code> 节点信息，包括更改组件实例的 <code>vnode</code> 指针、更新 <code>props</code> 和更新插槽等一系列操作，因为组件在稍后执行 <code>renderComponentRoot</code> 时会重新渲染新的子树 <code>vnode</code> ，它依赖了更新后的组件 <code>vnode</code> 中的 <code>props</code> 和 <code>slots</code> 等数据。</p>\n<p>所以我们现在知道了一个组件重新渲染可能会有两种场景，一种是组件本身的数据变化，这种情况下 <code>next</code> 是 <code>null</code>；另一种是父组件在更新的过程中，遇到子组件节点，先判断子组件是否需要更新，如果需要则主动执行子组件的重新渲染方法，这种情况下 <code>next</code> 就是新的子组件 <code>vnode</code></p>\n<p>所以 <code>processComponent</code> 处理组件 <code>vnode</code>，本质上就是去判断子组件是否需要更新，如果需要则递归执行子组件的副作用渲染函数来更新，否则仅仅更新一些 <code>vnode</code> 的属性，并让子组件实例保留对组件 <code>vnode</code> 的引用，用于子组件自身数据变化引起组件重新渲染的时候，在渲染函数内部可以拿到新的组件 <code>vnode</code></p>\n<p>前面也说过，组件是抽象的，组件的更新最终还是会落到对普通 <code>DOM</code> 元素的更新。所以接下来我们详细分析一下组件更新中对普通元素的处理流程</p>\n<h4 id=\"处理普通元素\"><a href=\"#处理普通元素\" class=\"headerlink\" title=\"处理普通元素\"></a>处理普通元素</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> processElement = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  anchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  isSVG = isSVG || n2.type === <span class=\"string\">&quot;svg&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n1 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 挂载元素</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新元素</span></span><br><span class=\"line\">    patchElement(n1, n2, parentComponent, parentSuspense, isSVG, optimized);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> patchElement = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> el = (n2.el = n1.el);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldProps = (n1 &amp;&amp; n1.props) || EMPTY_OBJ;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newProps = n2.props || EMPTY_OBJ;</span><br><span class=\"line\">  <span class=\"comment\">// 更新 props</span></span><br><span class=\"line\">  patchProps(</span><br><span class=\"line\">    el,</span><br><span class=\"line\">    n2,</span><br><span class=\"line\">    oldProps,</span><br><span class=\"line\">    newProps,</span><br><span class=\"line\">    parentComponent,</span><br><span class=\"line\">    parentSuspense,</span><br><span class=\"line\">    isSVG</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">const</span> areChildrenSVG = isSVG &amp;&amp; n2.type !== <span class=\"string\">&quot;foreignObject&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 更新子节点</span></span><br><span class=\"line\">  patchChildren(</span><br><span class=\"line\">    n1,</span><br><span class=\"line\">    n2,</span><br><span class=\"line\">    el,</span><br><span class=\"line\">    <span class=\"literal\">null</span>,</span><br><span class=\"line\">    parentComponent,</span><br><span class=\"line\">    parentSuspense,</span><br><span class=\"line\">    areChildrenSVG</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，更新元素的过程主要做两件事情：更新 <code>props</code> 和更新子节点。其实这是很好理解的，因为一个 <code>DOM</code> 节点元素就是由它自身的一些属性和子节点构成的。</p>\n<p>首先是更新 <code>props</code>，这里的 <code>patchProps</code> 函数就是在更新 <code>DOM</code> 节点的 <code>class、style、event</code> 以及其它的一些 <code>DOM</code> 属性</p>\n<p>其次是更新子节点，我们来看一下这里的 <code>patchChildren</code> 函数的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> patchChildren = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  n2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  anchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized = <span class=\"literal\">false</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c1 = n1 &amp;&amp; n1.children;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> prevShapeFlag = n1 ? n1.shapeFlag : <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> c2 = n2.children;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; shapeFlag &#125; = n2;</span><br><span class=\"line\">  <span class=\"comment\">// 子节点有 3 种可能情况：文本、数组、空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (shapeFlag &amp; <span class=\"number\">8</span> <span class=\"comment\">/* TEXT_CHILDREN */</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevShapeFlag &amp; <span class=\"number\">16</span> <span class=\"comment\">/* ARRAY_CHILDREN */</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 数组 -&gt; 文本，则删除之前的子节点</span></span><br><span class=\"line\">      unmountChildren(c1, parentComponent, parentSuspense);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c2 !== c1) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 文本对比不同，则替换为新文本</span></span><br><span class=\"line\">      hostSetElementText(container, c2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevShapeFlag &amp; <span class=\"number\">16</span> <span class=\"comment\">/* ARRAY_CHILDREN */</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 之前的子节点是数组</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (shapeFlag &amp; <span class=\"number\">16</span> <span class=\"comment\">/* ARRAY_CHILDREN */</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新的子节点仍然是数组，则做完整地 diff</span></span><br><span class=\"line\">        patchKeyedChildren(</span><br><span class=\"line\">          c1,</span><br><span class=\"line\">          c2,</span><br><span class=\"line\">          container,</span><br><span class=\"line\">          anchor,</span><br><span class=\"line\">          parentComponent,</span><br><span class=\"line\">          parentSuspense,</span><br><span class=\"line\">          isSVG,</span><br><span class=\"line\">          optimized</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数组 -&gt; 空，则仅仅删除之前的子节点</span></span><br><span class=\"line\">        unmountChildren(c1, parentComponent, parentSuspense, <span class=\"literal\">true</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 之前的子节点是文本节点或者为空</span></span><br><span class=\"line\">      <span class=\"comment\">// 新的子节点是数组或者为空</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (prevShapeFlag &amp; <span class=\"number\">8</span> <span class=\"comment\">/* TEXT_CHILDREN */</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果之前子节点是文本，则把它清空</span></span><br><span class=\"line\">        hostSetElementText(container, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (shapeFlag &amp; <span class=\"number\">16</span> <span class=\"comment\">/* ARRAY_CHILDREN */</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果新的子节点是数组，则挂载新子节点</span></span><br><span class=\"line\">        mountChildren(</span><br><span class=\"line\">          c2,</span><br><span class=\"line\">          container,</span><br><span class=\"line\">          anchor,</span><br><span class=\"line\">          parentComponent,</span><br><span class=\"line\">          parentSuspense,</span><br><span class=\"line\">          isSVG,</span><br><span class=\"line\">          optimized</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>对于一个元素的子节点 vnode 可能有三种情况：纯文本、vnode 数据 和 空。所以排列组合更新的时候就有 9 种情况</strong></p>\n<ol>\n<li><p>首先来看一下旧子节点是纯文本的情况：</p>\n<ul>\n<li><p>如果新子节点也是纯文本，那么做简单地文本替换即可；</p>\n</li>\n<li><p>如果新子节点是空，那么删除旧子节点即可；</p>\n</li>\n<li><p>如果新子节点是 vnode 数组，那么先把旧子节点的文本清空，再去旧子节点的父容器下添加多个新子节点。</p>\n</li>\n</ul>\n</li>\n<li><p>接下来看一下旧子节点是空的情况：</p>\n<ul>\n<li><p>如果新子节点是纯文本，那么在旧子节点的父容器下添加新文本节点即可；</p>\n</li>\n<li><p>如果新子节点也是空，那么什么都不需要做；</p>\n</li>\n<li><p>如果新子节点是 vnode 数组，那么直接去旧子节点的父容器下添加多个新子节点即可。</p>\n</li>\n</ul>\n</li>\n<li><p>最后来看一下旧子节点是 vnode 数组的情况：</p>\n<ul>\n<li><p>如果新子节点是纯文本，那么先删除旧子节点，再去旧子节点的父容器下添加新文本节点；</p>\n</li>\n<li><p>如果新子节点是空，那么删除旧子节点即可；</p>\n</li>\n<li><p>如果新子节点也是 vnode 数组，那么就需要做完整的 diff 新旧子节点了，这是最复杂的情况，内部运用了核心 diff 算法。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"组件更新：完整的-DOM-diff-流程是怎样的？（下）\"><a href=\"#组件更新：完整的-DOM-diff-流程是怎样的？（下）\" class=\"headerlink\" title=\"组件更新：完整的 DOM diff 流程是怎样的？（下）\"></a>组件更新：完整的 DOM diff 流程是怎样的？（下）</h2><p>在 <code>processElement</code> 中，处理子节点的时候，当前后都是节点数组的时候，就执行核心的 <code>diff</code> 算法</p>\n<p>新子节点数组相对于旧子节点数组的变化，无非是通过更新、删除、添加和移动节点来完成，而核心 diff 算法，就是在已知旧子节点 DOM 结构，vnode 和新子节点 vnode 情况下，以较低的成本完成子节点的更新为目的，求解生成新子节点 DOM 的系列操作</p>\n<h3 id=\"同步头部节点\"><a href=\"#同步头部节点\" class=\"headerlink\" title=\"同步头部节点\"></a>同步头部节点</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> patchKeyedChildren = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentAnchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.length;</span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 3, e2 = 4</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n1 = c1[i];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n2 = c2[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSameVNodeType(n1, n2)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 相同的节点，递归执行 patch 更新节点</span></span><br><span class=\"line\">      patch(</span><br><span class=\"line\">        n1,</span><br><span class=\"line\">        n2,</span><br><span class=\"line\">        container,</span><br><span class=\"line\">        parentAnchor,</span><br><span class=\"line\">        parentComponent,</span><br><span class=\"line\">        parentSuspense,</span><br><span class=\"line\">        isSVG,</span><br><span class=\"line\">        optimized</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在整个 diff 的过程，我们需要维护几个变量：头部索引 <code>i</code>，旧子节点的尾部索引 <code>e1</code> 和新子节点的尾部索引 <code>e2</code></p>\n<p>同步头部节点就是从头部开始，依次对比新节点和旧节点，如果他们相同则执行 patch 更新节点，如果不同或者索引 i 大于索引 e1 或者 e2，则同步过程结束</p>\n<h3 id=\"同步尾部节点\"><a href=\"#同步尾部节点\" class=\"headerlink\" title=\"同步尾部节点\"></a>同步尾部节点</h3><p>接着从尾部开始同步尾部节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> patchKeyedChildren = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentAnchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.length;</span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 3, e2 = 4</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 从尾部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 3, e2 = 4</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) (c d)</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e (c d)</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n1 = c1[e1];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n2 = c2[e2];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSameVNodeType(n1, n2)) &#123;</span><br><span class=\"line\">      patch(</span><br><span class=\"line\">        n1,</span><br><span class=\"line\">        n2,</span><br><span class=\"line\">        container,</span><br><span class=\"line\">        parentAnchor,</span><br><span class=\"line\">        parentComponent,</span><br><span class=\"line\">        parentSuspense,</span><br><span class=\"line\">        isSVG,</span><br><span class=\"line\">        optimized</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    e1--;</span><br><span class=\"line\">    e2--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>同步尾部节点就是从尾部开始，依次对比新节点和旧节点，如果相同的则执行 patch 更新节点，如果不同或者索引 i 大于 e1 或者 e2 则同步过程结束</p>\n<p>接下来有三种情况需要处理：</p>\n<ul>\n<li>新子节点剩余要添加的新节点</li>\n<li>旧子节点剩余要删除的多余节点</li>\n<li>未知子序列</li>\n</ul>\n<h3 id=\"添加新节点\"><a href=\"#添加新节点\" class=\"headerlink\" title=\"添加新节点\"></a>添加新节点</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> patchKeyedChildren = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentAnchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.length;</span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 3, e2 = 4</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 从尾部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 3, e2 = 4</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) (c d)</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e (c d)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 挂载剩余的新节点</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 1, e2 = 2</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &gt; e1) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt;= e2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextPos = e2 + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> anchor = nextPos &lt; l2 ? c2[nextPos].el : parentAnchor;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &lt;= e2) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 挂载新节点</span></span><br><span class=\"line\">        patch(</span><br><span class=\"line\">          <span class=\"literal\">null</span>,</span><br><span class=\"line\">          c2[i],</span><br><span class=\"line\">          container,</span><br><span class=\"line\">          anchor,</span><br><span class=\"line\">          parentComponent,</span><br><span class=\"line\">          parentSuspense,</span><br><span class=\"line\">          isSVG</span><br><span class=\"line\">        );</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果索引 i 大于尾部索引 e1 且小于 e2，那么从索引 i 开始到索引 e2 之间，我们直接挂载子树这部分的节点</p>\n<h3 id=\"删除多余节点\"><a href=\"#删除多余节点\" class=\"headerlink\" title=\"删除多余节点\"></a>删除多余节点</h3><p>如果不满足添加新节点的情况，我们就要接着判断旧子节点是否有剩余，如果满足则删除旧子节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> patchKeyedChildren = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentAnchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.length;</span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 4, e2 = 3</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d e</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) d e</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 从尾部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 4, e2 = 3</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c (d e)</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) (d e)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 普通序列挂载剩余的新节点</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 2, e2 = 1</span></span><br><span class=\"line\">  <span class=\"comment\">// 不满足</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &gt; e1) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 4. 普通序列删除多余的旧节点</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 2, e2 = 1</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &gt; e2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= e1) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 删除节点</span></span><br><span class=\"line\">      unmount(c1[i], parentComponent, parentSuspense, <span class=\"literal\">true</span>);</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果索引 i 大于尾部索引 e2，那么从索引 i 开始到索引 e1 之间，我们直接删除旧子树这部分的节点</p>\n<h3 id=\"处理未知子序列\"><a href=\"#处理未知子序列\" class=\"headerlink\" title=\"处理未知子序列\"></a>处理未知子序列</h3><p>单纯的添加和删除节点都是比较理想的情况，操作起来也很容易，但是有些时候并非这么幸运，我们会遇到比较复杂的未知子序列</p>\n<p>当我们完成前后的移动后，得到中间的两个子序列，记录开始位置 s1 s2</p>\n<h4 id=\"根据-key-建立新子序列的索引图\"><a href=\"#根据-key-建立新子序列的索引图\" class=\"headerlink\" title=\"根据 key 建立新子序列的索引图\"></a>根据 key 建立新子序列的索引图</h4><p>通常我们在开发过程中， 会给 v-for 生成的列表中的每一项分配唯一 key 作为项的唯一的 ID，这个 key 在 diff 过程中起到很关键的作用。对于新旧子序列中的节点，我们认为 key 相同就是同一个节点，直接执行 patch 即可</p>\n<p>根据 key 建立新子序列的索引图</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> patchKeyedChildren = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentAnchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.length;</span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 7, e2 = 7</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d e f g h</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d i g h</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 从尾部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 7, e2 = 7</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d e f (g h)</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d i (g h)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 普通序列挂载剩余的新节点， 不满足</span></span><br><span class=\"line\">  <span class=\"comment\">// 4. 普通序列删除多余的旧节点，不满足</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 4, e2 = 5</span></span><br><span class=\"line\">  <span class=\"comment\">// 旧子序列开始索引，从 i 开始记录</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> s1 = i;</span><br><span class=\"line\">  <span class=\"comment\">// 新子序列开始索引，从 i 开始记录</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> s2 = i; <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// 5.1 根据 key 建立新子序列的索引图 Map&lt;key, index&gt;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keyToNewIndexMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = s2; i &lt;= e2; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextChild = c2[i];</span><br><span class=\"line\">    keyToNewIndexMap.set(nextChild.key, i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新和移除旧节点\"><a href=\"#更新和移除旧节点\" class=\"headerlink\" title=\"更新和移除旧节点\"></a>更新和移除旧节点</h4><p>接下来，我们就需要遍历旧子序列，有相同的节点就通过 patch 更新，并且移除那些不在新子序列中的节点，同时找出需要移动的节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> patchKeyedChildren = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentAnchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.length;</span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 7, e2 = 7</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d e f g h</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d i g h</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 从尾部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 7, e2 = 7</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d e f (g h)</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d i (g h)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 普通序列挂载剩余的新节点，不满足</span></span><br><span class=\"line\">  <span class=\"comment\">// 4. 普通序列删除多余的旧节点，不满足</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 4, e2 = 5</span></span><br><span class=\"line\">  <span class=\"comment\">// 旧子序列开始索引，从 i 开始记录</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> s1 = i;</span><br><span class=\"line\">  <span class=\"comment\">// 新子序列开始索引，从 i 开始记录</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> s2 = i;</span><br><span class=\"line\">  <span class=\"comment\">// 5.1 根据 key 建立新子序列的索引图</span></span><br><span class=\"line\">  <span class=\"comment\">// 5.2 正序遍历旧子序列，找到匹配的节点更新，删除不在新子序列中的节点，判断是否有移动节点</span></span><br><span class=\"line\">  <span class=\"comment\">// 新子序列已更新节点的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> patched = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 新子序列待更新节点的数量，等于新子序列的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> toBePatched = e2 - s2 + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 是否存在要移动的节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> moved = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 用于跟踪判断是否有节点移动</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxNewIndexSoFar = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 这个数组存储新子序列中的元素在旧子序列节点的索引，用于确定最长递增子序列</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newIndexToOldIndexMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(toBePatched);</span><br><span class=\"line\">  <span class=\"comment\">// 初始化数组，每个元素的值都是 0</span></span><br><span class=\"line\">  <span class=\"comment\">// 0 是一个特殊的值，如果遍历完了仍有元素的值为 0，则说明这个新节点没有对应的旧节点</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; toBePatched; i++) newIndexToOldIndexMap[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 正序遍历旧子序列</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = s1; i &lt;= e1; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拿到每一个旧子序列节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevChild = c1[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (patched &gt;= toBePatched) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 所有新的子序列节点都已经更新，剩余的节点删除</span></span><br><span class=\"line\">      unmount(prevChild, parentComponent, parentSuspense, <span class=\"literal\">true</span>);</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 查找旧子序列中的节点在新子序列中的索引</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newIndex = keyToNewIndexMap.get(prevChild.key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newIndex === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 找不到说明旧子序列已经不存在于新子序列中，则删除该节点</span></span><br><span class=\"line\">      unmount(prevChild, parentComponent, parentSuspense, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 更新新子序列中的元素在旧子序列中的索引，这里加 1 偏移，是为了避免 i 为 0 的特殊情况，影响对后续最长递增子序列的求解</span></span><br><span class=\"line\">      newIndexToOldIndexMap[newIndex - s2] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"comment\">// maxNewIndexSoFar 始终存储的是上次求值的 newIndex，如果不是一直递增，则说明有移动</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">        maxNewIndexSoFar = newIndex;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        moved = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 更新新旧子序列中匹配的节点</span></span><br><span class=\"line\">      patch(</span><br><span class=\"line\">        prevChild,</span><br><span class=\"line\">        c2[newIndex],</span><br><span class=\"line\">        container,</span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        parentComponent,</span><br><span class=\"line\">        parentSuspense,</span><br><span class=\"line\">        isSVG,</span><br><span class=\"line\">        optimized</span><br><span class=\"line\">      );</span><br><span class=\"line\">      patched++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"移动和挂载新节点\"><a href=\"#移动和挂载新节点\" class=\"headerlink\" title=\"移动和挂载新节点\"></a>移动和挂载新节点</h4><p>最后我们就要移动和挂载新节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> patchKeyedChildren = <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c1,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  c2,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  container,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentAnchor,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentComponent,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  parentSuspense,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  isSVG,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  optimized</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.length;</span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 6, e2 = 7</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d e f g</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d h f g</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 从尾部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 6, e2 = 7</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c (d e)</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) (d e)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 普通序列挂载剩余的新节点， 不满足</span></span><br><span class=\"line\">  <span class=\"comment\">// 4. 普通序列删除多余的节点，不满足</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 4, e2 = 5</span></span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点开始索引，从 i 开始记录</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> s1 = i;</span><br><span class=\"line\">  <span class=\"comment\">// 新子节点开始索引，从 i 开始记录</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> s2 = i; <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// 5.1 根据 key 建立新子序列的索引图</span></span><br><span class=\"line\">  <span class=\"comment\">// 5.2 正序遍历旧子序列，找到匹配的节点更新，删除不在新子序列中的节点，判断是否有移动节点</span></span><br><span class=\"line\">  <span class=\"comment\">// 5.3 移动和挂载新节点</span></span><br><span class=\"line\">  <span class=\"comment\">// 仅当节点移动时生成最长递增子序列</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> increasingNewIndexSequence = moved</span><br><span class=\"line\">    ? getSequence(newIndexToOldIndexMap)</span><br><span class=\"line\">    : EMPTY_ARR;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> j = increasingNewIndexSequence.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 倒序遍历以便我们可以使用最后更新的节点作为锚点</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = toBePatched - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextIndex = s2 + i;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextChild = c2[nextIndex];</span><br><span class=\"line\">    <span class=\"comment\">// 锚点指向上一个更新的节点，如果 nextIndex 超过新子节点的长度，则指向 parentAnchor</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> anchor = nextIndex + <span class=\"number\">1</span> &lt; l2 ? c2[nextIndex + <span class=\"number\">1</span>].el : parentAnchor;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newIndexToOldIndexMap[i] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 挂载新的子节点</span></span><br><span class=\"line\">      patch(</span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        nextChild,</span><br><span class=\"line\">        container,</span><br><span class=\"line\">        anchor,</span><br><span class=\"line\">        parentComponent,</span><br><span class=\"line\">        parentSuspense,</span><br><span class=\"line\">        isSVG</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (moved) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 没有最长递增子序列（reverse 的场景）或者当前的节点索引不在最长递增子序列中，需要移动</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span> || i !== increasingNewIndexSequence[j]) &#123;</span><br><span class=\"line\">        move(nextChild, container, anchor, <span class=\"number\">2</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 倒序递增子序列</span></span><br><span class=\"line\">        j--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Vue.js 的更新粒度是组件级别的，并且 Vue.js 在 patch 某个组件的时候，如果遇到组件这类抽象节点，在某些条件下也会触发子组件的更新。</p>\n<p>对于普通元素节点的更新，主要是更新一些属性，以及它的子节点。子节点的更新又分为多种情况，其中最复杂的情况为数组到数组的更新，内部又根据不同情况分成几个流程去 diff，遇到需要移动的情况还要去求解子节点的最长递增子序列。</p>\n<p>整个更新过程还是利用了树的深度遍历，递归执行 patch 方法，最终完成了整个组件树的更新。</p>\n","categories":["vue"],"tags":["笔记","vue3"]},{"title":"Documentation","url":"/blog-next/docs/index.html","content":"<h3 id=\"Elegant-and-Powerful-Theme-for-Hexo\"><a href=\"#Elegant-and-Powerful-Theme-for-Hexo\" class=\"headerlink\" title=\"Elegant and Powerful Theme for Hexo\"></a>Elegant and Powerful Theme for Hexo</h3><p>Theme NexT has the following features:</p>\n<ul>\n<li>No jQuery.</li>\n<li>Support <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD1wcmVmZXJzLWNvbG9yLXNjaGVtZQ==\">native dark mode<i class=\"fa fa-external-link-alt\"></i></span>.</li>\n<li>Support Pjax to deliver a fast browsing experience.</li>\n<li>Integrated KaTeX and MathJax mathematical formula rendering.</li>\n<li>Integrated PDF.js and mermaid diagram.</li>\n<li>Support Disqus, Gitalk and Valine comment systems.</li>\n<li>Support a large number of third-party statistics and content sharing services.</li>\n<li>Easy to customize content or modify style.</li>\n</ul>\n<h3 id=\"Four-Schemes-in-One\"><a href=\"#Four-Schemes-in-One\" class=\"headerlink\" title=\"Four Schemes in One\"></a>Four Schemes in One</h3><p>By using different Schemes in NexT, you can simply change the style of your blog, and nearly all options can be used in all schemes.</p>\n<p><img src=\"/images/docs/next-schemes.png\" alt=\"NexT Schemes\" loading=\"lazy\"></p>\n<h3 id=\"Multilingual-Support\"><a href=\"#Multilingual-Support\" class=\"headerlink\" title=\"Multilingual Support\"></a>Multilingual Support</h3><p>Thanks to the contribution of our users and developers, <a href=\"/docs/theme-settings/internationalization.html#Choosing-Language\">NexT now supports over 20 languages</a>.</p>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"/images/docs/en.png\" alt=\"English translation\" loading=\"lazy\"></div><div class=\"group-picture-column\"><img src=\"/images/docs/cn.png\" alt=\"Chinese translation\" loading=\"lazy\"></div><div class=\"group-picture-column\"><img src=\"/images/docs/ru.png\" alt=\"Russian translation\" loading=\"lazy\"></div></div></div>\n\n<h3 id=\"Code-Highlighting-Themes\"><a href=\"#Code-Highlighting-Themes\" class=\"headerlink\" title=\"Code Highlighting Themes\"></a>Code Highlighting Themes</h3><p>NexT uses code highlighting themes from the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oaWdobGlnaHRqcy5vcmcv\">Highlight.js<i class=\"fa fa-external-link-alt\"></i></span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcmlzbWpzLmNvbS8=\">Prism<i class=\"fa fa-external-link-alt\"></i></span> package, and makes <a href=\"/docs/theme-settings/#Codeblock-Style\">more than 90 themes</a> available to you.</p>\n<!-- Inspired by https://github.com/sindresorhus/css-in-readme-like-wat -->\n<table>\n<thead>\n<tr>\n<th align=\"center\">Tomorrow</th>\n<th align=\"center\">Tomorrow Night</th>\n<th align=\"center\">Tomorrow Night Eighties</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><img src=\"/images/docs/tomorrow.svg\" loading=\"lazy\"></td>\n<td align=\"center\"><img src=\"/images/docs/tomorrow-night.svg\" loading=\"lazy\"></td>\n<td align=\"center\"><img src=\"/images/docs/tomorrow-night-eighties.svg\" loading=\"lazy\"></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Tomorrow Night Blue</th>\n<th align=\"center\">Tomorrow Night Bright</th>\n<th align=\"center\">Default</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><img src=\"/images/docs/tomorrow-night-blue.svg\" loading=\"lazy\"></td>\n<td align=\"center\"><img src=\"/images/docs/tomorrow-night-bright.svg\" loading=\"lazy\"></td>\n<td align=\"center\"><img src=\"/images/docs/default.svg\" loading=\"lazy\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"Supported-Browsers\"><a href=\"#Supported-Browsers\" class=\"headerlink\" title=\"Supported Browsers\"></a>Supported Browsers</h3><p>We design NexT to support the latest web browsers. We support the current versions of Chrome, Firefox, Safari, and Microsoft Edge. Many CSS3 and ES6 features are used in theme NexT, including CSS Variables, Destructuring assignment, Arrow functions and Spread operator.</p>\n<table>\n<thead>\n<tr>\n<th>Browser</th>\n<th>Supported versions</th>\n<th>Release date</th>\n<th>Limitation</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><i class=\"fab fa-internet-explorer fa-2x\"></i> IE</td>\n<td>N/A</td>\n<td>Oct 17, 2013</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><i class=\"fab fa-edge-legacy fa-2x\"></i> Edge</td>\n<td>16+</td>\n<td>Oct 17, 2017</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD1jc3MtdmFyaWFibGVz\">CSS Variables<i class=\"fa fa-external-link-alt\"></i></span></td>\n</tr>\n<tr>\n<td><i class=\"fab fa-firefox-browser fa-2x\"></i> Firefox</td>\n<td>41+</td>\n<td>Sep 22, 2015</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD1tZG4tamF2YXNjcmlwdF9vcGVyYXRvcnNfZGVzdHJ1Y3R1cmluZw==\">Destructuring assignment<i class=\"fa fa-external-link-alt\"></i></span></td>\n</tr>\n<tr>\n<td><i class=\"fab fa-chrome fa-2x\"></i> Chrome</td>\n<td>49+</td>\n<td>Mar 3, 2016</td>\n<td>CSS Variables</td>\n</tr>\n<tr>\n<td><i class=\"fab fa-safari fa-2x\"></i> Safari</td>\n<td>10+</td>\n<td>Sep 20, 2016</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD1hcnJvdy1mdW5jdGlvbnM=\">Arrow functions<i class=\"fa fa-external-link-alt\"></i></span></td>\n</tr>\n<tr>\n<td><i class=\"fab fa-opera fa-2x\"></i> Opera</td>\n<td>37+</td>\n<td>May 4, 2016</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD1tZG4tamF2YXNjcmlwdF9vcGVyYXRvcnNfc3ByZWFkX3NwcmVhZF9pbl9hcnJheXM=\">Spread operator<i class=\"fa fa-external-link-alt\"></i></span></td>\n</tr>\n</tbody></table>\n<p>Some other new Web APIs, such as <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD1pbnRlcnNlY3Rpb25vYnNlcnZlcg==\">IntersectionObserver<i class=\"fa fa-external-link-alt\"></i></span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD1mZXRjaA==\">Fetch API<i class=\"fa fa-external-link-alt\"></i></span>, are used by NexT plugins. They are not core functions of NexT, so we have no plans to fix their compatibility issues with legacy browsers.</p>\n<p>In addition, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD1jc3Mtc3RpY2t5\">CSS position: sticky<i class=\"fa fa-external-link-alt\"></i></span> is used for sidebar positioning. On browsers that do not support this property, its fallback style <code>position: static</code> will be used.</p>\n<h3 id=\"Customize-Your-NexT\"><a href=\"#Customize-Your-NexT\" class=\"headerlink\" title=\"Customize Your NexT\"></a>Customize Your NexT</h3><p>NexT have flexible but simple options, and you can make your own blog with built-in third-party support. Now let&#39;s <a href=\"/docs/getting-started/\">get started</a>.</p>\n"},{"title":"categories","url":"/blog-next/categories/index.html","content":""},{"title":"404","url":"/blog-next//404.html","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗</span><br><span class=\"line\">██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝</span><br><span class=\"line\">███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║</span><br><span class=\"line\">╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║</span><br><span class=\"line\">     ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║</span><br><span class=\"line\">     ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">    ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗</span><br><span class=\"line\">    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗</span><br><span class=\"line\">    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║</span><br><span class=\"line\">    ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║</span><br><span class=\"line\">    ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝</span><br><span class=\"line\">    ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝</span><br></pre></td></tr></table></figure>\n"},{"title":"Troubleshooting","url":"/blog-next/docs/troubleshooting.html","content":"<h3 id=\"Quick-Debug-Instructions\"><a href=\"#Quick-Debug-Instructions\" class=\"headerlink\" title=\"Quick Debug Instructions\"></a>Quick Debug Instructions</h3><p><strong>Before submitting an Issue on GitHub, you can follow the steps below to debug:</strong></p>\n<p>If you get an error message from Hexo or your browser:</p>\n<ul>\n<li>If the error comes from a Hexo plugin, such as hexo-enhancer, please submit an Issue to its GitHub repository.</li>\n<li>If the error comes from a third-party service, such as the Gitalk comment system, please submit an Issue to its GitHub repository.</li>\n<li>Otherise, please search in Google / Stackoverflow / GitHub Issues, or report it to us when submitting a new Issue.</li>\n</ul>\n<p>The following steps will help you determine the cause of the problem:</p>\n<ul>\n<li>Execute <code>hexo clean</code>, clear the browser cache and disable all CDN services (e.g. Cloudflare Rocket Loader) - This may take some time to take effect.</li>\n<li>Disable browser plug-ins or use other devices and browsers to test, because bugs may only occur in specific browsers.</li>\n<li>Switch to another theme and check if the bug still exists (e.g. default theme landscape). In other words, prove that this is a bug of NexT, not Hexo.</li>\n<li>Upgrade theme NexT to the latest version.</li>\n<li>Upgrade Hexo and all Hexo plugins to the latest version.</li>\n<li>Upgrade or downgrade Node.js to the latest LTS version.</li>\n<li>Uninstall all non-essential Hexo plugins, or delete <code>node_modules</code> and then reinstall all plugins using <code>npm install --force</code>.</li>\n</ul>\n<p>If you decide to submit an Issue, please answer the following questions based on the Issue template:</p>\n<ul>\n<li>Can you reproduce the problem? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens.</li>\n<li>Did the problem start happening recently or was this always a problem?</li>\n<li>If the problem started happening recently, can you reproduce the problem in an older version of NexT? What&#39;s the most recent version in which the problem doesn&#39;t happen? You can download older versions of NexT from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L3JlbGVhc2Vz\">the releases page<i class=\"fa fa-external-link-alt\"></i></span>.</li>\n<li>Which version of Node, Hexo and NexT are you using? You can get the exact version by running <code>node -v</code>, <code>hexo version</code> in your terminal.</li>\n<li>Which packages do you have installed? You can get that list by copying the output from <code>npm ls --depth 0</code> in Hexo root directory.</li>\n</ul>\n<h3 id=\"Keep-Up-Indentation\"><a href=\"#Keep-Up-Indentation\" class=\"headerlink\" title=\"Keep Up Indentation\"></a>Keep Up Indentation</h3><p>When you edit any YAML configs, always need to keep up indents.<br>Currently, in all Hexo and NexT configuration files parameters uses <strong>2 spaces indents</strong> from parent option.</p>\n<p>For example, we want to change NexT scheme from standart <code>Muse</code> to <code>Gemini</code> and want to use <code>theme_config</code> feature with <a href=\"/docs/getting-started/configuration.html#theme-config\">Alternate Theme Config</a>.</p>\n<div class=\"tabs\" id=\"keep-up-indentation\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#keep-up-indentation-1\">NexT Config →</a></li><li class=\"tab\"><a href=\"#keep-up-indentation-2\">Hexo Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"keep-up-indentation-1\"><p>We open <mark class=\"label primary\">theme config file</mark> and under the «Scheme Settings» section copy next parameters:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Scheme Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"keep-up-indentation-2\"><p>Then we open <mark class=\"label info\">site config file</mark> and paste these parameters under <code>theme_config</code> section:</p>\n<div class=\"tabs\" id=\"2-spaces-indents\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#2-spaces-indents-1\"><mark class=\"label danger\">Nothing Happen</mark></a></li><li class=\"tab\"><a href=\"#2-spaces-indents-2\"><mark class=\"label success\">Working Normally</mark></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"2-spaces-indents-1\"><figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme_config:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Gemini</span></span><br></pre></td></tr></table></figure>\n\n<p>Nothing will happen here because indentation not keeped up. Hexo just can&#39;t read these parameters because subparameters (children parameters of <code>theme_config</code> parameter) does not exist. Let&#39;s see <a href=\"#2-spaces-indents-2\">same configuration with indents</a>.</p></div><div class=\"tab-pane\" id=\"2-spaces-indents-2\"><figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme_config:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\">  <span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\">  <span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\">  <span class=\"attr\">scheme:</span> <span class=\"string\">Gemini</span></span><br></pre></td></tr></table></figure>\n\n<p>And here Hexo can read these parameters as <code>theme_config.scheme: Gemini</code> in same way, as NexT can read <code>scheme: Gemini</code> parameter. So, with 2 spaces indents from parent option(s) Hexo will load all NexT parameters and work fine.</p></div></div></div></div></div></div>\n\n<h3 id=\"Backtick-Code-Block-in-Tags\"><a href=\"#Backtick-Code-Block-in-Tags\" class=\"headerlink\" title=\"Backtick Code Block in Tags\"></a>Backtick Code Block in Tags</h3><p>For Hexo before version 4.0, when backtick code block(s) exists inside other tags (like <code>blockquote</code>, <code>note</code>, <code>tabs</code>), that code block will be generated as «undefined» string in HTML. There are several ways to resolve this:</p>\n<div class=\"tabs\" id=\"backtick-code-block\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#backtick-code-block-1\"><mark class=\"label success\">Tagged Code Block</mark></a></li><li class=\"tab\"><a href=\"#backtick-code-block-2\">HTML tags</a></li><li class=\"tab\"><a href=\"#backtick-code-block-3\">Bugfix for Backtick</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"backtick-code-block-1\"><p>Instead of <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdGFnLXBsdWdpbnMjQmFja3RpY2stQ29kZS1CbG9jaw==\">Backtick Code Block<i class=\"fa fa-external-link-alt\"></i></span> you can also use tagged <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdGFnLXBsdWdpbnMjQ29kZS1CbG9jaw==\">Code Block<i class=\"fa fa-external-link-alt\"></i></span>.<br>But in rare cases standard code block can obtain errors inside other tags.</p></div><div class=\"tab-pane\" id=\"backtick-code-block-2\"><p>Use HTML tags instead of Hexo tags: <code>&lt;pre&gt;&lt;code&gt;</code>.<br>In this case you can&#39;t add code syntax highlighting.</p></div><div class=\"tab-pane\" id=\"backtick-code-block-3\"><p>Here is the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL3B1bGwvMjMyMQ==\">PR with bugfix for backtick code block inside tags<i class=\"fa fa-external-link-alt\"></i></span> (Submitted in 2016, merged three years later).<br>So, upgrade to Hexo 4.0 or later, if you need to use backtick code block inside tags.</p>\n<div class=\"note danger\"><p>Sometimes during generate you can see «<mark class=\"label danger\">Error: Unmatched placeholder remains!</mark>» message.<br>This mean somewhere in your posts, blocks with tags was commented out with <code>{#</code> and <code>#}</code> symbols:</p>\n<div class=\"tabs\" id=\"unmatched-placeholder-remains\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#unmatched-placeholder-remains-1\"><mark class=\"label danger\">Error</mark></a></li><li class=\"tab\"><a href=\"#unmatched-placeholder-remains-2\"><mark class=\"label success\">Success</mark></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"unmatched-placeholder-remains-1\"><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;&#123;#</span><br><span class=\"line\">&#123;% label error@Unmatched placeholder remains! %&#125;</span><br><span class=\"line\">#&#125;&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"unmatched-placeholder-remains-2\"><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">&#123;% label error@Unmatched placeholder remains! %&#125;</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure></div></div></div>\n</div></div></div></div>\n\n<h3 id=\"TOC-Issues\"><a href=\"#TOC-Issues\" class=\"headerlink\" title=\"TOC Issues\"></a>TOC Issues</h3><p>Do not write a skip-level heading in the post. For example, a third-tier heading <code>###</code> followed by a <code>#####</code> is not recommended.<br>See: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2lzc3Vlcy84ODI=\">https://github.com/theme-next/hexo-theme-next/issues/882<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>If you are using <code>hexo-renderer-markdown-it</code>, it&#39;s recommended to install <code>markdown-it-named-headings</code> to make the TOC work correctly.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install markdown-it-named-headings</span><br></pre></td></tr></table></figure>\n<p>See: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2lzc3Vlcy8xMTY4\">https://github.com/theme-next/hexo-theme-next/issues/1168<i class=\"fa fa-external-link-alt\"></i></span><br>Here is the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLXJlbmRlcmVyLW1hcmtkb3duLWl0L3B1bGwvOTA=\">PR with bugfix for default config<i class=\"fa fa-external-link-alt\"></i></span> of <code>hexo-renderer-markdown-it</code> plugin.</p>\n<h3 id=\"Favicon-Set-but-Doesn-39-t-Work\"><a href=\"#Favicon-Set-but-Doesn-39-t-Work\" class=\"headerlink\" title=\"Favicon Set but Doesn&#39;t Work\"></a>Favicon Set but Doesn&#39;t Work</h3><p>Put your <code>favicon</code> under <mark class=\"label info\">site's</mark> <code>source</code> dir. If you find that your Favicon doesn&#39;t work, please clean your browser&#39;s cache first and then visit your Favicon&#39;s URL directly, which should be <code>http(s)://your-domain.com/favicon.ico</code>.</p>\n<div class=\"note warning\"><p>If your site is in a subdirectory please set it to <code>favicon: favicon.ico</code>.</p>\n</div>\n"},{"title":"tags","url":"/blog-next/tags/index.html","content":""},{"title":"Plugins","url":"/blog-next/plugins/index.html","content":"<h3 id=\"Hexo-Plugins\"><a href=\"#Hexo-Plugins\" class=\"headerlink\" title=\"Hexo Plugins\"></a>Hexo Plugins</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by1nZW5lcmF0b3Itc2VhcmNoZGI=\">hexo-generator-searchdb<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by1maWx0ZXItZW1vamk=\">hexo-filter-emoji<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by1wYW5ndQ==\">hexo-pangu<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by1maWx0ZXItbWF0aGpheA==\">hexo-filter-mathjax<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by13b3JkLWNvdW50ZXI=\">hexo-word-counter<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"NexT-Plugins\"><a href=\"#NexT-Plugins\" class=\"headerlink\" title=\"NexT Plugins\"></a>NexT Plugins</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by1uZXh0LXRocmVl\">hexo-next-three<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by1uZXh0LWZpcmV3b3Jrcw==\">hexo-next-fireworks<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by1uZXh0LWV4aWY=\">hexo-next-exif<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<hr>\n<ul>\n<li>Visit the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvYXdlc29tZS1uZXh0\">Awesome NexT<i class=\"fa fa-external-link-alt\"></i></span> list for more plugins.</li>\n</ul>\n"},{"title":"Deployment","url":"/blog-next/docs/getting-started/deployment.html","content":"<h3 id=\"Local-Deployment\"><a href=\"#Local-Deployment\" class=\"headerlink\" title=\"Local Deployment\"></a>Local Deployment</h3><ol>\n<li>Modify files locally.</li>\n<li>Localization testing: <code>hexo clean &amp;&amp; hexo s</code>.</li>\n<li>Deployment: <code>hexo g -d</code>.</li>\n</ol>\n<div class=\"note warning\"><p>For NexT version prior to 8.0.0, the core plugins are placed in the <code>lib</code> directory. If you are using macOS with <code>hexo-deployer-git</code>, make sure that <code>lib/</code> directory is not ignored by git (e.g. check <code>~/.gitignore_global</code>). Otherwise some necessary files may be missing after the deployment.</p>\n</div>\n\n<h3 id=\"Continuous-Integration\"><a href=\"#Continuous-Integration\" class=\"headerlink\" title=\"Continuous Integration\"></a>Continuous Integration</h3><ul>\n<li>Edit the file directly online, effective immediately</li>\n<li>Automatic deployment, simultaneous deployment to multiple locations</li>\n</ul>\n<h4 id=\"Netlify\"><a href=\"#Netlify\" class=\"headerlink\" title=\"Netlify\"></a>Netlify</h4><p>Netlify is an all-in-one platform for automating modern web projects. Replace your hosting infrastructure, continuous integration, and deployment pipeline with a single workflow. Integrate dynamic functionality like serverless functions, user authentication, and form handling as your projects grow.</p>\n<p>Perhaps you have already found that this website is deployed on Netlify. Checkout <code>deploy.sh</code> and <code>netlify.toml</code> in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvdGhlbWUtbmV4dC1kb2Nz\">theme-next-docs<i class=\"fa fa-external-link-alt\"></i></span> repository for more information.</p>\n<h4 id=\"GitHub-Actions\"><a href=\"#GitHub-Actions\" class=\"headerlink\" title=\"GitHub Actions\"></a>GitHub Actions</h4><p>This Github Action automating Hexo deployment workflow, to allow you to leverage GitHub Actions to publish your Hexo site on Github Pages: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NtYTExYmxhY2svaGV4by1hY3Rpb24=\">hexo-action<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<h4 id=\"Travis-CI\"><a href=\"#Travis-CI\" class=\"headerlink\" title=\"Travis CI\"></a>Travis CI</h4><p>Travis CI enables your team to test and ship your apps with confidence. It&#39;s built for everyone and for projects and teams of all sizes, supporting over 20 different languages out of the box, including Javascript and Node.js, Ruby, PHP, Python, Mac/iOS, as well as Docker, while giving you full control over the build environment to customize it to your own needs.</p>\n<div class=\"tabs\" id=\"travis-ci\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#travis-ci-1\">Get permissions →</a></li><li class=\"tab\"><a href=\"#travis-ci-2\">Configure <code>.travis.yml</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"travis-ci-1\"><p>There are two ways to obtain the necessary permissions for Travis CI. Deploy Key has the advantage of high security, while Access Token has the advantage of being more flexible.</p>\n<div class=\"tabs\" id=\"get-permissions\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#get-permissions-1\">Access Token</a></li><li class=\"tab\"><a href=\"#get-permissions-2\">Deploy Key</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"get-permissions-1\"><p>This method applies to a warehouse with a private Submodule</p>\n<ul>\n<li>Create an empty branch of <code>source</code> in the repository where the blog source is hosted.</li>\n<li>Get the Access Token: Settings → Developer settings → Personal access token → Generate new token. Set access rights according to the actual situation. It should be noted that the access token is only displayed once on this page, and it should be copied, otherwise it can only be regenerated.</li>\n<li>Use github account to log in to <span class=\"exturl\" data-url=\"aHR0cHM6Ly90cmF2aXMtY2kuY29tLw==\">Travis CI website<i class=\"fa fa-external-link-alt\"></i></span>. You can find the warehouses in the current github account, select the warehouses to be deployed, and then click setting. Fill in the personal access token generated by github and select the branch that the warehouse needs to be monitored by Travis.</li>\n</ul></div><div class=\"tab-pane\" id=\"get-permissions-2\"><p>Deploy key is a SSH key set in your repo to grant client read-only (as well as r/w, if you want) access to your repo. This method is suitable for most public blog repositories and there are no private sub-modules in the repositories.</p>\n<ul>\n<li><p>Create an empty branch of <code>source</code> in the repository where the blog source is hosted.</p>\n</li>\n<li><p>Generate a ssh key</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -b 4096 -C &quot;&#123;email&#125;&quot; -f ~/.ssh/deploy_key</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Add the deployment public key in your repo, and delete it</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ rm -f deploy_key.pub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Use the Travis command to encrypt private key, and add it to git</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gem install travis</span><br><span class=\"line\">$ travis login</span><br><span class=\"line\">$ travis encrypt deploy_key</span><br><span class=\"line\">$ rm -f deploy_key</span><br><span class=\"line\">$ git add deploy_key.enc</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul></div></div></div></div><div class=\"tab-pane\" id=\"travis-ci-2\"><figure class=\"highlight yml\"><figcaption><span>hexo/.travis.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dist:</span> <span class=\"string\">trusty</span></span><br><span class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"string\">required</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">addons:</span></span><br><span class=\"line\"> <span class=\"attr\">ssh_known_hosts:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">github.com</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">git.coding.net</span></span><br><span class=\"line\"> <span class=\"attr\">apt:</span></span><br><span class=\"line\">   <span class=\"attr\">packages:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">nasm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"> <span class=\"attr\">global:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Tokyo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span> <span class=\"string\">node</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\"> <span class=\"attr\">only:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"string\">source</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">git:</span></span><br><span class=\"line\"> <span class=\"attr\">depth:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> <span class=\"attr\">submodules:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\"> <span class=\"attr\">apt:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> <span class=\"attr\">npm:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">before_install:</span></span><br><span class=\"line\"> <span class=\"comment\"># Git Config</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">sed</span> <span class=\"string\">-i</span> <span class=\"string\">&#x27;s/git@github.com:/https:\\/\\/github.com\\//&#x27;</span> <span class=\"string\">.gitmodules</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">&quot;YOUR-GITHUB-NAME&quot;</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">&quot;YOUR-EMAIL&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># Restore last modified time</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">&quot;git ls-files -z | while read -d &#x27;&#x27; path; do touch -d \\&quot;$(git log -1 --format=\\&quot;@%ct\\&quot; \\&quot;$path\\&quot;)\\&quot; \\&quot;$path\\&quot;; done&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># Submodules</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">submodule</span> <span class=\"string\">update</span> <span class=\"string\">--recursive</span> <span class=\"string\">--remote</span> <span class=\"string\">--init</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># Deploy history</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">clone</span> <span class=\"string\">--branch=master</span> <span class=\"string\">--single-branch</span> <span class=\"string\">YOUR-BLOG-REPO</span> <span class=\"string\">.deploy_git</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># SSH Setup</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">openssl</span> <span class=\"string\">aes-256-cbc</span> <span class=\"string\">-K</span> <span class=\"string\">$encrypted_693585a97b8c_key</span> <span class=\"string\">-iv</span> <span class=\"string\">$encrypted_693585a97b8c_iv</span> <span class=\"string\">-in</span> <span class=\"string\">deploy_key.enc</span> <span class=\"string\">-out</span> <span class=\"string\">deploy_key</span> <span class=\"string\">-d</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">eval</span> <span class=\"string\">&quot;$(ssh-agent -s)&quot;</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"number\">600</span> <span class=\"string\">./deploy_key</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">ssh-add</span> <span class=\"string\">./deploy_key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">install:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">before_script:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">g</span> <span class=\"string\">-d</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h4 id=\"Gitlab-CI\"><a href=\"#Gitlab-CI\" class=\"headerlink\" title=\"Gitlab CI\"></a>Gitlab CI</h4><p>GitLab offers a continuous integration service and pages service. If you add a <code>.gitlab-ci.yml</code> file to the root directory of your repository, and configure your GitLab project to use a Runner, then each commit or push, triggers your CI pipeline. The <code>.gitlab-ci.yml</code> file tells the GitLab runner what to do. By default it runs a pipeline with three stages: build, test, and deploy. You don&#39;t need to use all three stages; stages with no jobs are simply ignored. And at the end, your websites will be published on GitLab Host automatically.</p>\n<ol>\n<li>Add <code>.gitlab-ci.yml</code> to the root directory of your repository, and configure it. <figure class=\"highlight yml\"><figcaption><span>hexo/.gitlab-ci.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">image:</span> <span class=\"string\">node:lts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">before_script:</span></span><br><span class=\"line\">  <span class=\"comment\"># Set TimeZone, eg: Asia/Shanghai</span></span><br><span class=\"line\">  <span class=\"comment\"># - export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\"># Restore last modified time</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;git ls-files -z | while read -d &#x27;&#x27; path; do touch -d \\&quot;$(git log -1 --format=\\&quot;@%ct\\&quot; \\&quot;$path\\&quot;)\\&quot; \\&quot;$path\\&quot;; done&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">pages:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">node_modules/</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">npx</span> <span class=\"string\">hexo</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">artifacts:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">public</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure></li>\n<li>Upload <code>scaffolds</code>, <code>source</code>, <code>themes</code>, <code>.gitignor</code>, <code>.gitlab-ci.yml</code>, <code>_config.yml</code>, and <code>package.json</code> to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWIuY29tLw==\">your Gitlab repository<i class=\"fa fa-external-link-alt\"></i></span>. <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git init</span><br><span class=\"line\">$ ssh -T git@gitlab.com</span><br><span class=\"line\">$ git remote add origin YOUR-GITLAB-REPO-SSH-LINK</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m &quot;COMMIT MESSAGE&quot;</span><br><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>Now, your static website is available at <code>https://yourname.gitlab.io/project</code> that is similar to GitHub. <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRsYWIuY29tL2hlbHAvdXNlci9wcm9qZWN0L3BhZ2VzL2luZGV4Lm1k\">More GitLab Pages config in here<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<p>Of course, you can also pulish static website on GitHub Pages or others pages service. There are two ways to configure <code>.gitlab-ci.yml</code>:</p>\n<div class=\"tabs\" id=\"gitlab-ci\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#gitlab-ci-1\"><code>HTTPS</code></a></li><li class=\"tab\"><a href=\"#gitlab-ci-2\"><code>SSH</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"gitlab-ci-1\"><ul>\n<li>Get the Access Token: <code>Settings</code> → <code>Developer settings</code> → <code>Personal access token</code> → <code>Generate new token</code>. Set access rights according to the actual situation. It should be noted that the access token is only displayed once on this page, and it should be copied, otherwise it can only be regenerated.</li>\n<li>Click <code>SETTINGS-CI/CD → Variables</code> in Gitlab, and defined access token as custom variable <code>GITHUB_ACCESS_TOKEN</code>. Or set <code>USERNAME</code> <code>PASSWORD</code> variable for coding repo.</li>\n<li>Configure <code>.gitlab-ci.yml</code>: <strong>only add deploy stage at the end of this file</strong>  <figure class=\"highlight yml\"><figcaption><span>hexo/.gitlab-ci.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">github:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">./public</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">init</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">&quot;YOUR-USER-NAME&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">&quot;YOUR-EMAIL&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">&quot;gitlab-auto-deploy&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">--force</span> <span class=\"string\">--quiet</span> <span class=\"string\">--set-upstream</span> <span class=\"string\">https://$GITHUB_ACCESS_TOKEN@github.com/username/username.github.io.git</span> <span class=\"string\">master</span> <span class=\"comment\"># replace github_access_token</span></span><br><span class=\"line\">  <span class=\"comment\"># - git config http.postBuffer 524288000</span></span><br><span class=\"line\">  <span class=\"comment\"># - git push --force --quiet --set-upstream https://$USERNAME:$PASSWORD@git.coding.net/username/reponame.git master # replace username &amp; password, please escape the password</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul></div><div class=\"tab-pane\" id=\"gitlab-ci-2\"><p>Deploy key is a SSH key set in your repo to grant client read-only (as well as r/w, if you want) access to your repo. This method is suitable for most public blog repositories and there are no private sub-modules in the repositories.</p>\n<ul>\n<li><p>Generate a deploy key</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -b 4096 -C &quot;&#123;email&#125;&quot; -f ~/.ssh/deploy_key</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Click <code>SETTINGS-CI/CD → Variables</code> in Gitlab, copy the content of private key and defined it as custom variable <code>DEPLOY_PRIVATE_KEY</code>.</p>\n</li>\n<li><p>Configure <code>.gitlab-ci.yml</code>: <strong>only update script in <code>before_script</code></strong></p>\n  <figure class=\"highlight yml\"><figcaption><span>hexo/.gitlab-ci.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">before_script:</span></span><br><span class=\"line\">  <span class=\"comment\"># Set TimeZone, eg: Asia/Shanghai</span></span><br><span class=\"line\">  <span class=\"comment\"># - export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">&quot;YOUR-USER-NAME&quot;</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">&quot;YOUR-EMAIL&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Restore last modified time</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;git ls-files -z | while read -d &#x27;&#x27; path; do touch -d \\&quot;$(git log -1 --format=\\&quot;@%ct\\&quot; \\&quot;$path\\&quot;)\\&quot; \\&quot;$path\\&quot;; done&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># Install ssh-agent if not already installed, it is required by Docker.</span></span><br><span class=\"line\">  <span class=\"comment\"># (change apt-get to yum if you use a CentOS-based image)</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&#x27;which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\"># Run ssh-agent (inside the build environment)</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">eval</span> <span class=\"string\">$(ssh-agent</span> <span class=\"string\">-s)</span></span><br><span class=\"line\">  <span class=\"comment\"># Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ssh-add</span> <span class=\"string\">&lt;(echo</span> <span class=\"string\">&quot;$DEPLOY_PRIVATE_KEY&quot;</span><span class=\"string\">)</span></span><br><span class=\"line\">  <span class=\"comment\"># For Docker builds disable host key checking. Be aware that by adding that</span></span><br><span class=\"line\">  <span class=\"comment\"># you are suspectible to man-in-the-middle attacks.</span></span><br><span class=\"line\">  <span class=\"comment\"># WARNING: Use this only with the Docker executor, if you use it with shell</span></span><br><span class=\"line\">  <span class=\"comment\"># you will overwrite your user&#x27;s SSH config.</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">mkdir</span> <span class=\"string\">-p</span> <span class=\"string\">~/.ssh</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&#x27;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\\n\\tStrictHostKeyChecking no\\n\\n&quot; &gt; ~/.ssh/config&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\"># In order to properly check the server&#x27;s host key, assuming you created the</span></span><br><span class=\"line\">  <span class=\"comment\"># SSH_SERVER_HOSTKEYS variable previously, uncomment the following two lines</span></span><br><span class=\"line\">  <span class=\"comment\"># instead.</span></span><br><span class=\"line\">  <span class=\"comment\"># - mkdir -p ~/.ssh</span></span><br><span class=\"line\">  <span class=\"comment\"># - &#x27;[[ -f /.dockerenv ]] &amp;&amp; echo &quot;$SSH_SERVER_HOSTKEYS&quot; &gt; ~/.ssh/known_hosts&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Install pandoc, eg: v1.19.2.1</span></span><br><span class=\"line\">  <span class=\"comment\"># - wget https://github.com/jgm/pandoc/releases/download/1.19.2.1/pandoc-1.19.2.1-1-amd64.deb</span></span><br><span class=\"line\">  <span class=\"comment\"># - dpkg -i ./pandoc-1.19.2.1-1-amd64.deb</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">image:</span> <span class=\"string\">node:lts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">pages:</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">node_modules/</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">npx</span> <span class=\"string\">hexo</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">artifacts:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">public</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul></div></div></div>\n\n<div class=\"note danger\"><p>Variables are not masked, and their values can be shown in the job logs if explicitly asked to do so. So make sure gitlab pipelines can only be viewed by yourself.</p>\n</div>\n"},{"title":"Getting Started","url":"/blog-next/docs/getting-started/index.html","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo<i class=\"fa fa-external-link-alt\"></i></span> is a fast and powerful static blog generating framework, it&#39;s based on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnLw==\">Node.js<i class=\"fa fa-external-link-alt\"></i></span>. By using Hexo you can write articles easily with Markdown, and besides the grammer of Markdown, you can also use <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdGFnLXBsdWdpbnM=\">tag plugins<i class=\"fa fa-external-link-alt\"></i></span> provided by Hexo to insert special formated content simply. In this page we assume you have installed Hexo and created a site with it.</p>\n<div class=\"note info\"><p>You can visit <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">Hexo Docs<i class=\"fa fa-external-link-alt\"></i></span> to see how to install Hexo. Make sure that the version of Node.js and Hexo in the environment is higher than <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0I3JlYWRtZQ==\">the minimum requirements<i class=\"fa fa-external-link-alt\"></i></span> of the NexT theme, and then continue with the following steps.</p>\n</div>\n\n<h3 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h3><p>There are two main configuration files using by Hexo and both called <code>_config.yml</code>:</p>\n<ol>\n<li>The first one is under <mark class=\"label info\">site root directory</mark>, which contains Hexo&#39;s config.</li>\n<li>The second one is under <mark class=\"label primary\">theme root directory</mark>, which is provided by NexT and contains theme&#39;s config.</li>\n</ol>\n<p>Let&#39;s call the first one – <mark class=\"label info\">site config file</mark>, and the second one – <mark class=\"label primary\">theme config file</mark>.<br>However, we do not recommend directly modifying the <mark class=\"label primary\">theme config file</mark>. It is quite often running into conflict status when updating NexT theme via <code>git pull</code>, or need to merge configurations manually when upgrading to new releases. For Hexo 5.0 or later, the theme can be installed through npm and it is also difficult to modify the <mark class=\"label primary\">theme config file</mark> in <code>node_modules</code>.</p>\n<p>In order to resolve this issue, we recommend using the <a href=\"/docs/getting-started/configuration.html\">Alternate Theme Config</a> feature to configure theme NexT.</p>\n<h3 id=\"NexT-Installation\"><a href=\"#NexT-Installation\" class=\"headerlink\" title=\"NexT Installation\"></a>NexT Installation</h3><p>It&#39;s easy to install Hexo theme: you can just download the NexT theme, copy the theme folder to the <code>themes</code> directory under <mark class=\"label info\">site root directory</mark> and specify in <mark class=\"label info\">site config file</mark> your <mark class=\"label primary\">theme root directory</mark>. The detailed steps are as follows:</p>\n<h4 id=\"Downloading-NexT\"><a href=\"#Downloading-NexT\" class=\"headerlink\" title=\"Downloading NexT\"></a>Downloading NexT</h4><div class=\"tabs\" id=\"downloading-next\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#downloading-next-1\">Using <code>npm</code></a></li><li class=\"tab\"><a href=\"#downloading-next-2\">Using <code>git</code></a></li><li class=\"tab\"><a href=\"#downloading-next-3\">Download zip</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"downloading-next-1\"><p>If you&#39;re using Hexo 5.0 or later, the simplest way to install is through npm.</p>\n<p>Open your Terminal, change to Hexo <mark class=\"label info\">site root directory</mark> and install NexT theme:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ npm install hexo-theme-next</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"downloading-next-2\"><p>If you know about <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS8=\">Git<i class=\"fa fa-external-link-alt\"></i></span>, you can clone the whole repository and update it in any time with <code>git pull</code> command instead of downloading archive manually.</p>\n<p>Open your terminal, change to Hexo <mark class=\"label info\">site root directory</mark> and clone the latest master branch of NexT theme:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"downloading-next-3\"><ol>\n<li>Go to NexT version <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L3JlbGVhc2Vz\">Release Page<i class=\"fa fa-external-link-alt\"></i></span>.</li>\n<li>Choose the version you need and download the Source Code (zip) in the Download section. For example v8.0.0.</li>\n<li>Extract the zip file to site&#39;s themes directory and rename the extracted folder (<code>hexo-theme-next-8.0.0</code>) to <code>next</code>.</li>\n</ol></div></div></div>\n\n<div class=\"note primary\"><p>You can also read <a href=\"/docs/getting-started/installation.html\">detailed installation instructions</a> if you want any other installation variant.</p>\n</div>\n\n<div class=\"note warning\"><p>If you are still using NexT version 5, you can read <a href=\"/docs/getting-started/update-from-v5.html\">instructions for update from v5 to v8</a>.</p>\n</div>\n\n<h4 id=\"Enabling-NexT\"><a href=\"#Enabling-NexT\" class=\"headerlink\" title=\"Enabling NexT\"></a>Enabling NexT</h4><p>Like all Hexo themes, after you download it, open <mark class=\"label info\">site config file</mark>, find <code>theme</code> section, and change its value to <code>next</code> (or another theme directory name).</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n\n<p>Now you have installed NexT theme and enabled it. The following steps will help you verify whether NexT is enabled correctly.</p>\n<h4 id=\"Checking-NexT\"><a href=\"#Checking-NexT\" class=\"headerlink\" title=\"Checking NexT\"></a>Checking NexT</h4><p>It&#39;s recommended to use <code>hexo clean</code> to clean Hexo&#39;s cache first.<br>Then start Hexo local server with debug parameter (by adding <code>--debug</code>), the whole command is <code>hexo s --debug</code>. You can see the output while running, and if you find problem, you can use the output to help others locate error better. When it prints:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n\n<p>Now you can open <code>http://localhost:4000</code> in your browser, and check whether the site works correctly.</p>\n<div class=\"note success\"><p>If you find your site looks like this picture, you have installed it correctly. That&#39;s default NexT scheme – Muse.<br><img src=\"/images/docs/next-default-scheme.png\" alt=\"Default Scheme – Muse\" loading=\"lazy\"></p>\n</div>\n\n<h3 id=\"Hexo-Configuration\"><a href=\"#Hexo-Configuration\" class=\"headerlink\" title=\"Hexo Configuration\"></a>Hexo Configuration</h3><p>The following settings in <mark class=\"label info\">site config file</mark> are very helpful for optimizing your website.</p>\n<h4 id=\"Configuring-Author\"><a href=\"#Configuring-Author\" class=\"headerlink\" title=\"Configuring Author\"></a>Configuring Author</h4><p>Edit <mark class=\"label info\">site config file</mark> and set the value of <code>author</code> to your nickname.</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">author:</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Configuring-Description\"><a href=\"#Configuring-Description\" class=\"headerlink\" title=\"Configuring Description\"></a>Configuring Description</h4><p>Edit <mark class=\"label info\">site config file</mark> and set the value of <code>description</code> to your description, which can be a sentence you like.</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">description:</span></span><br></pre></td></tr></table></figure>\n\n<p>After that we can <a href=\"/docs/getting-started/deployment.html\">configure deployment</a>.</p>\n<p>If everything is OK, in next steps we will change some settings including <a href=\"/docs/theme-settings/\">personalization</a> and <a href=\"/docs/third-party-services/\">third-party services integration</a>.</p>\n"},{"title":"Configuration","url":"/blog-next/docs/getting-started/configuration.html","content":"<p>How to configure Hexo and NexT? The traditional approach is to store some options in <mark class=\"label info\">site config file</mark> and other options in <mark class=\"label primary\">theme config file</mark>. This approach is applicable, but it is not smooth to update NexT theme from pulling or downloading new releases.</p>\n<p>At present, NexT encourages users to use the Alternate Theme Config. It&#39;s a feature of Hexo and the documentation is here: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvY29uZmlndXJhdGlvbi5odG1sI1VzaW5nLWFuLUFsdGVybmF0ZS1Db25maWc=\">Hexo Configuration<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<p>This tutorial shows you how to configure NexT using Alternate Theme Config. Please choose only one of the following solutions and resume next steps.</p>\n<h3 id=\"config-name-yml\"><a href=\"#config-name-yml\" class=\"headerlink\" title=\"_config.[name].yml\"></a><code>_config.[name].yml</code></h3><p>With this way, all your configurations locate in config file <code>/_config.[name].yml</code>. Replace <code>[name]</code> with the value of <code>theme</code> option in <mark class=\"label info\">site config file</mark>, e.g. <code>next</code>.</p>\n<h4 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h4><ol>\n<li>Please ensure you are using Hexo 5.0 (or later).</li>\n<li>Create a config file in site&#39;s root directory, e.g. <code>_config.next.yml</code>.</li>\n<li>Copy needed NexT theme options from <mark class=\"label primary\">theme config file</mark> into this config file. If it is the first time to install NexT, then copy the whole configuration file by the following command: <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Installed through npm</span></span><br><span class=\"line\">cp node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br><span class=\"line\"><span class=\"comment\"># Installed through Git</span></span><br><span class=\"line\">cp theme/next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"theme-config\"><a href=\"#theme-config\" class=\"headerlink\" title=\"theme_config\"></a><code>theme_config</code></h3><p>With this way, all your configurations locate in main <mark class=\"label info\">site config file</mark>. You don&#39;t need to edit <mark class=\"label primary\">theme config file</mark> or create any new files. But you need to <strong><a href=\"/docs/troubleshooting.html#Keep-Up-Indentation\">keep up indentation</a></strong> within <code>theme_config</code> option.</p>\n<h4 id=\"Usage-1\"><a href=\"#Usage-1\" class=\"headerlink\" title=\"Usage\"></a>Usage</h4><ol>\n<li>Please confirm that the <code>/source/_data/next.yml</code> file does not exist (backup and delete it if exists).</li>\n<li>Copy needed NexT theme options from <mark class=\"label primary\">theme config file</mark> into <mark class=\"label info\">site config file</mark>, then<br> 2.1. Move all this settings to the right with two spaces (in Visual Studio Code: select all strings, <kbd>CTRL</kbd> + <kbd>]</kbd>).<br> 2.2. Add <code>theme_config:</code> parameter above all this settings.</li>\n</ol>\n<h3 id=\"next-yml-Deprecated\"><a href=\"#next-yml-Deprecated\" class=\"headerlink\" title=\"next.yml (Deprecated)\"></a><code>next.yml</code> (Deprecated)</h3><p>Older versions of NexT theme also provide another configuration method, which is to place the theme configuration in the <code>/source/_data/next.yml</code> file. This method is deprecated, please use <code>_config.next.yml</code> instead. If the <code>/source/_data/next.yml</code> file exists, move it to the Hexo root directory and rename it to <code>_config.next.yml</code>.</p>\n"},{"title":"Installation","url":"/blog-next/docs/getting-started/installation.html","content":"<h3 id=\"Go-to-Hexo-dir\"><a href=\"#Go-to-Hexo-dir\" class=\"headerlink\" title=\"Go to Hexo dir\"></a>Go to Hexo dir</h3><p>Change dir to <mark class=\"label info\">site root directory</mark>. There must be <code>node_modules</code>, <code>source</code>, <code>themes</code> and other directories:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">_config.yml  node_modules  package.json  public  scaffolds  <span class=\"built_in\">source</span>  themes</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Select-Version\"><a href=\"#Select-Version\" class=\"headerlink\" title=\"Select Version\"></a>Select Version</h3><p>A new version of NexT will be released every month. You can choose to install the latest version or choose a stable old version.</p>\n<div class=\"tabs\" id=\"download-next\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#download-next-1\"><mark class=\"label success\">Latest Master Branch</mark></a></li><li class=\"tab\"><a href=\"#download-next-2\">Latest Release Version</a></li><li class=\"tab\"><a href=\"#download-next-3\">Specific Release Version</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"download-next-1\"><p><strong>Option 1: Download the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L2FyY2hpdmUvbWFzdGVyLnppcA==\">Latest Master Branch<i class=\"fa fa-external-link-alt\"></i></span></strong></p>\n<p>May be <strong>unstable</strong>, but includes <strong>latest features</strong>. At most cases useful and recommended for advanced users and for developers.</p></div><div class=\"tab-pane\" id=\"download-next-2\"><p><strong>Option 2: Download the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L3JlbGVhc2VzL2xhdGVzdA==\">Latest Release Version<i class=\"fa fa-external-link-alt\"></i></span></strong></p>\n<p>At most cases <strong>stable</strong>. Recommended for beginners.</p></div><div class=\"tab-pane\" id=\"download-next-3\"><p><strong>Option 3: Download the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L3JlbGVhc2Vz\">Specific Release Version<i class=\"fa fa-external-link-alt\"></i></span></strong></p>\n<p>In rare cases useful, but not recommended.<br>You must define version. Let&#39;s take <code>v8.0.0</code> as an example. Replace it with any version from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L3RhZ3M=\">tags list<i class=\"fa fa-external-link-alt\"></i></span>.</p></div></div></div>\n\n<h3 id=\"Get-NexT\"><a href=\"#Get-NexT\" class=\"headerlink\" title=\"Get NexT\"></a>Get NexT</h3><p>There are <strong>3 ways</strong> to download NexT: <code>npm</code>, <code>git</code> and download zip from GitHub. You need to <strong>choose only one</strong> of them.</p>\n<h4 id=\"Using-npm\"><a href=\"#Using-npm\" class=\"headerlink\" title=\"Using npm\"></a>Using <code>npm</code></h4><p>If you&#39;re using Hexo 5.0 or later, you can install <code>hexo-theme-next</code> through npm.</p>\n<div class=\"tabs\" id=\"using-npm\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#using-npm-1\">Latest Release Version</a></li><li class=\"tab\"><a href=\"#using-npm-2\">Specific Release Version</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"using-npm-1\"><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-theme-next@latest</span><br></pre></td></tr></table></figure>\n\n<p>This variant will install the <strong>latest release version</strong>.</p></div><div class=\"tab-pane\" id=\"using-npm-2\"><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-theme-next@8.0.0</span><br></pre></td></tr></table></figure>\n\n<p>This variant will install the <strong>specific release version</strong>.</p></div></div></div>\n\n<h4 id=\"Using-git\"><a href=\"#Using-git\" class=\"headerlink\" title=\"Using git\"></a>Using <code>git</code></h4><div class=\"tabs\" id=\"using-git\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#using-git-1\">Latest Master Branch</a></li><li class=\"tab\"><a href=\"#using-git-2\">Specific Release Version</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"using-git-1\"><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>Or download via mirror on GitLab:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://gitlab.com/hexo-theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>This variant will install the <strong>whole repository</strong> (with <code>.git</code> directory inside).<br>And in any time you can update current version with git (instructions below) and switch to any tagged release or on latest master or any other branch.</p>\n<p>Get tags list:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">$ git tag -l</span><br><span class=\"line\">...</span><br><span class=\"line\">v8.0.0-rc.1</span><br><span class=\"line\">v8.0.0-rc.2</span><br><span class=\"line\">v8.0.0-rc.3</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>For example, you want to switch on <code>v8.0.0</code> tagged release version. Input the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git checkout tags/v8.0.0</span><br><span class=\"line\">Note: switching to <span class=\"string\">&#x27;tags/v8.0.0&#x27;</span>.</span><br><span class=\"line\">...</span><br><span class=\"line\">HEAD is now at 036d2d3 Release v8.0.0</span><br></pre></td></tr></table></figure>\n\n<p>If you want to switch on latest release version without defining tag (optional)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git checkout $(git describe --tags $(git rev-list --tags --max-count=1))</span><br></pre></td></tr></table></figure>\n\n<p>And if you want to switch back on master branch, input this command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"using-git-2\"><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> --branch v8.0.0 https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>Or download via mirror on GitLab:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> --branch v8.0.0 https://gitlab.com/hexo-theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>This variant will install the <strong>specific release version</strong> (with <code>.git</code> directory inside).<br>And in any time you can switch to any tagged release, but with limit to specific version.</p></div></div></div>\n\n<p><strong>Update</strong><br>You can update to the latest master branch by the following command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">$ git pull origin master</span><br></pre></td></tr></table></figure>\n\n<p>And if you see any error message during update (something like <strong>«Commit your changes or stash them before you can merge»</strong>), recommended to learn <a href=\"/docs/getting-started/configuration.html\">Alternate Theme Config</a> feature. Howbeit, you can bypass update errors by <code>Commit</code>, <code>Stash</code> or <code>Discard</code> local changes. See <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE1NzQ1NDI0LzU4NjE0OTU=\">here<i class=\"fa fa-external-link-alt\"></i></span> how to do it.</p>\n<h4 id=\"Download-zip\"><a href=\"#Download-zip\" class=\"headerlink\" title=\"Download zip\"></a>Download zip</h4><p>Download zip from GitHub without <code>.git</code> directory inside. So, it is impossible to update this version with <code>git</code> later.<br>Instead you always can use separate configuration (e.g. <a href=\"/docs/getting-started/configuration.html\">Alternate Theme Config</a>) and download new version inside old directory (or create new directory and redefine <code>theme</code> in <mark class=\"label info\">site config file</mark>), without losing your old configuration.</p>\n<div class=\"tabs\" id=\"curl-tar\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#curl-tar-1\">Latest Master Branch</a></li><li class=\"tab\"><a href=\"#curl-tar-2\">Latest Release Version</a></li><li class=\"tab\"><a href=\"#curl-tar-3\">Specific Release Version</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"curl-tar-1\"><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir themes/next</span><br><span class=\"line\">$ curl -L https://api.github.com/repos/next-theme/hexo-theme-next/tarball | tar -zxv -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure>\n\n<p>This variant will install the <strong>latest master branch</strong>.</p></div><div class=\"tab-pane\" id=\"curl-tar-2\"><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir themes/next</span><br><span class=\"line\">$ curl -s https://api.github.com/repos/next-theme/hexo-theme-next/releases/latest | grep tarball_url | cut -d <span class=\"string\">&#x27;&quot;&#x27;</span> -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure>\n\n<p>This variant will install the <strong>latest release version</strong>.</p></div><div class=\"tab-pane\" id=\"curl-tar-3\"><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir themes/next</span><br><span class=\"line\">$ curl -L https://api.github.com/repos/next-theme/hexo-theme-next/tarball/v8.0.0 | tar -zxv -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure>\n\n<p>This variant will install the <strong>specific release version</strong>.</p></div></div></div>\n\n<h3 id=\"Set-It-Up\"><a href=\"#Set-It-Up\" class=\"headerlink\" title=\"Set It Up\"></a>Set It Up</h3><p>When NexT download will complete, we must go back to previous guide and follow <a href=\"/docs/getting-started/#Enabling-NexT\">Enabling NexT</a> instructions.</p>\n"},{"title":"Custom Files","url":"/blog-next/docs/advanced-settings/custom-files.html","content":"<h3 id=\"Custom-File-Support\"><a href=\"#Custom-File-Support\" class=\"headerlink\" title=\"Custom File Support\"></a>Custom File Support</h3><p>PR <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L3B1bGwvODY4\">#868<i class=\"fa fa-external-link-alt\"></i></span> has adjusted the way of customizing the layout or style, canceling the custom files (such as <code>_custom/custom.styl</code>) in the original theme directory, and only retaining the way of specifying the custom file in the configuration file.</p>\n<p>It is a good practice to separate the custom files from the theme files, so that you can add custom content without modifying the original source code of the theme, and avoid conflicts due to <code>git merge</code>.</p>\n<p>As with <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZGF0YS1maWxlcw==\">Data Files<i class=\"fa fa-external-link-alt\"></i></span>, you can place all custom layouts or styles in a specific location (for example: <code>hexo/source/_data</code>). Add the custom file to <code>hexo/source/_data</code> and uncomment the content under the <code>custom_file_path</code> section in the <mark class=\"label primary\">theme config file</mark>.</p>\n<div class=\"note warning\"><p>The file name and path must be the same in <code>custom_file_path</code>.</p>\n</div>\n\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"comment\">#head: source/_data/head.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#header: source/_data/header.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#sidebar: source/_data/sidebar.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postMeta: source/_data/post-meta.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#footer: source/_data/footer.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#bodyEnd: source/_data/body-end.njk</span></span><br><span class=\"line\">  <span class=\"comment\">#variable: source/_data/variables.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#mixin: source/_data/mixins.styl</span></span><br><span class=\"line\">  <span class=\"comment\">#style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n<p>In addition to <code>custom_file_path</code>, we also provide a more flexible way to customize, you can read the <a href=\"/docs/advanced-settings/injects.html\">Theme Inject</a> in documentation.</p>\n<h3 id=\"Examples-of-Modifying-Layout\"><a href=\"#Examples-of-Modifying-Layout\" class=\"headerlink\" title=\"Examples of Modifying Layout\"></a>Examples of Modifying Layout</h3><h4 id=\"Live2d-Widget\"><a href=\"#Live2d-Widget\" class=\"headerlink\" title=\"Live2d Widget\"></a>Live2d Widget</h4><p>Edit <code>source/_data/head.njk</code> in <mark class=\"label info\">site root directory</mark> and add the following content:</p>\n<figure class=\"highlight html\"><figcaption><span>hexo/source/_data/head.njk</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Then uncomment <code>head</code> under the <code>custom_file_path</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"attr\">head:</span> <span class=\"string\">source/_data/head.njk</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Netlify-Logo-in-Sidebar\"><a href=\"#Netlify-Logo-in-Sidebar\" class=\"headerlink\" title=\"Netlify Logo in Sidebar\"></a>Netlify Logo in Sidebar</h4><p>Edit <code>source/_data/sidebar.njk</code> in <mark class=\"label info\">site root directory</mark> and add the following content:</p>\n<figure class=\"highlight html\"><figcaption><span>hexo/source/_data/sidebar.njk</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cc-license animated&quot;</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;sponsor&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.netlify.com&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cc-opacity&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Deploy with Netlify → https://www.netlify.com&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;80&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://www.netlify.com/img/global/badges/netlify-dark.svg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Netlify&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Then uncomment <code>sidebar</code> under the <code>custom_file_path</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"attr\">sidebar:</span> <span class=\"string\">source/_data/sidebar.njk</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Examples-of-Modifying-Style\"><a href=\"#Examples-of-Modifying-Style\" class=\"headerlink\" title=\"Examples of Modifying Style\"></a>Examples of Modifying Style</h3><h4 id=\"How-to-Change-Content-Width\"><a href=\"#How-to-Change-Content-Width\" class=\"headerlink\" title=\"How to Change Content Width\"></a>How to Change Content Width</h4><p>By default NexT has following setting of content width:</p>\n<ul>\n<li>700px → when screen width &lt; 1200px.</li>\n<li>800px → when screen width &gt;= 1200px.</li>\n<li>900px → when screen width &gt;= 1600px.</li>\n<li>In mobile / tablet devices it will use responsive width.</li>\n</ul>\n<p>You can change content width by editing CSS style file. Edit <code>source/_data/variables.styl</code> in <mark class=\"label info\">site root directory</mark> and add varibles:</p>\n<div class=\"tabs\" id=\"change-content-width\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#change-content-width-1\">Muse / Mist schemes</a></li><li class=\"tab\"><a href=\"#change-content-width-2\">Pisces / Gemini schemes</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"change-content-width-1\"><p>Default variables for both Muse and Mist schemes are located in <code>source/css/_variables/base.styl</code> and defined as:</p>\n<figure class=\"highlight styl\"><figcaption><span>next/source/css/_variables/base.styl</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$content</span>-desktop         = <span class=\"number\">700px</span></span><br><span class=\"line\"><span class=\"variable\">$content</span>-desktop-large   = <span class=\"number\">800px</span></span><br><span class=\"line\"><span class=\"variable\">$content</span>-desktop-largest = <span class=\"number\">900px</span></span><br></pre></td></tr></table></figure>\n\n<p>For example, you want wider content width. You may redefine this variables with percentage width:</p>\n<figure class=\"highlight styl\"><figcaption><span>hexo/source/_data/variables.styl</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$content</span>-desktop         = <span class=\"number\">90%</span></span><br><span class=\"line\"><span class=\"variable\">$content</span>-desktop-large   = <span class=\"number\">90%</span></span><br><span class=\"line\"><span class=\"variable\">$content</span>-desktop-largest = <span class=\"number\">90%</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning\"><p>If values will in percents, during opening sidebar will dynamically decrease content width to defined by you percent.<br>But in standard behaviour, sidebar must displace content from yourself.<br>To around it, you can specify content width in <code>em</code>:</p>\n<figure class=\"highlight styl\"><figcaption><span>hexo/source/_data/variables.styl</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$content</span>-desktop         = <span class=\"number\">50em</span></span><br><span class=\"line\"><span class=\"variable\">$content</span>-desktop-large   = <span class=\"number\">55em</span></span><br><span class=\"line\"><span class=\"variable\">$content</span>-desktop-largest = <span class=\"number\">60em</span></span><br></pre></td></tr></table></figure></div></div><div class=\"tab-pane\" id=\"change-content-width-2\"><p>Default variables for Pisces (and Gemini) scheme are located in <code>source/css/_variables/Pisces.styl</code> and defined as:</p>\n<figure class=\"highlight styl\"><figcaption><span>next/source/css/_variables/Pisces.styl</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$content</span>-desktop         = <span class=\"string\">&#x27;calc(100% - %s)&#x27;</span> % unit(<span class=\"variable\">$content</span>-desktop-<span class=\"attribute\">padding</span> / <span class=\"number\">2</span>, <span class=\"string\">&#x27;px&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable\">$content</span>-desktop-large   = <span class=\"number\">1160px</span></span><br><span class=\"line\"><span class=\"variable\">$content</span>-desktop-largest = <span class=\"number\">73%</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning\"><p><code>$content-desktop</code> value in this schemes is auto-responsive by default. It can be changed to any value too, but for better content visibility recommended to stay it as is.</p>\n</div>\n\n<p>In this schemes content width was defined on maximum and already balanced: if desktop width will be wider – content width will more narrowed for easier reading. But if you want to make more narrow content width in wider desktops, here is example:</p>\n<figure class=\"highlight styl\"><figcaption><span>hexo/source/_data/variables.styl</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$content</span>-desktop-large   = <span class=\"number\">65em</span></span><br><span class=\"line\"><span class=\"variable\">$content</span>-desktop-largest = <span class=\"number\">65%</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><p>In fact, Gemini scheme is just fork of Pisces scheme with some style improvements.<br>Therefore, almost all part of variables from Pisces scheme are imported to Gemini scheme too.<br>So, if you want to add any variables or styles to both Pisces and Gemini schemes, need to edit values just in Pisces scheme.</p>\n</div></div></div></div>\n\n<p>Then uncomment <code>variable</code> under the <code>custom_file_path</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"attr\">variable:</span> <span class=\"string\">source/_data/variables.styl</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Custom-Icon-Image\"><a href=\"#Custom-Icon-Image\" class=\"headerlink\" title=\"Custom Icon Image\"></a>Custom Icon Image</h4><p>NexT uses Font Awesome as the default icon library. However, Font Awesome does not include the icons of some Chinese social networking site. In this tutorial, we use local images to replace the missing Font Awesome icons.</p>\n<p>Let&#39;s take the Bilibili icon as an example. You need to prepare a icon in svg format, e.g. <code>/source/images/bilibili.svg</code>.</p>\n<p>Edit <code>source/_data/styles.styl</code> in <mark class=\"label info\">site root directory</mark> and add styles:</p>\n<figure class=\"highlight css\"><figcaption><span>hexo/source/_data/styles.styl</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fab</span><span class=\"selector-class\">.fa-bilibili</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">/images/bilibili.svg</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: <span class=\"number\">50%</span> <span class=\"number\">75%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Then uncomment <code>style</code> under the <code>custom_file_path</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n<p>The usage is:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\">  <span class=\"attr\">Bilibili:</span> <span class=\"string\">https://space.bilibili.com/userid/</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-bilibili</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Hide-Sidebar-on-Mobile\"><a href=\"#Hide-Sidebar-on-Mobile\" class=\"headerlink\" title=\"Hide Sidebar on Mobile\"></a>Hide Sidebar on Mobile</h4><p>Edit <code>source/_data/styles.styl</code> in <mark class=\"label info\">site root directory</mark> and add styles:</p>\n<figure class=\"highlight css\"><figcaption><span>hexo/source/_data/styles.styl</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">+tablet-mobile() &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.sidebar-toggle</span>, <span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Then uncomment <code>style</code> under the <code>custom_file_path</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Overriding-Default-Style\"><a href=\"#Overriding-Default-Style\" class=\"headerlink\" title=\"Overriding Default Style\"></a>Overriding Default Style</h4><p>Edit <code>source/_data/styles.styl</code> in <mark class=\"label info\">site root directory</mark> and add styles:</p>\n<figure class=\"highlight css\"><figcaption><span>hexo/source/_data/styles.styl</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.archive</span> <span class=\"selector-class\">.collection-title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Then uncomment <code>style</code> under the <code>custom_file_path</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Update from Version 5","url":"/blog-next/docs/getting-started/update-from-v5.html","content":"<p>NexT version 5 works fine with Hexo 3, but for frequent users, you maybe need to upgrade version 5 to 8 to get features and supports in new <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0\">Theme-Next<i class=\"fa fa-external-link-alt\"></i></span> repository.</p>\n<p>There are no hard breaking changes between 5.1.x and the latest version. It&#39;s change major version to 8 because:</p>\n<ol>\n<li>Main repositorie was rebased from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0\">iissnan&#39;s<i class=\"fa fa-external-link-alt\"></i></span> profile to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWU=\">next-theme<i class=\"fa fa-external-link-alt\"></i></span> organization.</li>\n<li>Most libraries under the <code>next/source/lib</code> directory was moved out to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvcGx1Z2lucw==\">external repositories under NexT organization<i class=\"fa fa-external-link-alt\"></i></span>.</li>\n<li>3rd-party plugin <a href=\"https://github.com/willin/hexo-wordcount\"><code>hexo-wordcount</code></a> was replaced by <a href=\"https://github.com/next-theme/hexo-word-counter\"><code>hexo-word-counter</code></a> because <code>hexo-word-counter</code> doesn&#39;t have any external Node.js dependencies, nor <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dpbGxpbi9oZXhvLXdvcmRjb3VudC9pc3N1ZXMvNw==\">language filter<i class=\"fa fa-external-link-alt\"></i></span> which causes better performance on speed at site generation.</li>\n</ol>\n<p>So, NexT suggest to update from version 5 to version 8 in this way:</p>\n<ol>\n<li><p>You don&#39;t touch old <code>next</code> dir and just do some copies of NexT files:<br> 1.1. <code>_config.yml</code> or <code>next.yml</code> (if you used <a href=\"/docs/getting-started/configuration.html\">Alternate Theme Config</a>).<br> 1.2. Custom CSS styles what placed in <code>next/source/css/_custom/*</code> and <code>next/source/css/_variables/*</code> directories.<br> 1.3. Custom layout styles what placed in <code>next/layout/_custom/*</code>.<br> 1.4. Any another possible custom additions which can be finded by compare tools between repositories.</p>\n</li>\n<li><p>Clone new repositorie to any another directory instead of <code>next</code>. For example, in <code>next-reloaded</code> directory: <code>git clone https://github.com/next-theme/hexo-theme-next themes/next-reloaded</code>. So, you don&#39;t touch your old NexT 5.1.x directory and can work with new <code>next-reloaded</code> dir.</p>\n</li>\n<li><p>Go to Hexo main config and set theme parameter: <code>theme: next-reloaded</code>. So, your <code>next-reloaded</code> directory must loading with your generation. If you may see any bugs or you simply not like this version, in anytime you can switch for 5.1.x version back.</p>\n</li>\n<li><p>Update language configuration (For Chinese)</p>\n<p> Since v6.0.3, <code>zh-Hans</code> has been renamed to <code>zh-CN</code>: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L3JlbGVhc2VzL3RhZy92Ni4wLjM=\">https://github.com/next-theme/hexo-theme-next/releases/tag/v6.0.3<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p> Users upgrading to v6.0.3 and later need to explicitly modify the <code>language</code> configuration in the Hexo main config file <code>_config.yml</code>, otherwise the language display is incorrect.</p>\n</li>\n<li><p>Update Hexo and Hexo plugin</p>\n<p> If after completing the above steps, an error occurs when executing <code>hexo s</code> or <code>hexo g</code>, it means that there may be a conflict between the old version of Hexo / Hexo plugin and the new version of the theme NexT. We recommend upgrading Hexo to versions 4.0 or later and upgrading Hexo plugins to the latest version. You can run <code>npm outdated</code> to see all the upgradeable plugins.</p>\n</li>\n</ol>\n<p>And how to enable 3rd-party libraries see <a href=\"/docs/third-party-services/#Adding-Plugins\">here</a>.</p>\n"},{"title":"Front Matter","url":"/blog-next/docs/advanced-settings/front-matter.html","content":"<blockquote>\n<p>Front-matter is a block of YAML or JSON at the beginning of the file that is used to configure settings for your writings. Front-matter is terminated by three dashes when written in YAML or three semicolons when written in JSON.<br>— from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZnJvbnQtbWF0dGVy\">Hexo site<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n</blockquote>\n<p><strong>YAML</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hello</span> <span class=\"string\">World</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2013</span><span class=\"string\">/7/13</span> <span class=\"number\">20</span><span class=\"string\">:46:25</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>JSON</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;Hello World&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;date&quot;</span>: <span class=\"string\">&quot;2013/7/13 20:46:25&quot;</span></span><br><span class=\"line\">;;;</span><br></pre></td></tr></table></figure>\n\n<p>Next extends and provide more variables. It allows users to configure a single page.</p>\n<h3 id=\"Settings-amp-Their-Default-Values\"><a href=\"#Settings-amp-Their-Default-Values\" class=\"headerlink\" title=\"Settings &amp; Their Default Values\"></a>Settings &amp; Their Default Values</h3><table>\n<thead>\n<tr>\n<th>Setting</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>author</code></td>\n<td><code>string</code></td>\n<td>Author name for post copyright</td>\n<td><code>author</code> in Hexo <code>_config.yml</code></td>\n</tr>\n<tr>\n<td><code>post_link</code></td>\n<td><code>string</code></td>\n<td>Post link</td>\n<td>None</td>\n</tr>\n<tr>\n<td><code>description</code></td>\n<td><code>string</code></td>\n<td>Docs <a href=\"/docs/theme-settings/posts.html#Preamble-Text\">here</a></td>\n<td>None</td>\n</tr>\n<tr>\n<td><code>direction</code></td>\n<td><code>string</code></td>\n<td>Available value: <code>rtl</code></td>\n<td>None</td>\n</tr>\n<tr>\n<td><code>header</code></td>\n<td><code>boolean</code></td>\n<td>Whether to display the post header in index page</td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>mathjax</code></td>\n<td><code>boolean</code></td>\n<td>MathJax support</td>\n<td><code>math.every_page</code> in <code>_config.yml</code></td>\n</tr>\n<tr>\n<td><code>sidebar</code></td>\n<td><code>boolean</code></td>\n<td>Whether the sidebar will be shown</td>\n<td>Depends on <code>sidebar.display</code> in <code>_config.yml</code></td>\n</tr>\n<tr>\n<td><code>sticky</code></td>\n<td><code>number</code></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWdlbmVyYXRvci1pbmRleA==\">hexo-generator-index<i class=\"fa fa-external-link-alt\"></i></span> plugin required</td>\n<td>0</td>\n</tr>\n<tr>\n<td><code>quicklink</code></td>\n<td><code>object</code> (1)</td>\n<td>Quicklink support</td>\n<td>From <code>_config.yml</code></td>\n</tr>\n<tr>\n<td><code>reward_settings</code></td>\n<td><code>object</code> (1)</td>\n<td>Reward settings</td>\n<td>From <code>_config.yml</code></td>\n</tr>\n<tr>\n<td><code>toc</code></td>\n<td><code>object</code> (1)</td>\n<td>Table of Contents in the sidebar</td>\n<td>From <code>_config.yml</code></td>\n</tr>\n</tbody></table>\n<p>(1): they have same structure with the configuration file.</p>\n<p><strong>Example</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">toc:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">number:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">max_depth:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">reward_settings:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">comment:</span> <span class=\"string\">Buy</span> <span class=\"string\">me</span> <span class=\"string\">a</span> <span class=\"string\">coffee</span></span><br><span class=\"line\"><span class=\"attr\">quicklink:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">delay:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">timeout:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">  <span class=\"attr\">priority:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">ignores:</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Undocumented-Front-matter-Variables\"><a href=\"#Undocumented-Front-matter-Variables\" class=\"headerlink\" title=\"Undocumented Front-matter Variables\"></a>Undocumented Front-matter Variables</h3><p>The following variables are not mentioned in the Hexo documentation, but are required by <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLXRoZW1lLXVuaXQtdGVzdA==\">hexo-theme-unit-test<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<table>\n<thead>\n<tr>\n<th>Setting</th>\n<th>Type</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>link</code></td>\n<td><code>string</code></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLXRoZW1lLXVuaXQtdGVzdC9ibG9iL21hc3Rlci9zb3VyY2UvX3Bvc3RzL2xpbmstcG9zdC5tZA==\">link-post<i class=\"fa fa-external-link-alt\"></i></span></td>\n</tr>\n<tr>\n<td><code>photos</code></td>\n<td><code>array</code></td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLXRoZW1lLXVuaXQtdGVzdC9ibG9iL21hc3Rlci9zb3VyY2UvX3Bvc3RzL2dhbGxlcnktcG9zdC5tZA==\">gallery-post<i class=\"fa fa-external-link-alt\"></i></span></td>\n</tr>\n</tbody></table>\n"},{"title":"Vendors","url":"/blog-next/docs/advanced-settings/vendors.html","content":"<h3 id=\"CDN-Settings\"><a href=\"#CDN-Settings\" class=\"headerlink\" title=\"CDN Settings\"></a>CDN Settings</h3><p>This feature is located under <code>vendors</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">vendors:</span></span><br><span class=\"line\">  <span class=\"comment\"># The CDN provider of NexT internal scripts.</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: local | jsdelivr | unpkg | cdnjs</span></span><br><span class=\"line\">  <span class=\"attr\">internal:</span> <span class=\"string\">local</span></span><br><span class=\"line\">  <span class=\"comment\"># The default CDN provider of third-party plugins.</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: local | jsdelivr | unpkg | cdnjs</span></span><br><span class=\"line\">  <span class=\"comment\"># Dependencies for `plugins: local`: https://github.com/next-theme/plugins</span></span><br><span class=\"line\">  <span class=\"attr\">plugins:</span> <span class=\"string\">jsdelivr</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># In the following settings, you can specify the CDN link for each plugin.</span></span><br><span class=\"line\">  <span class=\"comment\"># If left blank, the default CDN provider set by `plugins` option will be used.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Anime.js</span></span><br><span class=\"line\">  <span class=\"comment\"># For more information: https://animejs.com</span></span><br><span class=\"line\">  <span class=\"attr\">anime:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font Awesome</span></span><br><span class=\"line\">  <span class=\"comment\"># For more information: https://fontawesome.com</span></span><br><span class=\"line\">  <span class=\"attr\">fontawesome:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Core-Plugins\"><a href=\"#Core-Plugins\" class=\"headerlink\" title=\"Core Plugins\"></a>Core Plugins</h4><p><code>internal: local</code> is used to set how to load the internal library, e.g. <code>source/js/utils.js</code>. The core plugins are loaded from your site by default, they are required by the basic functions of NexT. Set <code>internal</code> to <code>jsdelivr</code> or <code>unpkg</code> to load them from the corresponding CDN.</p>\n<div class=\"note info\"><p>If your site is deployed to any free hosting service (Github, Gitlab, etc.), CDN links are recommended for core plugins. CDN usually has faster speeds and no traffic restrictions.</p>\n</div>\n\n<div class=\"note danger\"><p>If you are using the latest master branch of NexT, please set <code>internal: local</code>.</p>\n</div>\n\n<h4 id=\"Third-party-Plugins\"><a href=\"#Third-party-Plugins\" class=\"headerlink\" title=\"Third-party Plugins\"></a>Third-party Plugins</h4><p><code>plugins: jsdelivr</code> is used to set how to load the third-party plugins, e.g. <code>anime.js</code>. Third-party plugins are loaded from <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuanNkZWxpdnIuY29tLw==\">jsDelivr<i class=\"fa fa-external-link-alt\"></i></span> CDN by default.<br>The reason that jsDelivr is chosen to deliver our third-party plugins is because it is fast everywhere, and jsDelivr has the valid ICP license issued by the Chinese government, it can be accessed in China pretty well. jsDelivr does not only provide mirrors for the files from npm packages, but also fetch from the GitHub releases! We could use the following link to reference the js files, just as other CDNs.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//cdn.jsdelivr.net/gh/user/repo@version/file</span><br></pre></td></tr></table></figure>\n\n<p>And it could automatically minify the JS and CSS files, even if you don&#39;t have the minified version. Just use the <code>filename.min.js</code> or the <code>filename.min.css</code> to replace the file above. For more information: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuanNkZWxpdnIuY29tL2ZlYXR1cmVz\">https://www.jsdelivr.com/features<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>And we also provide other optional CDNs, including the famous <span class=\"exturl\" data-url=\"aHR0cHM6Ly91bnBrZy5jb20v\">UNPKG<i class=\"fa fa-external-link-alt\"></i></span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG5qcy5jb20v\">CDNJS<i class=\"fa fa-external-link-alt\"></i></span>. Set <code>plugins</code> to <code>unpkg</code> or <code>cdnjs</code> to load them from different CDN provider.</p>\n<div class=\"note warning\"><p>Particularly, if you are a Chinese blogger or most of your visits come from China, please note that <strong>the CDNJS is blocked in some parts of China</strong>, don&#39;t use it as your CDN provider.</p>\n</div>\n\n<div class=\"note info\"><p>If your would like to load all third-party plugins from your site, please set <code>plugins</code> to <code>local</code> and install the <code>@next-theme/plugins</code> package: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvcGx1Z2lucw==\">https://github.com/next-theme/plugins<i class=\"fa fa-external-link-alt\"></i></span><br>If your website is deployed in the local area network, then this will have a faster loading speed than CDN services.</p>\n</div>\n\n<p>And next part is the config of each library. Each config is in format of <code>libname: CDN URL</code>. For example:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">anime:</span> <span class=\"string\">//unpkg.com/animejs@3.1.0/lib/anime.min.js</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>If you leave it blank, NexT will use the default CDN provider set by <code>plugins</code> option.</strong></p>\n<p>You can set it to a proper CDN URL, which can make the static assets of third-party plugins load faster. For example, if you want to set the CDN URL for <code>mediumzoom</code>, go to <mark class=\"label primary\">theme config file</mark> and see:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">vendors:</span></span><br><span class=\"line\">  <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"comment\"># Some contents...</span></span><br><span class=\"line\">  <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"attr\">mediumzoom:</span> <span class=\"comment\"># Set or update mediumzoom CDN URL.</span></span><br></pre></td></tr></table></figure>\n\n<p>If you want to try the other CDNs not included in the available values of <code>plugins</code> option, you would better use the corresponding version. Versions in <code>_vendors.yml</code> are recommended by NexT. And if you need other versions you need to test them first.</p>\n"},{"title":"Advanced Settings","url":"/blog-next/docs/advanced-settings/index.html","content":"<p>Besides common <a href=\"/docs/theme-settings/\">Theme Settings</a> and <a href=\"/docs/third-party-services/\">Third-party Services</a>, NexT supports some advanced settings which makes NexT customizable.<br>Please note that those settings may lead to abnormal behavior if they are wrong. Change them only when you know for what they are.</p>\n<ul>\n<li><a href=\"/docs/advanced-settings/vendors.html\">Vendors</a></li>\n<li><a href=\"/docs/advanced-settings/custom-files.html\">Custom Files</a></li>\n<li><a href=\"/docs/advanced-settings/injects.html\">Injects</a></li>\n<li><a href=\"/docs/advanced-settings/front-matter.html\">Front-matter</a></li>\n</ul>\n"},{"title":"Injects","url":"/blog-next/docs/advanced-settings/injects.html","content":"<h3 id=\"Injects\"><a href=\"#Injects\" class=\"headerlink\" title=\"Injects\"></a>Injects</h3><p>We extended the Hexo filter and added <code>theme_inject</code>, so user can add the desired custom content to any injection point.</p>\n<h4 id=\"Synopsis\"><a href=\"#Synopsis\" class=\"headerlink\" title=\"Synopsis\"></a>Synopsis</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">&#x27;theme_inject&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">injects</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>A injects argument will get passed into the function, so we can use it add custom code in <code>injectPoint</code> as following.</p>\n<p>For inject view:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The name of same `injectPoint` suggest be unique. If same, it will override low priority configurations.</span></span><br><span class=\"line\"><span class=\"comment\">// `locals` and `options` is the same as partial https://hexo.io/docs/helpers#partial.</span></span><br><span class=\"line\"><span class=\"comment\">// `order` defines the order of injection, which by default depends on the priority of injection.</span></span><br><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">&#x27;theme_inject&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">injects</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// it will put code from this filePath into injectPoint.</span></span><br><span class=\"line\">  injects.[injectPoint].file(name, filePath, [locals, options, order]);</span><br><span class=\"line\">  <span class=\"comment\">// it will put raw string as code into injectPoint.</span></span><br><span class=\"line\">  injects.[injectPoint].raw(name, raw, [locals, options, order]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning\"><p>You have to note <code>filePath</code>, it must be absolute path or relative to <code>hexo_dir</code>.</p>\n</div>\n\n<p>For inject style:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">&#x27;theme_inject&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">injects</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// it will put styleFile into injectPoint.</span></span><br><span class=\"line\">  injects.[injectPoint].push(styleFile);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>These are many <code>injectPoint</code>, defined in <a href=\"https://github.com/next-theme/hexo-theme-next/blob/master/scripts/events/lib/injects-point.js\"><code>injects-point.js</code></a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">views</span>: [<span class=\"string\">&#x27;head&#x27;</span>, <span class=\"string\">&#x27;header&#x27;</span>, <span class=\"string\">&#x27;sidebar&#x27;</span>, <span class=\"string\">&#x27;postMeta&#x27;</span>, <span class=\"string\">&#x27;postBodyEnd&#x27;</span>, ..., <span class=\"string\">&#x27;footer&#x27;</span>, <span class=\"string\">&#x27;bodyEnd&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: [<span class=\"string\">&#x27;variable&#x27;</span>, <span class=\"string\">&#x27;mixin&#x27;</span>, <span class=\"string\">&#x27;style&#x27;</span>]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>custom_file_path</code> also uses this API, see <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0L2Jsb2IvbWFzdGVyL3NjcmlwdHMvZmlsdGVycy9kZWZhdWx0LWluamVjdHMuanM=\">default-injects.js<i class=\"fa fa-external-link-alt\"></i></span>. It will consume <code>custom</code> name in view inject points. So if you use <code>custom_file_path</code>, please not use <code>custom</code>.</p>\n<h4 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h4><p><strong>One:</strong> load a custom script. We can add it in <code>bodyEnd</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">&#x27;theme_inject&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">injects</span>) </span>&#123;</span><br><span class=\"line\">  injects.bodyEnd.raw(<span class=\"string\">&#x27;load-custom-js&#x27;</span>, <span class=\"string\">&#x27;&lt;script src=&quot;js-path-or-cdn.js&quot;&gt;&lt;/script&gt;&#x27;</span>, &#123;&#125;, &#123;<span class=\"attr\">cache</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Two:</strong> add a custom <code>my-favourite-food.njk</code> to sidebar.</p>\n<p>Step1: you should create <code>my-favourite-food.njk</code> in any path(e.g. <code>source/_data/</code>) as below. You can get variable from <code>hexo</code> or <code>local</code> defined in filter.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% for food in foods %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; food &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Step2: add filter to load it.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">&#x27;theme_inject&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">injects</span>) </span>&#123;</span><br><span class=\"line\">  injects.sidebar.file(<span class=\"string\">&#x27;my-favourite-food&#x27;</span>, <span class=\"string\">&#x27;source/_data/my-favourite-food.njk&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">foods</span>: [<span class=\"string\">&#x27;apple&#x27;</span>, <span class=\"string\">&#x27;orange&#x27;</span>]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Three:</strong> want to have big header, put <code>big-header.styl</code> to NexT.</p>\n<p>Of course, you need to create this file first(e.g. <code>source/_data/big-header.styl</code>).</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>And then add it in filter.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">&#x27;theme_inject&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">injects</span>) </span>&#123;</span><br><span class=\"line\">  injects.style.push(<span class=\"string\">&#x27;source/_data/big-header.styl&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h4><p>We also support hexo&#39;s plugin system, which makes it easy to extend functions without modifying the source code of the core module. You can see <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvcGx1Z2lucy5odG1sI1BsdWdpbg==\">https://hexo.io/docs/plugins.html#Plugin<i class=\"fa fa-external-link-alt\"></i></span> to learn how to create a plugin.</p>\n"},{"title":"Button","url":"/blog-next/docs/tag-plugins/button.html","content":"<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><figure class=\"highlight md\"><figcaption><span>button.js</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% button url, text, icon [class], [title] %&#125;</span><br><span class=\"line\">&lt;!-- Tag Alias --&gt;</span><br><span class=\"line\">&#123;% btn url, text, icon [class], [title] %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">url     : Absolute or relative path to URL.</span><br><span class=\"line\">text    : Button text. Required if no icon specified.</span><br><span class=\"line\">icon    : Font Awesome icon name (without &#x27;fa-&#x27; at the begining). Required if no text specified.</span><br><span class=\"line\">[class] : Optional parameter.</span><br><span class=\"line\"><span class=\"code\">          Font Awesome class(es): fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5x</span></span><br><span class=\"line\"><span class=\"code\">[title] : Optional parameter.</span></span><br><span class=\"line\"><span class=\"code\">          Tooltip at mouseover.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% button #, Text %&#125;</span><br></pre></td></tr></table></figure>\n\n<a class=\"btn\" href=\"#\">Text</a>\n\n<h4 id=\"Button-with-text-amp-title\"><a href=\"#Button-with-text-amp-title\" class=\"headerlink\" title=\"Button with text &amp; title\"></a>Button with text &amp; title</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% btn #, Text %&#125;&#123;% btn #, Text &amp; Title,, Title %&#125;</span><br></pre></td></tr></table></figure>\n\n<a class=\"btn\" href=\"#\">Text</a><a class=\"btn\" href=\"#\" title=\"Title\">Text & Title</a>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% btn #, Text %&#125; &#123;% btn #, Text &amp; Title,, Title %&#125;</span><br></pre></td></tr></table></figure>\n\n<a class=\"btn\" href=\"#\">Text</a> <a class=\"btn\" href=\"#\" title=\"Title\">Text & Title</a>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% btn #, Text %&#125;</span><br><span class=\"line\">&#123;% btn #, Text &amp; Title,, Title %&#125;</span><br></pre></td></tr></table></figure>\n\n<a class=\"btn\" href=\"#\">Text</a>\n<a class=\"btn\" href=\"#\" title=\"Title\">Text & Title</a>\n\n<h4 id=\"Button-with-icon\"><a href=\"#Button-with-icon\" class=\"headerlink\" title=\"Button with icon\"></a>Button with icon</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span>&#123;% btn #,, home fa-5x %&#125;&#123;% btn #,, home fa-5x %&#125;&#123;% btn #,, home fa-5x %&#125;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span>&#123;% btn #,, home fa-4x %&#125;&#123;% btn #,, home fa-4x %&#125;&#123;% btn #,, home fa-4x %&#125;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span>&#123;% btn #,, home fa-3x %&#125;&#123;% btn #,, home fa-3x %&#125;&#123;% btn #,, home fa-3x %&#125;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span>&#123;% btn #,, home fa-2x %&#125;&#123;% btn #,, home fa-2x %&#125;&#123;% btn #,, home fa-2x %&#125;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span>&#123;% btn #,, home fa-lg %&#125;&#123;% btn #,, home fa-lg %&#125;&#123;% btn #,, home fa-lg %&#125;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span>&#123;% btn #,, home %&#125;&#123;% btn #,, home %&#125;&#123;% btn #,, home %&#125;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<div><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-5x\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-5x\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-5x\"></i></a></div>\n<div><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-4x\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-4x\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-4x\"></i></a></div>\n<div><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-3x\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-3x\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-3x\"></i></a></div>\n<div><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-2x\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-2x\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-2x\"></i></a></div>\n<div><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-lg\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-lg\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-lg\"></i></a></div>\n<div><a class=\"btn\" href=\"#\"><i class=\"fa fa-home\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-home\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-home\"></i></a></div>\n\n<h4 id=\"Button-with-text-amp-icon\"><a href=\"#Button-with-text-amp-icon\" class=\"headerlink\" title=\"Button with text &amp; icon\"></a>Button with text &amp; icon</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span>&#123;% btn #, Text &amp; Icon (buggy), home %&#125;</span><br><span class=\"line\">&#123;% btn #, Text &amp; Icon (fixed width), home fa-fw %&#125;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><a class=\"btn\" href=\"#\"><i class=\"fa fa-home\"></i>Text & Icon (buggy)</a>\n<a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-fw\"></i>Text & Icon (fixed width)</a></p>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span>&#123;% btn #, Text &amp; Large Icon, home fa-fw fa-lg %&#125;</span><br><span class=\"line\">&#123;% btn #, Text &amp; Large Icon &amp; Title, home fa-fw fa-lg, Title %&#125;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-fw fa-lg\"></i>Text & Large Icon</a>\n<a class=\"btn\" href=\"#\" title=\"Title\"><i class=\"fa fa-home fa-fw fa-lg\"></i>Text & Large Icon & Title</a></p>\n\n<h4 id=\"Button-inside-text\"><a href=\"#Button-inside-text\" class=\"headerlink\" title=\"Button inside text\"></a>Button inside text</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">Lorem &#123;% btn #, Lorem, home fa-fw fa-lg %&#125; ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br><span class=\"line\"></span><br><span class=\"line\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident &#123;% btn #, Ipsum, home fa-fw fa-lg %&#125;, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br></pre></td></tr></table></figure>\n\n<p>Lorem <a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-fw fa-lg\"></i>ipsum</a> dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<br>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure <a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-fw fa-lg\"></i>dolor</a> in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<br>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non <a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-fw fa-lg\"></i>proident</a>, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n<h4 id=\"Button-inside-other-tag\"><a href=\"#Button-inside-other-tag\" class=\"headerlink\" title=\"Button inside other tag\"></a>Button inside other tag</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note info %&#125;</span><br><span class=\"line\">&#123;% btn #, Text &amp; Icon, home fa-fw %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% btn #,, home, Title %&#125;&#123;% btn #, Text %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">Link</span>](<span class=\"link\">#</span>)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note info\"><p><a class=\"btn\" href=\"#\"><i class=\"fa fa-home fa-fw fa-lg\"></i>Text &amp; Icon</a></p>\n<p><a class=\"btn\" href=\"#\" title=\"Title\"><i class=\"fa fa-home fa-lg\"></i></a><a class=\"btn\" href=\"#\">Text</a></p>\n<p><a href=\"#\">Link</a></p>\n</div>\n\n<h4 id=\"Button-margin\"><a href=\"#Button-margin\" class=\"headerlink\" title=\"Button margin\"></a>Button margin</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span>&#123;% btn #,, heading %&#125;&#123;% btn #,, fab fa-edge %&#125;&#123;% btn #,, times %&#125;&#123;% btn #,, circle-notch %&#125;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span>&#123;% btn #,, italic %&#125;&#123;% btn #,, fab fa-scribd %&#125;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span>&#123;% btn #,, fab fa-google %&#125;&#123;% btn #,, fab fa-chrome %&#125;&#123;% btn #,, fab fa-opera %&#125;&#123;% btn #,, gem fa-rotate-270 %&#125;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<div class=\"text-center\"><div><a class=\"btn\" href=\"#\"><i class=\"fa fa-heading\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fab fa-edge\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-times\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-circle-notch\"></i></a></div>\n<div><a class=\"btn\" href=\"#\"><i class=\"fa fa-italic\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fab fa-scribd\"></i></a></div>\n<div><a class=\"btn\" href=\"#\"><i class=\"fab fa-google\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fab fa-chrome\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fab fa-opera\"></i></a><a class=\"btn\" href=\"#\"><i class=\"fa fa-gem fa-rotate-270\"></i></a></div></div>\n\n<h4 id=\"Button-with-relative-URL\"><a href=\"#Button-with-relative-URL\" class=\"headerlink\" title=\"Button with relative URL\"></a>Button with relative URL</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span>&#123;% btn #, Previous Chapter, arrow-left fa-fw fa-lg, Previous Chapter (Full Image) %&#125; &#123;% btn #, Next Chapter, arrow-right fa-fw fa-lg, Next Chapter (Label) %&#125;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<div class=\"text-center\"><a class=\"btn\" href=\"/docs/tag-plugins/full-image\" title=\"Previous Chapter (Full Image)\"><i class=\"fa fa-arrow-left fa-fw fa-lg\"></i>Previous Chapter</a> <a class=\"btn\" href=\"/docs/tag-plugins/label\" title=\"Next Chapter (Label)\"><i class=\"fa fa-arrow-right fa-fw fa-lg\"></i>Next Chapter</a></div>\n\n<h4 id=\"Button-with-absolute-URL\"><a href=\"#Button-with-absolute-URL\" class=\"headerlink\" title=\"Button with absolute URL\"></a>Button with absolute URL</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span></span>&#123;% btn https://github.com, GitHub, fab fa-github fa-fw fa-lg, GitHub %&#125;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<div class=\"text-center\"><a class=\"btn\" href=\"https://github.com\" title=\"GitHub\"><i class=\"fab fa-github fa-fw fa-lg\"></i>GitHub</a></div>\n"},{"title":"Group Pictures","url":"/blog-next/docs/tag-plugins/group-pictures.html","content":"<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><figure class=\"highlight md\"><figcaption><span>group-pictures.js</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% grouppicture [group]-[layout] %&#125;&#123;% endgrouppicture %&#125;</span><br><span class=\"line\">&#123;% gp [group]-[layout] %&#125;&#123;% endgp %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[group]  : Optional parameter.</span><br><span class=\"line\"><span class=\"code\">           Total number of pictures to add in the group.</span></span><br><span class=\"line\"><span class=\"code\">[layout] : Optional parameter.</span></span><br><span class=\"line\"><span class=\"code\">           Default picture under the group to show.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% grouppicture 6-3 %&#125;</span><br><span class=\"line\">  ![](/images/docs/next.svg)</span><br><span class=\"line\">  ![](/images/docs/next.svg)</span><br><span class=\"line\">  ![](/images/docs/next.svg)</span><br><span class=\"line\">  ![](/images/docs/next.svg)</span><br><span class=\"line\">  ![](/images/docs/next.svg)</span><br><span class=\"line\">  ![](/images/docs/next.svg)</span><br><span class=\"line\">&#123;% endgrouppicture %&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"/images/docs/next.svg\" loading=\"lazy\"></div><div class=\"group-picture-column\"><img src=\"/images/docs/next.svg\" loading=\"lazy\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"/images/docs/next.svg\" loading=\"lazy\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"/images/docs/next.svg\" loading=\"lazy\"></div><div class=\"group-picture-column\"><img src=\"/images/docs/next.svg\" loading=\"lazy\"></div><div class=\"group-picture-column\"><img src=\"/images/docs/next.svg\" loading=\"lazy\"></div></div></div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% gp 5-2 %&#125;</span><br><span class=\"line\">  ![](/images/docs/next.svg)</span><br><span class=\"line\">  ![](/images/docs/next.svg)</span><br><span class=\"line\">  ![](/images/docs/next.svg)</span><br><span class=\"line\">  ![](/images/docs/next.svg)</span><br><span class=\"line\">  ![](/images/docs/next.svg)</span><br><span class=\"line\">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"/images/docs/next.svg\" loading=\"lazy\"></div><div class=\"group-picture-column\"><img src=\"/images/docs/next.svg\" loading=\"lazy\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"/images/docs/next.svg\" loading=\"lazy\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"/images/docs/next.svg\" loading=\"lazy\"></div><div class=\"group-picture-column\"><img src=\"/images/docs/next.svg\" loading=\"lazy\"></div></div></div>\n"},{"title":"Tag Plugins","url":"/blog-next/docs/tag-plugins/index.html","content":"<p>Tag Plugin is a way to make special style contents supported by Hexo. For example, we cannot show a image with custom size in standard Markdown. And then we can use tag plugins to solve it. <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdGFnLXBsdWdpbnM=\">Hexo has a lot of tags<i class=\"fa fa-external-link-alt\"></i></span> which can help user. And Hexo also have interfaces to themes which make themes able to create their own tags. Following tags are provided by NexT:</p>\n<ul>\n<li><a href=\"/docs/tag-plugins/button.html\">Button</a></li>\n<li><a href=\"/docs/tag-plugins/caniuse.html\">Caniuse</a></li>\n<li><a href=\"#Centered-Quote\">Centered Quote</a></li>\n<li><a href=\"/docs/tag-plugins/group-pictures.html\">Group Pictures</a></li>\n<li><a href=\"/docs/tag-plugins/label.html\">Label</a></li>\n<li><a href=\"/docs/tag-plugins/link-grid.html\">Link Grid</a></li>\n<li><a href=\"/docs/tag-plugins/mermaid.html\">Mermaid</a></li>\n<li><a href=\"/docs/tag-plugins/note.html\">Note</a></li>\n<li><a href=\"/docs/tag-plugins/pdf.html\">PDF</a></li>\n<li><a href=\"/docs/tag-plugins/tabs.html\">Tabs</a></li>\n<li><a href=\"#Video\">Video</a></li>\n</ul>\n<p>These tag plugins are only available in the theme NexT. If you switch to other Hexo themes, they may cause rendering errors.</p>\n<h3 id=\"Centered-Quote\"><a href=\"#Centered-Quote\" class=\"headerlink\" title=\"Centered Quote\"></a>Centered Quote</h3><p>This tag will make a quote with two lines before and after it, and text quoted will be centered. When using centered quote, if we have multi-line text, and each line has a different length, the quote won&#39;t be symmetrical, so it&#39;s recommended to use when only have single line text. For example before article all after article to make a summary.</p>\n<h4 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h4><figure class=\"highlight html\"><figcaption><span>center-quote.js</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% centerquote %&#125;Something&#123;% endcenterquote %&#125;</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Tag Alias --&gt;</span></span><br><span class=\"line\">&#123;% cq %&#125;Something&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% cq %&#125;Elegant in code, simple in core&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote class=\"blockquote-center\">\n<p>Elegant in code, simple in core</p>\n\n</blockquote>\n\n<h3 id=\"Video\"><a href=\"#Video\" class=\"headerlink\" title=\"Video\"></a>Video</h3><h4 id=\"Usage-1\"><a href=\"#Usage-1\" class=\"headerlink\" title=\"Usage\"></a>Usage</h4><figure class=\"highlight md\"><figcaption><span>video.js</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% video url %&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Examples-1\"><a href=\"#Examples-1\" class=\"headerlink\" title=\"Examples\"></a>Examples</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% video https://example.com/sample.mp4 %&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% video /path/to/your/video.mp4 %&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Caniuse","url":"/blog-next/docs/tag-plugins/caniuse.html","content":"<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><figure class=\"highlight md\"><figcaption><span>caniuse.js</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% caniuse feature @ [periods] %&#125;</span><br><span class=\"line\">&lt;!-- Tag Alias --&gt;</span><br><span class=\"line\">&#123;% can feature @ [periods] %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">feature   : Search for the feature you want on https://caniuse.com, then click on the hash sign to the left of the search result heading and you will get the unique name of this feature.</span><br><span class=\"line\">[periods] : Optional parameter.</span><br><span class=\"line\"><span class=\"code\">            Select the browser versions to display. Supported values: past_1, past_2, past_3, past_4, past_5, current, future_3, future_2, future_1. If this value is empty, the default value &#x27;current&#x27; will be used.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><h4 id=\"Caniuse-without-periods\"><a href=\"#Caniuse-without-periods\" class=\"headerlink\" title=\"Caniuse without periods\"></a>Caniuse without periods</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% caniuse fetch %&#125;</span><br></pre></td></tr></table></figure>\n\n<iframe data-feature=\"fetch\" src=\"https://caniuse.bitsofco.de/embed/index.html?feat=fetch&periods=current&accessible-colours=false\" frameborder=\"0\" width=\"100%\" height=\"400px\"></iframe>\n\n<h4 id=\"Caniuse-with-current-period\"><a href=\"#Caniuse-with-current-period\" class=\"headerlink\" title=\"Caniuse with current period\"></a>Caniuse with current period</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% caniuse sharedarraybuffer @ current %&#125;</span><br></pre></td></tr></table></figure>\n\n<iframe data-feature=\"sharedarraybuffer\" src=\"https://caniuse.bitsofco.de/embed/index.html?feat=sharedarraybuffer&periods=current&accessible-colours=false\" frameborder=\"0\" width=\"100%\" height=\"400px\"></iframe>\n\n<h4 id=\"Caniuse-with-future-periods\"><a href=\"#Caniuse-with-future-periods\" class=\"headerlink\" title=\"Caniuse with future periods\"></a>Caniuse with future periods</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% caniuse loading-lazy-attr @ future<span class=\"emphasis\">_3,future_</span>2,future<span class=\"emphasis\">_1 %&#125;</span></span><br></pre></td></tr></table></figure>\n\n<iframe data-feature=\"loading-lazy-attr\" src=\"https://caniuse.bitsofco.de/embed/index.html?feat=loading-lazy-attr&periods=future_3,future_2,future_1&accessible-colours=false\" frameborder=\"0\" width=\"100%\" height=\"400px\"></iframe>\n\n<h4 id=\"Caniuse-with-past-periods\"><a href=\"#Caniuse-with-past-periods\" class=\"headerlink\" title=\"Caniuse with past periods\"></a>Caniuse with past periods</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% caniuse link-rel-modulepreload @ past<span class=\"emphasis\">_1,past_</span>2,past<span class=\"emphasis\">_3,past_</span>4,past<span class=\"emphasis\">_5 %&#125;</span></span><br></pre></td></tr></table></figure>\n\n<iframe data-feature=\"link-rel-modulepreload\" src=\"https://caniuse.bitsofco.de/embed/index.html?feat=link-rel-modulepreload&periods=past_1,past_2,past_3,past_4,past_5&accessible-colours=false\" frameborder=\"0\" width=\"100%\" height=\"400px\"></iframe>\n"},{"title":"Link Grid","url":"/blog-next/docs/tag-plugins/link-grid.html","content":"<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><figure class=\"highlight md\"><figcaption><span>link-grid.js</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% linkgrid [image] [delimiter] [comment] %&#125;&#123;% endlinkgrid %&#125;</span><br><span class=\"line\">&#123;% lg [image] [delimiter] [comment] %&#125;&#123;% endlg %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[image]     : Optional parameter.</span><br><span class=\"line\"><span class=\"code\">              Default image URL.</span></span><br><span class=\"line\"><span class=\"code\">[delimiter] : Optional parameter.</span></span><br><span class=\"line\"><span class=\"code\">              If the optional delimiter parameter is given, it is interpreted as the delimiter of items in each line.</span></span><br><span class=\"line\"><span class=\"code\">[comment]   : Optional parameter.</span></span><br><span class=\"line\"><span class=\"code\">              If the optional comment parameter is given, it is interpreted as the symbol to comment out a line.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% linkgrid %&#125;</span><br><span class=\"line\">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | /images/apple-touch-icon-next.png</span><br><span class=\"line\">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | /images/apple-touch-icon-next.png</span><br><span class=\"line\">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | /images/apple-touch-icon-next.png</span><br><span class=\"line\">Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | /images/apple-touch-icon-next.png</span><br><span class=\"line\">% Theme NexT | https://theme-next.js.org/ | Stay Simple. Stay NexT. | /images/apple-touch-icon-next.png</span><br><span class=\"line\">&#123;% endlinkgrid %&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"link-grid\"><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/apple-touch-icon-next.png);\"></div>\n<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>\n<a href=\"https://theme-next.js.org/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/apple-touch-icon-next.png);\"></div>\n<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>\n<a href=\"https://theme-next.js.org/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/apple-touch-icon-next.png);\"></div>\n<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>\n<a href=\"https://theme-next.js.org/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/apple-touch-icon-next.png);\"></div>\n<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>\n<a href=\"https://theme-next.js.org/\"></a>\n</div></div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% lg /images/apple-touch-icon-next.png , %&#125;</span><br><span class=\"line\">Theme NexT , https://theme-next.js.org/ , Stay Simple. Stay NexT. , /images/apple-touch-icon-next.png</span><br><span class=\"line\">Theme NexT , https://theme-next.js.org/ , Stay Simple. Stay NexT. , /images/apple-touch-icon-next.png</span><br><span class=\"line\">Theme NexT , https://theme-next.js.org/ , Stay Simple. Stay NexT. , /images/apple-touch-icon-next.png</span><br><span class=\"line\">% Theme NexT , https://theme-next.js.org/ , Stay Simple. Stay NexT. , /images/apple-touch-icon-next.png</span><br><span class=\"line\">&#123;% endlg %&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"link-grid\"><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/apple-touch-icon-next.png);\"></div>\n<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>\n<a href=\"https://theme-next.js.org/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/apple-touch-icon-next.png);\"></div>\n<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>\n<a href=\"https://theme-next.js.org/\"></a>\n</div><div class=\"link-grid-container\">\n<div class=\"link-grid-image\" style=\"background-image: url(/images/apple-touch-icon-next.png);\"></div>\n<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>\n<a href=\"https://theme-next.js.org/\"></a>\n</div></div>\n"},{"title":"Label","url":"/blog-next/docs/tag-plugins/label.html","content":"<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><figure class=\"highlight md\"><figcaption><span>label.js</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% label [class]@text %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[class] : Optional parameter.</span><br><span class=\"line\"><span class=\"code\">          Supported values: default | primary | success | info | warning | danger.</span></span><br><span class=\"line\"><span class=\"code\">          If not specified, the default style of the browser will be used,</span></span><br><span class=\"line\"><span class=\"code\">          which may be different in different browsers.</span></span><br><span class=\"line\"><span class=\"code\">text    : &#x27;@text&#x27; can be specified with or without space</span></span><br><span class=\"line\"><span class=\"code\">          E.g. &#x27;success @text&#x27; is the same as &#x27;success@text&#x27;.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">Lorem &#123;% label @ipsum %&#125; &#123;% label primary@dolor sit %&#125; amet, consectetur &#123;% label success@adipiscing elit, %&#125; sed &#123;% label info@do eiusmod %&#125; tempor incididunt ut labore et dolore magna aliqua.</span><br><span class=\"line\"></span><br><span class=\"line\">Ut enim <span class=\"emphasis\">*&#123;% label warning @ad %&#125;*</span> minim veniam, quis <span class=\"strong\">**&#123;% label danger@nostrud %&#125;**</span> exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</span><br><span class=\"line\"></span><br><span class=\"line\">Duis aute irure dolor in reprehenderit in voluptate ~~&#123;% label default @velit %&#125;~~ <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">mark</span>&gt;</span></span>esse<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">mark</span>&gt;</span></span> cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br></pre></td></tr></table></figure>\n\n<p>Lorem <mark class=\"label \">ipsum</mark> <mark class=\"label primary\">dolor sit</mark> amet, consectetur <mark class=\"label success\">adipiscing elit,</mark> sed <mark class=\"label info\">do eiusmod</mark> tempor incididunt ut labore et dolore magna aliqua.</p>\n<p>Ut enim <em><mark class=\"label warning\">ad</mark></em> minim veniam, quis <strong><mark class=\"label danger\">nostrud</mark></strong> exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n<p>Duis aute irure dolor in reprehenderit in voluptate <del><mark class=\"label default\">velit</mark></del> <mark>esse</mark> cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n"},{"title":"Note (Bootstrap Callout)","url":"/blog-next/docs/tag-plugins/note.html","content":"<h3 id=\"Settings\"><a href=\"#Settings\" class=\"headerlink\" title=\"Settings\"></a>Settings</h3><figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">note:</span></span><br><span class=\"line\">  <span class=\"comment\"># Note tag style values:</span></span><br><span class=\"line\">  <span class=\"comment\">#  - simple    bs-callout old alert style. Default.</span></span><br><span class=\"line\">  <span class=\"comment\">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class=\"line\">  <span class=\"comment\">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class=\"line\">  <span class=\"comment\">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">simple</span></span><br><span class=\"line\">  <span class=\"attr\">icons:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class=\"line\">  <span class=\"comment\"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class=\"line\">  <span class=\"attr\">light_bg_offset:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><figure class=\"highlight md\"><figcaption><span>note.js</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class=\"line\">Any content (support inline tags too).</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[class]   : Optional parameter.</span><br><span class=\"line\"><span class=\"code\">            Supported values: default | primary | success | info | warning | danger.</span></span><br><span class=\"line\"><span class=\"code\">[no-icon] : Optional parameter.</span></span><br><span class=\"line\"><span class=\"code\">            Disable icon in note.</span></span><br><span class=\"line\"><span class=\"code\">[summary] : Optional parameter.</span></span><br><span class=\"line\"><span class=\"code\">            Optional summary of the note.</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">All parameters are optional.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note %&#125;</span><br><span class=\"line\"><span class=\"section\">#### Header</span></span><br><span class=\"line\">(without define class style)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note \"><h4 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h4><p>(without define class style)</p>\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note default %&#125;</span><br><span class=\"line\"><span class=\"section\">#### Default Header</span></span><br><span class=\"line\">Welcome to [<span class=\"string\">Hexo!</span>](<span class=\"link\">https://hexo.io</span>)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note default\"><h4 id=\"Default-Header\"><a href=\"#Default-Header\" class=\"headerlink\" title=\"Default Header\"></a>Default Header</h4><p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo!<i class=\"fa fa-external-link-alt\"></i></span></p>\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note primary %&#125;</span><br><span class=\"line\"><span class=\"section\">#### Primary Header</span></span><br><span class=\"line\"><span class=\"strong\">**Welcome**</span> to [<span class=\"string\">Hexo!</span>](<span class=\"link\">https://hexo.io</span>)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note primary\"><h4 id=\"Primary-Header\"><a href=\"#Primary-Header\" class=\"headerlink\" title=\"Primary Header\"></a>Primary Header</h4><p><strong>Welcome</strong> to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo!<i class=\"fa fa-external-link-alt\"></i></span></p>\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note info %&#125;</span><br><span class=\"line\"><span class=\"section\">#### Info Header</span></span><br><span class=\"line\"><span class=\"strong\">**Welcome**</span> to [<span class=\"string\">Hexo!</span>](<span class=\"link\">https://hexo.io</span>)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><h4 id=\"Info-Header\"><a href=\"#Info-Header\" class=\"headerlink\" title=\"Info Header\"></a>Info Header</h4><p><strong>Welcome</strong> to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo!<i class=\"fa fa-external-link-alt\"></i></span></p>\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note success %&#125;</span><br><span class=\"line\"><span class=\"section\">#### Success Header</span></span><br><span class=\"line\"><span class=\"strong\">**Welcome**</span> to [<span class=\"string\">Hexo!</span>](<span class=\"link\">https://hexo.io</span>)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note success\"><h4 id=\"Success-Header\"><a href=\"#Success-Header\" class=\"headerlink\" title=\"Success Header\"></a>Success Header</h4><p><strong>Welcome</strong> to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo!<i class=\"fa fa-external-link-alt\"></i></span></p>\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note warning %&#125;</span><br><span class=\"line\"><span class=\"section\">#### Warning Header</span></span><br><span class=\"line\"><span class=\"strong\">**Welcome**</span> to [<span class=\"string\">Hexo!</span>](<span class=\"link\">https://hexo.io</span>)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning\"><h4 id=\"Warning-Header\"><a href=\"#Warning-Header\" class=\"headerlink\" title=\"Warning Header\"></a>Warning Header</h4><p><strong>Welcome</strong> to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo!<i class=\"fa fa-external-link-alt\"></i></span></p>\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note danger %&#125;</span><br><span class=\"line\"><span class=\"section\">#### Danger Header</span></span><br><span class=\"line\"><span class=\"strong\">**Welcome**</span> to [<span class=\"string\">Hexo!</span>](<span class=\"link\">https://hexo.io</span>)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note danger\"><h4 id=\"Danger-Header\"><a href=\"#Danger-Header\" class=\"headerlink\" title=\"Danger Header\"></a>Danger Header</h4><p><strong>Welcome</strong> to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo!<i class=\"fa fa-external-link-alt\"></i></span></p>\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note info no-icon %&#125;</span><br><span class=\"line\"><span class=\"section\">#### No icon note</span></span><br><span class=\"line\">Note <span class=\"strong\">**without**</span> icon: <span class=\"code\">`note info no-icon`</span></span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info no-icon\"><h4 id=\"No-icon-note\"><a href=\"#No-icon-note\" class=\"headerlink\" title=\"No icon note\"></a>No icon note</h4><p>Note <strong>without</strong> icon: <code>note info no-icon</code></p>\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note primary This is a summary %&#125;</span><br><span class=\"line\"><span class=\"section\">#### Details and summary</span></span><br><span class=\"line\">Note with summary: <span class=\"code\">`note primary This is a summary`</span></span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<details class=\"note primary\"><summary><p>This is a summary</p>\n</summary>\n<h4 id=\"Details-and-summary\"><a href=\"#Details-and-summary\" class=\"headerlink\" title=\"Details and summary\"></a>Details and summary</h4><p>Note with summary: <code>note primary This is a summary</code></p>\n\n</details>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note info no-icon This is a summary %&#125;</span><br><span class=\"line\"><span class=\"section\">#### Details and summary (No icon)</span></span><br><span class=\"line\">Note with summary: <span class=\"code\">`note info no-icon This is a summary`</span></span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<details class=\"note info no-icon\"><summary><p>This is a summary</p>\n</summary>\n<h4 id=\"Details-and-summary-No-icon\"><a href=\"#Details-and-summary-No-icon\" class=\"headerlink\" title=\"Details and summary (No icon)\"></a>Details and summary (No icon)</h4><p>Note with summary: <code>note info no-icon This is a summary</code></p>\n\n</details>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note success %&#125;</span><br><span class=\"line\"><span class=\"section\">#### Codeblock in note</span></span><br><span class=\"line\">&#123;% code %&#125;</span><br><span class=\"line\">code block in note tag</span><br><span class=\"line\">code block in note tag</span><br><span class=\"line\">code block in note tag</span><br><span class=\"line\">&#123;% endcode %&#125;</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note success\"><h4 id=\"Codeblock-in-note\"><a href=\"#Codeblock-in-note\" class=\"headerlink\" title=\"Codeblock in note\"></a>Codeblock in note</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">code block in note tag</span><br><span class=\"line\">code block in note tag</span><br><span class=\"line\">code block in note tag</span><br></pre></td></tr></table></figure></div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note default %&#125;</span><br><span class=\"line\"><span class=\"section\">#### Lists in note</span></span><br><span class=\"line\"><span class=\"bullet\">*</span> ul</span><br><span class=\"line\"><span class=\"bullet\">*</span> ul</span><br><span class=\"line\"><span class=\"bullet\">  *</span> ul</span><br><span class=\"line\"><span class=\"bullet\">  *</span> ul</span><br><span class=\"line\"><span class=\"bullet\">*</span> ul</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> ol</span><br><span class=\"line\"><span class=\"bullet\">2.</span> ol</span><br><span class=\"line\"><span class=\"bullet\">  1.</span> ol</span><br><span class=\"line\"><span class=\"bullet\">  2.</span> ol</span><br><span class=\"line\"><span class=\"bullet\">3.</span> ol</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note default\"><h4 id=\"Lists-in-note\"><a href=\"#Lists-in-note\" class=\"headerlink\" title=\"Lists in note\"></a>Lists in note</h4><ul>\n<li>ul</li>\n<li>ul<ul>\n<li>ul</li>\n<li>ul</li>\n</ul>\n</li>\n<li>ul</li>\n</ul>\n<ol>\n<li>ol</li>\n<li>ol</li>\n<li>ol</li>\n<li>ol</li>\n<li>ol</li>\n</ol>\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">#### Table in Note</span></span><br><span class=\"line\">&#123;% note default %&#125;</span><br><span class=\"line\">| 1 | 2 |</span><br><span class=\"line\">| - | - |</span><br><span class=\"line\">| 3 | 4 |</span><br><span class=\"line\">| 5 | 6 |</span><br><span class=\"line\">| 7 | 8 |</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note default\"><h4 id=\"Table-in-note\"><a href=\"#Table-in-note\" class=\"headerlink\" title=\"Table in note\"></a>Table in note</h4><table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>3</td>\n<td>4</td>\n</tr>\n<tr>\n<td>5</td>\n<td>6</td>\n</tr>\n<tr>\n<td>7</td>\n<td>8</td>\n</tr>\n</tbody></table>\n</div>\n"},{"title":"Mermaid","url":"/blog-next/docs/tag-plugins/mermaid.html","content":"<h3 id=\"Settings\"><a href=\"#Settings\" class=\"headerlink\" title=\"Settings\"></a>Settings</h3><figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Mermaid tag</span></span><br><span class=\"line\"><span class=\"attr\">mermaid:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Available themes: default | dark | forest | neutral</span></span><br><span class=\"line\">  <span class=\"attr\">theme:</span> <span class=\"string\">forest</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><figure class=\"highlight md\"><figcaption><span>mermaid.js</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% mermaid type %&#125;</span><br><span class=\"line\">&#123;% endmermaid %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type : type of the mermaid chart, visit https://github.com/mermaid-js/mermaid for more information.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% mermaid graph TD %&#125;</span><br><span class=\"line\">A[Hard] --&gt;|Text| B(Round)</span><br><span class=\"line\">B --&gt; C&#123;Decision&#125;</span><br><span class=\"line\">C --&gt;|One| D[Result 1]</span><br><span class=\"line\">C --&gt;|Two| E[Result 2]</span><br><span class=\"line\">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"mermaid\">\ngraph TD\nA[Hard] --&gt;|Text| B(Round)\nB --&gt; C{Decision}\nC --&gt;|One| D[Result 1]\nC --&gt;|Two| E[Result 2]\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% mermaid sequenceDiagram %&#125;</span><br><span class=\"line\">Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class=\"line\">loop Healthcheck</span><br><span class=\"line\"><span class=\"code\">    John-&gt;&gt;John: Fight against hypochondria</span></span><br><span class=\"line\"><span class=\"code\">end</span></span><br><span class=\"line\"><span class=\"code\">Note right of John: Rational thoughts!</span></span><br><span class=\"line\"><span class=\"code\">John--&gt;&gt;Alice: Great!</span></span><br><span class=\"line\"><span class=\"code\">John-&gt;&gt;Bob: How about you?</span></span><br><span class=\"line\"><span class=\"code\">Bob--&gt;&gt;John: Jolly good!</span></span><br><span class=\"line\"><span class=\"code\">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"mermaid\">\nsequenceDiagram\nAlice-&gt;&gt;John: Hello John, how are you?\nloop Healthcheck\n    John-&gt;&gt;John: Fight against hypochondria\nend\nNote right of John: Rational thoughts!\nJohn--&gt;&gt;Alice: Great!\nJohn-&gt;&gt;Bob: How about you?\nBob--&gt;&gt;John: Jolly good!\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% mermaid gantt %&#125;</span><br><span class=\"line\">section Section</span><br><span class=\"line\">Completed :done,    des1, 2014-01-06,2014-01-08</span><br><span class=\"line\">Active        :active,  des2, 2014-01-07, 3d</span><br><span class=\"line\">Parallel 1   :         des3, after des1, 1d</span><br><span class=\"line\">Parallel 2   :         des4, after des1, 1d</span><br><span class=\"line\">Parallel 3   :         des5, after des3, 1d</span><br><span class=\"line\">Parallel 4   :         des6, after des4, 1d</span><br><span class=\"line\">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"mermaid\">\ngantt\nsection Section\nCompleted :done,    des1, 2014-01-06,2014-01-08\nActive        :active,  des2, 2014-01-07, 3d\nParallel 1   :         des3, after des1, 1d\nParallel 2   :         des4, after des1, 1d\nParallel 3   :         des5, after des3, 1d\nParallel 4   :         des6, after des4, 1d\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% mermaid classDiagram %&#125;</span><br><span class=\"line\">Class01 &lt;|-- AveryLongClass : Cool</span><br><span class=\"line\">&lt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">interface</span>&gt;</span></span>&gt; Class01</span><br><span class=\"line\">Class09 --&gt; C2 : Where am i?</span><br><span class=\"line\">Class09 --<span class=\"emphasis\">* C3</span></span><br><span class=\"line\"><span class=\"emphasis\">Class09 --|&gt; Class07</span></span><br><span class=\"line\"><span class=\"emphasis\">Class07 : equals()</span></span><br><span class=\"line\"><span class=\"emphasis\">Class07 : Object[] elementData</span></span><br><span class=\"line\"><span class=\"emphasis\">Class01 : size()</span></span><br><span class=\"line\"><span class=\"emphasis\">Class01 : int chimp</span></span><br><span class=\"line\"><span class=\"emphasis\">Class01 : int gorilla</span></span><br><span class=\"line\"><span class=\"emphasis\">class Class10 &#123;</span></span><br><span class=\"line\"><span class=\"emphasis\">  &lt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">service</span>&gt;</span></span>&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\">  int id</span></span><br><span class=\"line\"><span class=\"emphasis\">  size()</span></span><br><span class=\"line\"><span class=\"emphasis\">&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"mermaid\">\nclassDiagram\nClass01 &lt;|-- AveryLongClass : Cool\n&lt;&lt;interface&gt;&gt; Class01\nClass09 --&gt; C2 : Where am i?\nClass09 --* C3\nClass09 --|&gt; Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nclass Class10 {\n  &lt;&lt;service&gt;&gt;\n  int id\n  size()\n}\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% mermaid stateDiagram %&#125;</span><br><span class=\"line\">[<span class=\"emphasis\">*] --&gt; Still</span></span><br><span class=\"line\"><span class=\"emphasis\">Still --&gt; [*</span>]</span><br><span class=\"line\">Still --&gt; Moving</span><br><span class=\"line\">Moving --&gt; Still</span><br><span class=\"line\">Moving --&gt; Crash</span><br><span class=\"line\">Crash --&gt; [<span class=\"emphasis\">*]</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"mermaid\">\nstateDiagram\n[*] --&gt; Still\nStill --&gt; [*]\nStill --&gt; Moving\nMoving --&gt; Still\nMoving --&gt; Crash\nCrash --&gt; [*]\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% mermaid pie %&#125;</span><br><span class=\"line\">&quot;Dogs&quot; : 386</span><br><span class=\"line\">&quot;Cats&quot; : 85</span><br><span class=\"line\">&quot;Rats&quot; : 15</span><br><span class=\"line\">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"mermaid\">\npie\n&quot;Dogs&quot; : 386\n&quot;Cats&quot; : 85\n&quot;Rats&quot; : 15\n</div>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% mermaid journey %&#125;</span><br><span class=\"line\">title My working day</span><br><span class=\"line\">section Go to work</span><br><span class=\"line\">  Make tea: 5: Me</span><br><span class=\"line\">  Go upstairs: 3: Me</span><br><span class=\"line\">  Do work: 1: Me, Cat</span><br><span class=\"line\">section Go home</span><br><span class=\"line\">  Go downstairs: 5: Me</span><br><span class=\"line\">  Sit down: 3: Me</span><br><span class=\"line\">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"mermaid\">\njourney\ntitle My working day\nsection Go to work\n  Make tea: 5: Me\n  Go upstairs: 3: Me\n  Do work: 1: Me, Cat\nsection Go home\n  Go downstairs: 5: Me\n  Sit down: 3: Me\n</div>\n"},{"title":"PDF","url":"/blog-next/docs/tag-plugins/pdf.html","content":"<h3 id=\"Settings\"><a href=\"#Settings\" class=\"headerlink\" title=\"Settings\"></a>Settings</h3><figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pdf:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Default height</span></span><br><span class=\"line\">  <span class=\"attr\">height:</span> <span class=\"string\">500px</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><figure class=\"highlight md\"><figcaption><span>pdf.js</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% pdf url [height] %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">url      : The URL (Absolute path) of the PDF file.</span><br><span class=\"line\">[height] : Optional parameter.</span><br><span class=\"line\"><span class=\"code\">           Height of the PDF display element, e.g. 800px.</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning\"><p>The loading of pdf.js or pdf file might be blocked by CORS policy. If you want to load resources from another website, make sure the Access-Control-Allow-Origin header is set correctly. See also <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbg==\">Access-Control-Allow-Origin - HTTP | MDN<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n</div>\n\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% pdf https://example.com/sample.pdf %&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% pdf /path/to/your/file.pdf 600px %&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Footer","url":"/blog-next/docs/theme-settings/footer.html","content":"<h3 id=\"Site-Footer-Setting\"><a href=\"#Site-Footer-Setting\" class=\"headerlink\" title=\"Site Footer Setting\"></a>Site Footer Setting</h3><h4 id=\"Site-Start-Time\"><a href=\"#Site-Start-Time\" class=\"headerlink\" title=\"Site Start Time\"></a>Site Start Time</h4><p>By default NexT shows current year in the footer like <code>© 2020</code>. You can configure it to show the time gap like <code>© 2015 - 2020</code> by editing values in <code>since</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"attr\">since:</span> <span class=\"number\">2015</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Site-Footer-Icon\"><a href=\"#Site-Footer-Icon\" class=\"headerlink\" title=\"Site Footer Icon\"></a>Site Footer Icon</h4><p>By default NexT shows red <code>heart</code> icon <a class=\"btn\" href=\"#\"><i class=\"fa fa-heart\"></i></a> with animation between year and copyright information in the footer. You can configure it by editing values in <code>icon</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<div class=\"tabs\" id=\"icon\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#icon-1\"><code>name</code></a></li><li class=\"tab\"><a href=\"#icon-2\"><code>animated</code></a></li><li class=\"tab\"><a href=\"#icon-3\"><code>color</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"icon-1\"><p>The name of footer icon can be founded in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb250YXdlc29tZS5jb20v\">Font Awesome<i class=\"fa fa-external-link-alt\"></i></span> site. <code>heart</code> is recommended.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"attr\">icon:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"icon-2\"><p>Set up animated of footer icon by changing the value of <code>icon.animated</code>:</p>\n<ul>\n<li><strong><code>true</code></strong> → Icon will be animated.</li>\n<li><code>false</code> → Icon will not be animated.</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"attr\">icon:</span></span><br><span class=\"line\">    <span class=\"attr\">animated:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"icon-3\"><p>Set up color of footer icon by changing the value of <code>icon.color</code>. Please use Hex Code, and red (#ff0000) is recommended for <code>heart</code> icon.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"attr\">icon:</span></span><br><span class=\"line\">    <span class=\"attr\">color:</span> <span class=\"string\">&quot;#808080&quot;</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h4 id=\"Site-Copyright-Name\"><a href=\"#Site-Copyright-Name\" class=\"headerlink\" title=\"Site Copyright Name\"></a>Site Copyright Name</h4><p>By default NexT shows the name of <code>author</code> from <mark class=\"label info\">site config file</mark>. You can configure it by editing values in <code>copyright</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"attr\">copyright:</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Site-Platform-Information\"><a href=\"#Site-Platform-Information\" class=\"headerlink\" title=\"Site Platform Information\"></a>Site Platform Information</h4><p>By default NexT shows Hexo and Theme &amp; scheme information like <code>Powered by Hexo &amp; NexT.Muse</code>. You can configure it by editing <code>powered</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"attr\">powered:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Site-Beian-Information\"><a href=\"#Site-Beian-Information\" class=\"headerlink\" title=\"Site Beian Information\"></a>Site Beian Information</h4><p>Beian information is for Chinese users. By default NexT will not show the information of beian. You can configure it by editing values in <code>beian</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">footer:</span></span><br><span class=\"line\">  <span class=\"attr\">beian:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">icp:</span> <span class=\"string\">京ICP备</span> <span class=\"number\">1234567890</span><span class=\"string\">号-1</span></span><br><span class=\"line\">    <span class=\"attr\">gongan_id:</span> <span class=\"number\">1234567890</span></span><br><span class=\"line\">    <span class=\"attr\">gongan_num:</span> <span class=\"string\">京公网安备</span> <span class=\"number\">1234567890</span><span class=\"string\">号</span></span><br><span class=\"line\">    <span class=\"attr\">gongan_icon_url:</span> <span class=\"string\">/uploads/beian.png</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Custom Pages","url":"/blog-next/docs/theme-settings/custom-pages.html","content":"<h3 id=\"Custom-Page-Support\"><a href=\"#Custom-Page-Support\" class=\"headerlink\" title=\"Custom Page Support\"></a>Custom Page Support</h3><p>Next allows users to add custom pages in menu.</p>\n<div class=\"tabs\" id=\"adding-custom-page\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#adding-custom-page-1\">Adding New Page →</a></li><li class=\"tab\"><a href=\"#adding-custom-page-2\">Setting Front-matter Values →</a></li><li class=\"tab\"><a href=\"#adding-custom-page-3\">Editting Menu</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"adding-custom-page-1\"><p>Change to <mark class=\"label info\">site root directory</mark> in your terminal. Use <code>hexo new page custom-name</code> to create a new <code>custom-name</code> page:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ hexo new page custom-name</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"adding-custom-page-2\"><p>Front-matter is a block of YAML or JSON at the beginning of the file that is used to configure settings for your writings. Settings front-matter values and more detailed can be found in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZnJvbnQtbWF0dGVy\">front-matter<i class=\"fa fa-external-link-alt\"></i></span>. You can also add contents in <code>custom-name/index.md</code> if you like.</p>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: custom-name</span><br><span class=\"line\"><span class=\"section\">date: 2014-12-22 12:39:04</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"adding-custom-page-3\"><p>Add <code>custom-name</code> to <code>menu</code> by editing <mark class=\"label primary\">theme config file</mark>, like adding <code>about</code> page:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>If you want to add Tags or Categories page, please continue reading.<br>Please read <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZnJvbnQtbWF0dGVyI0NhdGVnb3JpZXMtYW1wLVRhZ3M=\">Hexo&#39;s Docs of Categories &amp; Tags<i class=\"fa fa-external-link-alt\"></i></span> to know how to add tags or categories for articles.<br>Following code shows you a example of article with tags:</p>\n<div class=\"tabs\" id=\"tags-variants\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#tags-variants-1\">Variant 1</a></li><li class=\"tab\"><a href=\"#tags-variants-2\">Variant 2</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"tags-variants-1\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: Tags Testing Article</span><br><span class=\"line\"><span class=\"section\">tags: [Testing, Another Tag]</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"tags-variants-2\"><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: Tags Testing Article</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"bullet\">  -</span> Testing</span><br><span class=\"line\"><span class=\"section\">  - Another Tag</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"Use-Archive-Page-as-Home-Page\"><a href=\"#Use-Archive-Page-as-Home-Page\" class=\"headerlink\" title=\"Use Archive Page as Home Page\"></a>Use Archive Page as Home Page</h3><p>You can configure the path of archive and index generator in <mark class=\"label info\">site config file</mark>, e.g.</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">archive_dir:</span> <span class=\"string\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">index_generator:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">archives</span></span><br><span class=\"line\">  <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Adding-«Tags»-Page\"><a href=\"#Adding-«Tags»-Page\" class=\"headerlink\" title=\"Adding «Tags» Page\"></a>Adding «Tags» Page</h3><p>Adding «Tags» page and show «Tags» link in menu. «Tags» page will show all tags of site. If no article has tags, this page will leave blank.</p>\n<div class=\"tabs\" id=\"adding-tags-page\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#adding-tags-page-1\">Adding New Page →</a></li><li class=\"tab\"><a href=\"#adding-tags-page-2\">Setting Page Type →</a></li><li class=\"tab\"><a href=\"#adding-tags-page-3\">Editting Menu</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"adding-tags-page-1\"><p>Change to <mark class=\"label info\">site root directory</mark> in your terminal. Use <code>hexo new page tags</code> to create a new <code>tags</code> page:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"adding-tags-page-2\"><p>Edit the new page and change the type to <code>tags</code>, theme will show tags cloud automatically in this page. Page content looks like following:</p>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: Tags</span><br><span class=\"line\">date: 2014-12-22 12:39:04</span><br><span class=\"line\"><span class=\"section\">type: tags</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"adding-tags-page-3\"><p>Add <code>tags</code> to <code>menu</code> by editing <mark class=\"label primary\">theme config file</mark>, like following:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<div class=\"note warning\"><p>If you enable any comment system for your site, comments will be shown for all posts and pages.<br>See <a href=\"/docs/third-party-services/comments.html#How-to-Disable-Comments-on-Page\">«How to Disable Comments on Page»</a> if you want to do it for pages like <code>tags</code> or <code>categories</code>.</p>\n</div>\n\n<h4 id=\"Tagcloud\"><a href=\"#Tagcloud\" class=\"headerlink\" title=\"Tagcloud\"></a>Tagcloud</h4><p>By default, NexT has setted font color and size for tagcloud in tags page.<br>From NexT v7.0.2 you can customize them, just set related values in <mark class=\"label primary\">theme config file</mark>:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># TagCloud settings for tags page.</span></span><br><span class=\"line\"><span class=\"attr\">tagcloud:</span></span><br><span class=\"line\">  <span class=\"attr\">min:</span> <span class=\"number\">12</span> <span class=\"comment\"># Minimun font size in px</span></span><br><span class=\"line\">  <span class=\"attr\">max:</span> <span class=\"number\">30</span> <span class=\"comment\"># Maxium font size in px</span></span><br><span class=\"line\">  <span class=\"attr\">amount:</span> <span class=\"number\">200</span> <span class=\"comment\"># Total amount of tags</span></span><br><span class=\"line\">  <span class=\"attr\">orderby:</span> <span class=\"string\">name</span> <span class=\"comment\"># Order of tags</span></span><br><span class=\"line\">  <span class=\"attr\">order:</span> <span class=\"number\">1</span> <span class=\"comment\"># Sort order</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Adding-«Categories»-Page\"><a href=\"#Adding-«Categories»-Page\" class=\"headerlink\" title=\"Adding «Categories» Page\"></a>Adding «Categories» Page</h3><div class=\"note default\"><p>«Categories» page can be added in similar way as <a href=\"#Adding-%C2%ABTags%C2%BB-Page\">«Tags» page</a>, only name there is difference: just need to replace <code>tags</code> with <code>categories</code>.</p>\n</div>\n\n<h3 id=\"Adding-Google-Calendar-Page\"><a href=\"#Adding-Google-Calendar-Page\" class=\"headerlink\" title=\"Adding Google Calendar Page\"></a>Adding Google Calendar Page</h3><div class=\"tabs\" id=\"calendar\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#calendar-1\">Setting Google Calendar →</a></li><li class=\"tab\"><a href=\"#calendar-2\">Adding Schedule Page →</a></li><li class=\"tab\"><a href=\"#calendar-3\">Setting Page Type →</a></li><li class=\"tab\"><a href=\"#calendar-4\">Editting Menu</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"calendar-1\"><div class=\"tabs\" id=\"calendar1\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#calendar1-1\">Get calendar ID and API KEY →</a></li><li class=\"tab\"><a href=\"#calendar1-2\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"calendar1-1\"><p>Login to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb25zb2xlLmRldmVsb3BlcnMuZ29vZ2xlLmNvbS9mbG93cy9lbmFibGVhcGk/YXBpaWQ9Y2FsZW5kYXI=\">Google developers<i class=\"fa fa-external-link-alt\"></i></span> and add Google Calendar API, you will get your calendar ID and API KEY. <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vY2FsZW5kYXIvcXVpY2tzdGFydC9qcw==\">More detailed documentation<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>References:</p>\n<ul>\n<li>API Documentation: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vZ29vZ2xlLWFwcHMvY2FsZW5kYXIvdjMvcmVmZXJlbmNlL2V2ZW50cy9saXN0\">https://developers.google.com/google-apps/calendar/v3/reference/events/list<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>To get api_key: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb25zb2xlLmRldmVsb3BlcnMuZ29vZ2xlLmNvbS8=\">https://console.developers.google.com<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Create &amp; manage a public Google calendar: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vY2FsZW5kYXIvYW5zd2VyLzM3MDgz\">https://support.google.com/calendar/answer/37083<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul></div><div class=\"tab-pane\" id=\"calendar1-2\"><p>You can enable it by setting values in <code>calendar</code> part. Copy the value of calendar ID and API KEY in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">calendar:</span></span><br><span class=\"line\">  <span class=\"attr\">calendar_id:</span> <span class=\"string\">&lt;required&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">api_key:</span> <span class=\"string\">&lt;required&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">orderBy:</span> <span class=\"string\">startTime</span></span><br><span class=\"line\">  <span class=\"attr\">showLocation:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">offsetMax:</span> <span class=\"number\">72</span></span><br><span class=\"line\">  <span class=\"attr\">offsetMin:</span> <span class=\"number\">4</span></span><br><span class=\"line\">  <span class=\"attr\">showDeleted:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">singleEvents:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">maxResults:</span> <span class=\"number\">250</span></span><br></pre></td></tr></table></figure></div></div></div></div><div class=\"tab-pane\" id=\"calendar-2\"><p>Change to <mark class=\"label info\">site root directory</mark> in your terminal. Use <code>hexo new page schedule</code> to create a new <code>schedule</code> page:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ hexo new page schedule</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"calendar-3\"><p>Edit the new page and change the type to <code>schedule</code>, theme will show schedule automatically in this page. Page content looks like following:</p>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: Schedule</span><br><span class=\"line\">date: 2014-12-22 12:39:04</span><br><span class=\"line\"><span class=\"section\">type: schedule</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"calendar-4\"><p>Add <code>schedule</code> to <code>menu</code> by editing <mark class=\"label primary\">theme config file</mark>:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span> <span class=\"string\">/schedule/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-calendar</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"Custom-404-Page\"><a href=\"#Custom-404-Page\" class=\"headerlink\" title=\"Custom 404 Page\"></a>Custom 404 Page</h3><p>In your terminal, change to the <code>source</code> folder of <mark class=\"label info\">site root directory</mark>. Create a new folder called <code>404</code>, then create a new page in it:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ hexo new page 404</span><br></pre></td></tr></table></figure>\n\n<p>Make sure <code>relative_link</code> is disabled in <mark class=\"label info\">site config file</mark>:</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning\"><p>Whether users can be redirected to the 404 page depends on the settings of the website hosting service or web server, not Hexo. For example, if you use Nginx as the server, you also need to configure the 404 page in <code>nginx.conf</code> file.</p>\n</div>\n\n<h4 id=\"Commonweal-404\"><a href=\"#Commonweal-404\" class=\"headerlink\" title=\"Commonweal 404\"></a>Commonweal 404</h4><p>If you would like to enable <code>commonweal 404</code> (A service provided by Tencent in China), Edit <code>404/index.md</code> like this:</p>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &#x27;404&#x27;</span><br><span class=\"line\">date: 2014-12-22 12:39:04</span><br><span class=\"line\"><span class=\"section\">comments: false</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">        <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> <span class=\"attr\">homePageUrl</span>=<span class=\"string\">&quot;/&quot;</span> <span class=\"attr\">homePageName</span>=<span class=\"string\">&quot;Back to home&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>You can also add any content you want to it.</p>\n<p>Add <code>404</code> to <code>menu</code> by editing <mark class=\"label primary\">theme config file</mark>:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"attr\">commonweal:</span> <span class=\"string\">/404/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Theme Settings","url":"/blog-next/docs/theme-settings/index.html","content":"<p>One of the guiding principles of NexT is to hide complex details and give you a simple but flexible config, so you can use it easily.</p>\n<div class=\"note info\"><p>The values given in the document are often typical allowable values rather than default values. They may be different from those in <mark class=\"label primary\">theme config file</mark>.</p>\n</div>\n\n<h3 id=\"NexT-Quick-Start\"><a href=\"#NexT-Quick-Start\" class=\"headerlink\" title=\"NexT Quick Start\"></a>NexT Quick Start</h3><h4 id=\"Cache-Support\"><a href=\"#Cache-Support\" class=\"headerlink\" title=\"Cache Support\"></a>Cache Support</h4><p>NexT v6+ allows to cache content generation. Set the value <code>enable</code> to <code>true</code> in <code>cache</code> section in <mark class=\"label primary\">theme config file</mark> as following:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Allow to cache content generation. Introduced in NexT v6.0.0.</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Minify-Support\"><a href=\"#Minify-Support\" class=\"headerlink\" title=\"Minify Support\"></a>Minify Support</h4><p>NexT allows to minify Hexo generation. Set the value <code>minify</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark> as following:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Remove unnecessary files after hexo generate.</span></span><br><span class=\"line\"><span class=\"attr\">minify:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Choosing-Scheme\"><a href=\"#Choosing-Scheme\" class=\"headerlink\" title=\"Choosing Scheme\"></a>Choosing Scheme</h4><p>Scheme is a feature supported by NexT, by using Scheme NexT gives you different views. And nearly all config can be used by those Schemes. Till now NexT supports 4 schemes, and they are:</p>\n<ul>\n<li><strong><code>Muse</code></strong> → Default Scheme, this is the initial version of NexT. Uses black-white tone and mainly looks cleanly.</li>\n<li><code>Mist</code> → A tighter version of Muse with a tidy single-column view.</li>\n<li><code>Pisces</code> → Double-column Scheme, fresh like your neighbor&#39;s daughter.</li>\n<li><code>Gemini</code> → Looks like Pisces, but have distinct column blocks with shadow to appear more sensitive to view.</li>\n</ul>\n<p>You can change Scheme by editing <mark class=\"label primary\">theme config file</mark>, searching <code>scheme</code> keyword. You&#39;ll see 4 lines of scheme settings and can enable one of them by removing it&#39;s <code>#</code> and added <code>#</code> to previous.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Gemini</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Dark-Mode\"><a href=\"#Dark-Mode\" class=\"headerlink\" title=\"Dark Mode\"></a>Dark Mode</h4><p>You can enable Dark Mode by setting <code>darkmode</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">darkmode:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>The <code>prefers-color-scheme</code> CSS media feature is used to bring Dark Mode to all 4 schemes above, make sure your browser supports it.</p>\n<iframe data-feature=\"prefers-color-scheme\" src=\"https://caniuse.bitsofco.de/embed/index.html?feat=prefers-color-scheme&periods=current,past_1,past_2,past_3,past_4,past_5&accessible-colours=false\" frameborder=\"0\" width=\"100%\" height=\"400px\"></iframe>\n\n<p>Theme NexT automatically shows Dark Mode if the OS prefered theme is dark. It&#39;s supported by macOS Mojave, iOS 13 and Android 10 or later. Relevant docs:<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9lbi11cy9IVDIwODk3Ng==\">How to use Dark Mode on your Mac<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9lbi11cy9IVDIxMDMzMg==\">Use Dark Mode on your iPhone, iPad, or iPod touch<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvdG9waWNzL3VpL2xvb2stYW5kLWZlZWwvZGFya3RoZW1l\">Dark theme | Android Developers<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"Configuring-Favicon\"><a href=\"#Configuring-Favicon\" class=\"headerlink\" title=\"Configuring Favicon\"></a>Configuring Favicon</h4><p>By default the Hexo site use NexT favicons in <code>hexo-site/themes/next/source/images/</code> directory with different size for different device. You can replace them with your own favicons.</p>\n<p>For example, you can put your favicons in <code>hexo-site/source/images/</code> directory. Then you need to rename them and change the settings in <code>favicon</code> section in <mark class=\"label primary\">theme config file</mark>, otherwise icons from Next will rewrite your custom icons in Hexo.</p>\n<p>You can also put custom favicons into <code>hexo-site/source/</code> directory. In this way, you <strong>must remove</strong> <code>/images</code> prefix from paths.</p>\n<p>To generate custom favicons, you can visit <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWFsZmF2aWNvbmdlbmVyYXRvci5uZXQv\">Favicon Generator<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\">  <span class=\"attr\">small:</span> <span class=\"string\">/images/favicon-16x16-next.png</span></span><br><span class=\"line\">  <span class=\"attr\">medium:</span> <span class=\"string\">/images/favicon-32x32-next.png</span></span><br><span class=\"line\">  <span class=\"attr\">apple_touch_icon:</span> <span class=\"string\">/images/apple-touch-icon-next.png</span></span><br><span class=\"line\">  <span class=\"attr\">safari_pinned_tab:</span> <span class=\"string\">/images/logo.svg</span></span><br><span class=\"line\">  <span class=\"attr\">android_manifest:</span> <span class=\"string\">/images/manifest.json</span></span><br><span class=\"line\">  <span class=\"attr\">ms_browserconfig:</span> <span class=\"string\">/images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Custom-Logo-Support\"><a href=\"#Custom-Logo-Support\" class=\"headerlink\" title=\"Custom Logo Support\"></a>Custom Logo Support</h4><p>NexT supports the site logo personalization.</p>\n<p>You can enable it by adding images&#39;s url to <code>custom_logo</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_logo:</span> <span class=\"string\">/uploads/custom-logo.jpg</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note danger\"><p>Scheme Mist does not support custom logo setting.</p>\n</div>\n\n<h4 id=\"Creative-Commons\"><a href=\"#Creative-Commons\" class=\"headerlink\" title=\"Creative Commons\"></a>Creative Commons</h4><p>NexT supports the display of <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnLw==\">Creative Commons 4.0 International License<i class=\"fa fa-external-link-alt\"></i></span> in sidebar and post including <code>by</code>, <code>by-nc</code>, <code>by-nc-nd</code>, <code>by-nc-sa</code>, <code>by-nd</code>, <code>by-sa</code>, <code>zero</code>. These licenses allow creators to communicate which rights they reserve, and which rights they waive for the benefit of recipients or other creators.</p>\n<p>You can configure it by editing values in <code>creative_commons</code> section in <mark class=\"label primary\">theme config file</mark>, for example:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">creative_commons:</span></span><br><span class=\"line\">  <span class=\"attr\">license:</span> <span class=\"string\">by-nc-sa</span></span><br><span class=\"line\">  <span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">post:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">deed.zh</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Configuring-Menu-Items\"><a href=\"#Configuring-Menu-Items\" class=\"headerlink\" title=\"Configuring Menu Items\"></a>Configuring Menu Items</h4><p>Menu settings items have format <code>Key: /link/ || icon</code> which contains 3 values:</p>\n<div class=\"tabs\" id=\"menu-items\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#menu-items-1\"><code>Key</code></a></li><li class=\"tab\"><a href=\"#menu-items-2\"><code>link</code></a></li><li class=\"tab\"><a href=\"#menu-items-3\"><code>icon</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"menu-items-1\"><p><code>Key</code> → is the name of menu item (<code>home</code>, <code>archives</code>, etc.).<br>If translate for this menu will be found in languages, this translate will be loaded; if not, <code>Key</code> name will be used.</p>\n<div class=\"note danger\"><p><code>Key</code> value is case sensitive (e.g. <code>home</code> is not same as <code>Home</code>).</p>\n</div></div><div class=\"tab-pane\" id=\"menu-items-2\"><p>Value before <code>||</code> delimeter (<code>/link/</code>) → is the target link to relative url inside your site.</p></div><div class=\"tab-pane\" id=\"menu-items-3\"><p>Value after <code>||</code> delimeter (<code>icon</code>) → is the name of Font Awesome icon.<br>Names of that icons can be found in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb250YXdlc29tZS5jb20v\">Font Awesome<i class=\"fa fa-external-link-alt\"></i></span> site.</p></div></div></div>\n\n<p>By default, all menu items are commented out to ensure that you can override them in the <a href=\"/docs/getting-started/configuration.html\">Alternate Theme Config</a>.<br>To customize menu items, edit the following content in <mark class=\"label primary\">theme config file</mark>:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"comment\">#tags: /tags/ || fa fa-tags</span></span><br><span class=\"line\">  <span class=\"comment\">#categories: /categories/ || fa fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note danger\"><p>Except <code>home</code> and <code>archives</code>, all custom pages under <code>menu</code> section need to be created manually. See <a href=\"/docs/theme-settings/custom-pages.html\">«Custom Page Support»</a>.</p>\n<p>Besides, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWdlbmVyYXRvci1zaXRlbWFw\">hexo-generator-sitemap<i class=\"fa fa-external-link-alt\"></i></span> plugin is required for <code>sitemap</code> support.</p>\n</div>\n\n<p>Dynamic sub-menu within hierarchy structure is also supported. Add your sub-menu items in <code>menu</code> section in <mark class=\"label primary\">theme config file</mark> as following:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"attr\">Docs:</span></span><br><span class=\"line\">    <span class=\"attr\">default:</span> <span class=\"string\">/docs/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-book</span></span><br><span class=\"line\">    <span class=\"attr\">Getting Started:</span></span><br><span class=\"line\">      <span class=\"attr\">default:</span> <span class=\"string\">/getting-started/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-flag</span></span><br><span class=\"line\">      <span class=\"attr\">Installation:</span> <span class=\"string\">/installation.html</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-download</span></span><br><span class=\"line\">      <span class=\"attr\">Configuration:</span> <span class=\"string\">/configuration.html</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-wrench</span></span><br><span class=\"line\">    <span class=\"attr\">Third Party Services:</span></span><br><span class=\"line\">      <span class=\"attr\">default:</span> <span class=\"string\">/third-party-services/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-puzzle-piece</span></span><br><span class=\"line\">      <span class=\"attr\">Math Equations:</span> <span class=\"string\">/math-equations.html</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-square-root-alt</span></span><br><span class=\"line\">      <span class=\"attr\">Comment Systems:</span> <span class=\"string\">/comments.html</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-comment-alt</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note danger\"><p>A <code>default</code> page is required for each sub-menu item.</p>\n</div>\n\n<p>By default NexT shows the icons of menu items without badges.</p>\n<div class=\"tabs\" id=\"menu_settings\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#menu_settings-1\"><code>icons</code></a></li><li class=\"tab\"><a href=\"#menu_settings-2\"><code>badges</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"menu_settings-1\"><p>You can configure it by editing values in <code>menu_settings.icons</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu_settings:</span></span><br><span class=\"line\">  <span class=\"attr\">icons:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"menu_settings-2\"><p>Set the value <code>badges</code> to <code>true</code> to display the count of Posts / Categories / Tags within menu items in <code>menu_settings</code> section in <mark class=\"label primary\">theme config file</mark> as following:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu_settings:</span></span><br><span class=\"line\">  <span class=\"attr\">badges:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div></div></div>\n"},{"title":"Internationalization","url":"/blog-next/docs/theme-settings/internationalization.html","content":"<h3 id=\"Choosing-Language\"><a href=\"#Choosing-Language\" class=\"headerlink\" title=\"Choosing Language\"></a>Choosing Language</h3><p>Edit <mark class=\"label info\">site config file</mark>, set the value of <code>language</code> to the language you need. For example, English looks like this:</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">en</span></span><br></pre></td></tr></table></figure>\n\n<p>NexT now supports following languages:</p>\n<table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Example</th>\n<th>Code</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Arabic</td>\n<td>عربي</td>\n<td><code>ar</code></td>\n</tr>\n<tr>\n<td>Chinese (Simplified)</td>\n<td>简体中文</td>\n<td><code>zh-CN</code></td>\n</tr>\n<tr>\n<td>Chinese (Traditional)</td>\n<td>繁體中文</td>\n<td><code>zh-TW</code></td>\n</tr>\n<tr>\n<td>Chinese (Hong Kong)</td>\n<td>繁體中文-香港</td>\n<td><code>zh-HK</code></td>\n</tr>\n<tr>\n<td>Dutch</td>\n<td>Niederländisch</td>\n<td><code>nl</code></td>\n</tr>\n<tr>\n<td>English</td>\n<td>English</td>\n<td><code>en</code></td>\n</tr>\n<tr>\n<td>French</td>\n<td>Français</td>\n<td><code>fr</code></td>\n</tr>\n<tr>\n<td>German</td>\n<td>Deutsch</td>\n<td><code>de</code></td>\n</tr>\n<tr>\n<td>Indonesian</td>\n<td>Indonesia</td>\n<td><code>id</code></td>\n</tr>\n<tr>\n<td>Italian</td>\n<td>Italiano</td>\n<td><code>it</code></td>\n</tr>\n<tr>\n<td>Japanese</td>\n<td>日本語</td>\n<td><code>ja</code></td>\n</tr>\n<tr>\n<td>Korean</td>\n<td>한국어</td>\n<td><code>ko</code></td>\n</tr>\n<tr>\n<td>Persian</td>\n<td>فارسی</td>\n<td><code>fa</code></td>\n</tr>\n<tr>\n<td>Portuguese</td>\n<td>Português</td>\n<td><code>pt</code></td>\n</tr>\n<tr>\n<td>Portuguese (Brazilian)</td>\n<td>Português (Brazilian)</td>\n<td><code>pt-BR</code></td>\n</tr>\n<tr>\n<td>Russian</td>\n<td>Русский</td>\n<td><code>ru</code></td>\n</tr>\n<tr>\n<td>Spanish</td>\n<td>Español</td>\n<td><code>es</code></td>\n</tr>\n<tr>\n<td>Turkish</td>\n<td>Türk</td>\n<td><code>tr</code></td>\n</tr>\n<tr>\n<td>Ukrainian</td>\n<td>Український</td>\n<td><code>uk</code></td>\n</tr>\n<tr>\n<td>Vietnamese</td>\n<td>Tiếng Việt</td>\n<td><code>vi</code></td>\n</tr>\n</tbody></table>\n<div class=\"note primary\"><p>The files in the <code>language</code> directory are automatically generated, you do not need to modify them directly. Please submit translations via <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcm93ZGluLmNvbS9wcm9qZWN0L2hleG8tdGhlbWUtbmV4dA==\">Crowdin<i class=\"fa fa-external-link-alt\"></i></span> if you would like to add or improve translation for NexT theme.</p>\n</div>\n\n<h3 id=\"Multilingual-Switcher\"><a href=\"#Multilingual-Switcher\" class=\"headerlink\" title=\"Multilingual Switcher\"></a>Multilingual Switcher</h3><p>Set multiple languages in <mark class=\"label info\">site config file</mark>, e.g.</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">en</span></span><br></pre></td></tr></table></figure>\n\n<p>Then turn on <code>language_switcher</code> in <mark class=\"label primary\">theme config file</mark>:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Show multilingual switcher in footer.</span></span><br><span class=\"line\"><span class=\"attr\">language_switcher:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Override-Default-Translations\"><a href=\"#Override-Default-Translations\" class=\"headerlink\" title=\"Override Default Translations\"></a>Override Default Translations</h3><p>If you would like to customize the default translation, you do not need to modify the translation files in the <code>languages</code> directory. You can override all translations using <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZGF0YS1maWxlcw==\">Data Files<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<ol>\n<li><p>Creat a <code>languages.yml</code> in <code>source/_data</code>.</p>\n</li>\n<li><p>Insert following codes: (be careful about the two-space indent)</p>\n <figure class=\"highlight yml\"><figcaption><span>languages.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># language</span></span><br><span class=\"line\"><span class=\"attr\">zh-CN:</span></span><br><span class=\"line\">  <span class=\"comment\"># items</span></span><br><span class=\"line\">  <span class=\"attr\">post:</span></span><br><span class=\"line\">    <span class=\"attr\">copyright:</span></span><br><span class=\"line\">      <span class=\"comment\"># the translation you perfer</span></span><br><span class=\"line\">      <span class=\"attr\">author:</span> <span class=\"string\">本文博主</span></span><br><span class=\"line\"><span class=\"attr\">en:</span></span><br><span class=\"line\">  <span class=\"attr\">menu:</span></span><br><span class=\"line\">    <span class=\"attr\">schedule:</span> <span class=\"string\">Calendar</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>This situation is also available for off-list items. For example, Next uses <a href=\"/docs/advanced-settings/injects.html\">Theme Inject</a> to introduce the commments systems. You can rename the returned value in chinese as followed:</p>\n<figure class=\"highlight yml\"><figcaption><span>languages.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># language</span></span><br><span class=\"line\"><span class=\"attr\">zh-CN:</span></span><br><span class=\"line\">  <span class=\"comment\"># items</span></span><br><span class=\"line\">  <span class=\"attr\">post:</span></span><br><span class=\"line\">    <span class=\"attr\">comments:</span></span><br><span class=\"line\">      <span class=\"attr\">valine:</span> <span class=\"string\">评论</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Misc Theme Settings","url":"/blog-next/docs/theme-settings/miscellaneous.html","content":"<h3 id=\"Text-Align\"><a href=\"#Text-Align\" class=\"headerlink\" title=\"Text Align\"></a>Text Align</h3><p>NexT allows to customize the text alignment in posts / pages. The <code>text-align</code> CSS property sets the horizontal alignment of a block element or table-cell box.</p>\n<table>\n<thead>\n<tr>\n<th>Values</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>start</code></td>\n<td>The same as <code>left</code> if direction is left-to-right and <code>right</code> if direction is right-to-left.</td>\n</tr>\n<tr>\n<td><code>end</code></td>\n<td>The same as <code>right</code> if direction is left-to-right and <code>left</code> if direction is right-to-left.</td>\n</tr>\n<tr>\n<td><code>left</code></td>\n<td>The inline contents are aligned to the left edge of the line box.</td>\n</tr>\n<tr>\n<td><code>right</code></td>\n<td>The inline contents are aligned to the right edge of the line box.</td>\n</tr>\n<tr>\n<td><code>center</code></td>\n<td>The inline contents are centered within the line box.</td>\n</tr>\n<tr>\n<td><code>justify</code></td>\n<td>The inline contents are justified. Text should be spaced to line up its left and right edges to the left and right edges of the line box, except for the last line.</td>\n</tr>\n<tr>\n<td><code>justify-all</code></td>\n<td>Same as <code>justify</code>, but also forces the last line to be justified.</td>\n</tr>\n<tr>\n<td><code>match-parent</code></td>\n<td>Similar to <code>inherit</code>, but the values <code>start</code> and <code>end</code> are calculated according to the parent&#39;s direction and are replaced by the appropriate <code>left</code> or <code>right</code> value.</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set the text alignment in the posts.</span></span><br><span class=\"line\"><span class=\"attr\">text_align:</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: start | end | left | right | center | justify | justify-all | match-parent</span></span><br><span class=\"line\">  <span class=\"attr\">desktop:</span> <span class=\"string\">justify</span></span><br><span class=\"line\">  <span class=\"attr\">mobile:</span> <span class=\"string\">justify</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mobile-Devices-Adaptation\"><a href=\"#Mobile-Devices-Adaptation\" class=\"headerlink\" title=\"Mobile Devices Adaptation\"></a>Mobile Devices Adaptation</h3><div class=\"tabs\" id=\"mobile-adaptation\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#mobile-adaptation-1\"><code>mobile_layout_economy</code></a></li><li class=\"tab\"><a href=\"#mobile-adaptation-2\"><code>android_chrome_color</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"mobile-adaptation-1\"><p>If you want to reduce padding/margin indents on devices with narrow width, you can enable it by setting value <code>mobile_layout_economy</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mobile_layout_economy:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"mobile-adaptation-2\"><p>By default NexT uses black-deep (<code>#222</code>) as the color of android Chrome header panel. You can configure it by editing values with Hex color in <code>android_chrome_color</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">android_chrome_color:</span> <span class=\"string\">&quot;#222&quot;</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"Codeblock-Style\"><a href=\"#Codeblock-Style\" class=\"headerlink\" title=\"Codeblock Style\"></a>Codeblock Style</h3><div class=\"tabs\" id=\"codeblock\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#codeblock-1\"><code>theme</code></a></li><li class=\"tab\"><a href=\"#codeblock-2\"><code>copy_button</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"codeblock-1\"><p>NexT uses the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oaWdobGlnaHRqcy5vcmcv\">Highlight.js<i class=\"fa fa-external-link-alt\"></i></span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcmlzbWpzLmNvbS8=\">Prism<i class=\"fa fa-external-link-alt\"></i></span> package to support code highlight.</p>\n<div class=\"note warning\"><p>Please read Hexo&#39;s documentation on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc3ludGF4LWhpZ2hsaWdodA==\">Syntax Highlighting<i class=\"fa fa-external-link-alt\"></i></span> first, and set it up in <mark class=\"label info\">site config file</mark>.</p>\n</div>\n\n<p>You can preview all available Code Highlight themes here: <span class=\"exturl\" data-url=\"aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9oaWdobGlnaHQv\">NexT Highlight Theme Preview<i class=\"fa fa-external-link-alt\"></i></span>. Change the value of <code>theme</code> and <code>prism</code> to choose the highlight style you like.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">codeblock:</span></span><br><span class=\"line\">  <span class=\"comment\"># Code Highlight theme</span></span><br><span class=\"line\">  <span class=\"comment\"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class=\"line\">  <span class=\"attr\">theme:</span></span><br><span class=\"line\">    <span class=\"attr\">light:</span> <span class=\"string\">default</span></span><br><span class=\"line\">    <span class=\"attr\">dark:</span> <span class=\"string\">tomorrow-night</span></span><br><span class=\"line\">  <span class=\"attr\">prism:</span></span><br><span class=\"line\">    <span class=\"attr\">light:</span> <span class=\"string\">prism</span></span><br><span class=\"line\">    <span class=\"attr\">dark:</span> <span class=\"string\">prism-dark</span></span><br></pre></td></tr></table></figure>\n\n<p>If Dark Mode is enabled, dark code highlighting themes will be available.</p></div><div class=\"tab-pane\" id=\"codeblock-2\"><p>NexT supports the copy-and-paste functionality of codeblock.</p>\n<div class=\"tabs\" id=\"codeblock1\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#codeblock1-1\"><code>enable</code></a></li><li class=\"tab\"><a href=\"#codeblock1-2\"><code>style</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"codeblock1-1\"><p>You can enable it by setting value <code>copy_button.enable</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>. By default NexT shows copy result of the copy-and-paste functionality.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">codeblock:</span></span><br><span class=\"line\">  <span class=\"attr\">copy_button:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"codeblock1-2\"><p>With <code>style</code> option, you can change your copy button style.<br>There are three style available currently: <code>default</code> (Just leave it empty), <code>flat</code> and <code>mac</code>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">codeblock:</span></span><br><span class=\"line\">  <span class=\"attr\">copy_button:</span></span><br><span class=\"line\">    <span class=\"attr\">style:</span> <span class=\"string\">flat</span></span><br></pre></td></tr></table></figure></div></div></div></div></div></div>\n\n<h3 id=\"Back-To-Top\"><a href=\"#Back-To-Top\" class=\"headerlink\" title=\"Back To Top\"></a>Back To Top</h3><div class=\"tabs\" id=\"b2t\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#b2t-1\"><code>enable</code></a></li><li class=\"tab\"><a href=\"#b2t-2\"><code>sidebar</code></a></li><li class=\"tab\"><a href=\"#b2t-3\"><code>scrollpercent</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"b2t-1\"><figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">back2top:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>Set the value <code>back2top.enable</code> to <code>true</code> to display <code>Back to top</code> button.</p></div><div class=\"tab-pane\" id=\"b2t-2\"><figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">back2top:</span></span><br><span class=\"line\">  <span class=\"comment\"># Back to top in sidebar.</span></span><br><span class=\"line\">  <span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>Set the value <code>back2top.sidebar</code> to <code>true</code> to put the button in sidebar.</p></div><div class=\"tab-pane\" id=\"b2t-3\"><figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">back2top:</span></span><br><span class=\"line\">  <span class=\"comment\"># Scroll percent label in b2t button.</span></span><br><span class=\"line\">  <span class=\"attr\">scrollpercent:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>Set the value <code>back2top.scrollpercent</code> to <code>true</code> to display scroll percent label in <code>Back to top</code> button.</p></div></div></div>\n\n<h3 id=\"Reading-Progress\"><a href=\"#Reading-Progress\" class=\"headerlink\" title=\"Reading Progress\"></a>Reading Progress</h3><p>NexT supports the page scroll reading progress indicator.</p>\n<p>You can enable it by setting value <code>reading_progress.enable</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">reading_progress:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span> <span class=\"string\">&quot;#37c6c0&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">height:</span> <span class=\"string\">2px</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bookmark\"><a href=\"#Bookmark\" class=\"headerlink\" title=\"Bookmark\"></a>Bookmark</h3><p>Bookmark is a plugin that allow the users save their reading progress. Users could just click the bookmark icon (like 🔖) in left-top of the page to save the scroll position. And when they visit your blog in the next time, they can resume the last scroll position of each page automatically.</p>\n<p>You can enable it by setting value <code>bookmark.enable</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bookmark:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Customize the color of the bookmark.</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span> <span class=\"string\">&quot;#222&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class=\"line\">  <span class=\"attr\">save:</span> <span class=\"string\">auto</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"GitHub-Banner\"><a href=\"#GitHub-Banner\" class=\"headerlink\" title=\"GitHub Banner\"></a>GitHub Banner</h3><p>NexT provides <code>Follow me on GitHub</code> banner in right-top corner.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Follow me on GitHub banner in right-top corner.</span></span><br><span class=\"line\"><span class=\"attr\">github_banner:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">permalink:</span> <span class=\"string\">https://github.com/yourname</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span> <span class=\"string\">Follow</span> <span class=\"string\">me</span> <span class=\"string\">on</span> <span class=\"string\">GitHub</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"github-banner\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#github-banner-1\"><code>permalink</code></a></li><li class=\"tab\"><a href=\"#github-banner-2\"><code>title</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"github-banner-1\"><p><code>permalink</code> → is the specified link must have full url path.</p></div><div class=\"tab-pane\" id=\"github-banner-2\"><p><code>title</code> → is the title and aria-label name.</p></div></div></div>\n\n<p>You can set <code>enable</code> to <code>true</code> and add your own GitHub link.</p>\n<h3 id=\"Fonts-Customization\"><a href=\"#Fonts-Customization\" class=\"headerlink\" title=\"Fonts Customization\"></a>Fonts Customization</h3><p>NexT gives you 5 specific font settings, they are:</p>\n<ul>\n<li>Global Font: Font used in the whole site.</li>\n<li>Title Font: Font used by site title.</li>\n<li>Headlines Font: Font used by headings in articles (h1, h2, h3, h4, h5, h6).</li>\n<li>Article Font: Font used by articles.</li>\n<li>Code Font: Font used by code blocks in articles.</li>\n</ul>\n<p>Each font will be used as the first font of this class, NexT will fallback to internal font settings if they are unavalible.</p>\n<ul>\n<li>Non-code Font: Fallback to <code>&quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif</code></li>\n<li>Code Font: Fallback to <code>consolas, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, monospace</code></li>\n</ul>\n<p>Plus each section has a <code>external</code> attribute, this controls whether to use the font library CDN.<br>Use this can help you to use fonts installed in system and reduce unnecessary requests.</p>\n<div class=\"note info\"><p>To solve the unstable of <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9mb250cw==\">Google Fonts API<i class=\"fa fa-external-link-alt\"></i></span> in some countries, NexT supports custom URL of fonts library by setting <code>font.host</code>.<br>In addition, we noticed that for requests from certain websites, Google Fonts will return 403. At this time, it is necessary to use <code>font.host</code> to set up a mirror site.<br>Relevant issues: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2lzc3Vlcy82MTM=\">#613<i class=\"fa fa-external-link-alt\"></i></span>, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2lzc3Vlcy8xMzMz\">#1333<i class=\"fa fa-external-link-alt\"></i></span></p>\n</div>\n\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">font:</span></span><br><span class=\"line\">  <span class=\"comment\"># Use custom fonts families or not.</span></span><br><span class=\"line\">  <span class=\"comment\"># Depended options: `external` and `family`.</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Uri of fonts host, e.g. https://fonts.googleapis.com (Default).</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font options:</span></span><br><span class=\"line\">  <span class=\"comment\"># `external: true` will load this font family from `host` above.</span></span><br><span class=\"line\">  <span class=\"comment\"># `family: Times New Roman`. Without any quotes.</span></span><br><span class=\"line\">  <span class=\"comment\"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class=\"line\">  <span class=\"attr\">global:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span> <span class=\"string\">Monda</span></span><br><span class=\"line\">    <span class=\"attr\">size:</span> <span class=\"number\">1.125</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font settings for site title (.site-title).</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span> <span class=\"string\">Lobster</span> <span class=\"string\">Two</span></span><br><span class=\"line\">    <span class=\"attr\">size:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class=\"line\">  <span class=\"attr\">headings:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span> <span class=\"string\">Amita</span></span><br><span class=\"line\">    <span class=\"attr\">size:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font settings for posts (.post-body).</span></span><br><span class=\"line\">  <span class=\"attr\">posts:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span> <span class=\"string\">Montserrat</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class=\"line\">  <span class=\"attr\">codes:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span> <span class=\"string\">PT</span> <span class=\"string\">Mono</span></span><br></pre></td></tr></table></figure>\n\n<p>And you can apply multiple font families for each option. This is especially useful for those who often writes both Chinese and English.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">font:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span> <span class=\"string\">Roboto</span> <span class=\"string\">Slab,</span> <span class=\"string\">Noto</span> <span class=\"string\">Serif</span> <span class=\"string\">SC</span></span><br><span class=\"line\">    <span class=\"attr\">size:</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><p>According to the <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvUkVDLWNzcy1mb250cy0zLTIwMTgwOTIwLyNwcm9wZGVmLWZvbnQtZmFtaWx5\">CSS Fonts Module Level 3<i class=\"fa fa-external-link-alt\"></i></span> spec:</p>\n<blockquote>\n<p>Font family names other than generic families must either be given quoted as strings, or unquoted as a sequence of one or more identifiers.</p>\n</blockquote>\n<p>To avoid escaping mistakes, quote font family names if necessary.</p>\n</div>\n\n<p>If you still need more customization, following change will cover Fonts Customization function. Edit <code>source/_data/variables.styl</code> in <mark class=\"label info\">site root directory</mark> and add two varibles:</p>\n<figure class=\"highlight styl\"><figcaption><span>hexo/source/_data/variables.styl</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Title Font, set it to font family you want.</span></span><br><span class=\"line\"><span class=\"variable\">$font</span>-family-headings = Georgia, sans</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set it to font family you want.</span></span><br><span class=\"line\"><span class=\"variable\">$font</span>-family-base = <span class=\"string\">&quot;Microsoft YaHei&quot;</span>, Verdana, sans-serif</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Code Font.</span></span><br><span class=\"line\"><span class=\"variable\">$code</span>-<span class=\"attribute\">font-family</span> = <span class=\"string\">&quot;Input Mono&quot;</span>, <span class=\"string\">&quot;PT Mono&quot;</span>, Consolas, Monaco, Menlo, monospace</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Font size of articles.</span></span><br><span class=\"line\"><span class=\"variable\">$font</span>-size-base = <span class=\"number\">16px</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Font size of table and code.</span></span><br><span class=\"line\"><span class=\"variable\">$table</span>-<span class=\"attribute\">font-size</span> = <span class=\"number\">13px</span></span><br></pre></td></tr></table></figure>\n\n<p>Then uncomment <code>variable</code> under the <code>custom_file_path</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n"},{"title":"Post Settings","url":"/blog-next/docs/theme-settings/posts.html","content":"<h3 id=\"Preamble-Text\"><a href=\"#Preamble-Text\" class=\"headerlink\" title=\"Preamble Text\"></a>Preamble Text</h3><p>It&#39;s a common need to show some part of article in home page and then give a link to full article. NexT gives two ways to control how article is shown in home page. In other words, you can use following ways to show summary of articles and a <strong>Read More</strong> button.</p>\n<div class=\"tabs\" id=\"preamble\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#preamble-1\"><mark class=\"label success\">Tag more</mark></a></li><li class=\"tab\"><a href=\"#preamble-2\"><code>excerpt_description</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"preamble-1\"><p>Use <code>&lt;!-- more --&gt;</code> in your article to break your article manually, which is recommended by Hexo.</p></div><div class=\"tab-pane\" id=\"preamble-2\"><p>If you have added <code>description</code> and set its value to your article summary in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZnJvbnQtbWF0dGVy\">front-matter<i class=\"fa fa-external-link-alt\"></i></span>, NexT excerpts <code>description</code> as preamble text in homepage by default. Without <code>description</code>, the full contents would be the preamble text in homepage.</p>\n<p>You can disable it by setting value <code>excerpt_description</code> to <code>false</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">excerpt_description:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<div class=\"note info\"><p>It is recommended to use <code>&lt;!-- more --&gt;</code> (the first way) which can not only control what you want to show better, but also let Hexo&#39;s plugins use it easily.</p>\n</div>\n\n<h3 id=\"Post-Meta-Display\"><a href=\"#Post-Meta-Display\" class=\"headerlink\" title=\"Post Meta Display\"></a>Post Meta Display</h3><p>NexT supports post created date, post updated date and post categories display.</p>\n<div class=\"tabs\" id=\"postmeta\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#postmeta-1\"><code>item_text</code></a></li><li class=\"tab\"><a href=\"#postmeta-2\"><code>created_at</code></a></li><li class=\"tab\"><a href=\"#postmeta-3\"><code>updated_at</code></a></li><li class=\"tab\"><a href=\"#postmeta-4\"><code>categories</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"postmeta-1\"><p>By default NexT shows the description text of post meta. You can disable it by setting value <code>post_meta.item_text</code> to <code>false</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_meta:</span></span><br><span class=\"line\">  <span class=\"attr\">item_text:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"postmeta-2\"><p>By default NexT shows the post created date in post meta section and created time in popup. You can disable it by setting value <code>post_meta.created_at</code> to <code>false</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_meta:</span></span><br><span class=\"line\">  <span class=\"attr\">created_at:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"postmeta-3\"><div class=\"note warning\"><p>Make sure you set <code>use_date_for_updated</code> and <code>updated_option</code> in <mark class=\"label info\">site config file</mark> correctly, otherwise this option will not take effect. See also <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvY29uZmlndXJhdGlvbiNEYXRlLVRpbWUtZm9ybWF0\">Date / Time format<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n</div>\n\n<div class=\"tabs\" id=\"postmeta1\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#postmeta1-1\"><code>enable</code></a></li><li class=\"tab\"><a href=\"#postmeta1-2\"><code>another_day</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"postmeta1-1\"><p>By default NexT shows the post updated date in post meta section and updated time in popup. You can disable it by setting value <code>post_meta.updated_at.enable</code> to <code>false</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_meta:</span></span><br><span class=\"line\">  <span class=\"attr\">updated_at:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"postmeta1-2\"><p>By default, if updated/edited date is the same as created date, edited time would be displayed in popup message. You can disable it by setting value <code>post_meta.updated_at.another_day</code> to <code>false</code> in <mark class=\"label primary\">theme config file</mark>.<br>In other words:</p>\n<ul>\n<li>If true, show updated date label only if <code>updated date</code> is different from <code>created date</code> (post edited in another day than was created).</li>\n<li>And if post was edited in same day as created, edited time will show in popup title under created time label.</li>\n<li>If false show anyway, but if post edited in same day, show only edited time.</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_meta:</span></span><br><span class=\"line\">  <span class=\"attr\">updated_at:</span></span><br><span class=\"line\">    <span class=\"attr\">another_day:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div></div></div></div><div class=\"tab-pane\" id=\"postmeta-4\"><p>By default NexT shows the post categorie in post meta section. You can disable it by setting value <code>post_meta.categories</code> to <code>false</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_meta:</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"Post-Wordcount\"><a href=\"#Post-Wordcount\" class=\"headerlink\" title=\"Post Wordcount\"></a>Post Wordcount</h3><div class=\"tabs\" id=\"wordcount\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#wordcount-1\">Installation →</a></li><li class=\"tab\"><a href=\"#wordcount-2\">Hexo Config →</a></li><li class=\"tab\"><a href=\"#wordcount-3\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"wordcount-1\"><p>Install <code>hexo-word-counter</code> by executing the following command in <mark class=\"label info\">site root dir</mark>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-word-counter</span><br><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"wordcount-2\"><p>Activate this plugin in <mark class=\"label info\">site config file</mark> by enabled any option:</p>\n<div class=\"tabs\" id=\"wordcount1\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#wordcount1-1\"><code>symbols</code></a></li><li class=\"tab\"><a href=\"#wordcount1-2\"><code>time</code></a></li><li class=\"tab\"><a href=\"#wordcount1-3\"><code>total_symbols</code></a></li><li class=\"tab\"><a href=\"#wordcount1-4\"><code>total_time</code></a></li><li class=\"tab\"><a href=\"#wordcount1-5\"><code>awl</code></a></li><li class=\"tab\"><a href=\"#wordcount1-6\"><code>wpm</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"wordcount1-1\"><p>By default NexT shows the number of post words in post meta section. You can disable it by setting value <code>symbols_count_time.symbols</code> to <code>false</code> in <mark class=\"label info\">site config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">symbols:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"wordcount1-2\"><p>By default NexT shows the estimated reading time of post in post meta section. You can disable it by setting value <code>symbols_count_time.time</code> to <code>false</code> in <mark class=\"label info\">site config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">time:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"wordcount1-3\"><p>By default NexT shows the number of all posts words in footer section. You can disable it by setting value <code>symbols_count_time.total_symbols</code> to <code>false</code> in <mark class=\"label info\">site config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">total_symbols:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"wordcount1-4\"><p>By default NexT shows the estimated reading time of all posts in footer section. You can disable it by setting value <code>symbols_count_time.total_time</code> to <code>false</code> in <mark class=\"label info\">site config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">total_time:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"wordcount1-5\"><p><code>awl</code> means the average Word Length (chars count in word). You can check this <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaGFyYWN0ZXJjb3VudHRvb2wuY29tLw==\">here<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">awl:</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"wordcount1-6\"><p><code>wpm</code> means the average words per minute. You can check this <span class=\"exturl\" data-url=\"aHR0cHM6Ly93b3JkY291bnRlci5uZXQv\">here<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">wpm:</span> <span class=\"number\">275</span></span><br></pre></td></tr></table></figure></div></div></div></div><div class=\"tab-pane\" id=\"wordcount-3\"><p>After the plugin enabled, you may adjust options in <code>symbols_count_time</code> section in <mark class=\"label primary\">theme config file</mark>:</p>\n<div class=\"tabs\" id=\"wordcount2\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#wordcount2-1\"><code>separated_meta</code></a></li><li class=\"tab\"><a href=\"#wordcount2-2\"><code>item_text_total</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"wordcount2-1\"><p>By default NexT shows the words counts and estimated reading time in a separated line. You can add them into one line by setting value <code>symbols_count_time.separated_meta</code> to <code>false</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">separated_meta:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"wordcount2-2\"><p>By default NexT doesn&#39;t shows the text description of the words counts and estimated reading time in footer section. You can enable it by setting value <code>symbols_count_time.item_text_total</code> to <code>false</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">item_text_total:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div></div></div></div></div></div>\n\n<h3 id=\"Tag-Icon\"><a href=\"#Tag-Icon\" class=\"headerlink\" title=\"Tag Icon\"></a>Tag Icon</h3><p>By default, tags at the bottom of posts have a symbol # at there left side.</p>\n<p>If you prefer icon instead of symbol, edit <mark class=\"label primary\">theme config file</mark> like following:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tag_icon:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Donate-Settings\"><a href=\"#Donate-Settings\" class=\"headerlink\" title=\"Donate Settings\"></a>Donate Settings</h3><p>More and more online blogging platforms (e.g. WeChat public accounts, Jianshu, Zhihu) support donate (sponsor). To catch paid reading trends, we added donate feature, supports WeChat, Alipay and Bitcoin. What you need is:</p>\n<ol>\n<li><p>Get your WeChat / Alipay / Bitcoin receive money QRcode image(s) and put into <code>source/images</code> under <mark class=\"label primary\">theme directory</mark> or upload it(them) to an image cloud to get the absolute HTTP address(es).</p>\n</li>\n<li><p>Set needed values in  <mark class=\"label primary\">theme config file</mark>:</p>\n <figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Donate (Sponsor) settings</span></span><br><span class=\"line\"><span class=\"comment\"># Front-matter variable (unsupport animation).</span></span><br><span class=\"line\"><span class=\"attr\">reward_settings:</span></span><br><span class=\"line\">  <span class=\"comment\"># If true, a donate button will be displayed in every article by default.</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">animation:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\">#comment: Buy me a coffee</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">reward:</span></span><br><span class=\"line\">  <span class=\"attr\">wechatpay:</span> <span class=\"string\">/images/wechatpay.png</span></span><br><span class=\"line\">  <span class=\"attr\">alipay:</span> <span class=\"string\">/images/alipay.png</span></span><br><span class=\"line\">  <span class=\"attr\">bitcoin:</span> <span class=\"string\">/images/bitcoin.png</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>You can also add QRcode of other platforms, e.g.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">paypal:</span> <span class=\"string\">/images/paypal.png</span></span><br><span class=\"line\"><span class=\"attr\">monero:</span> <span class=\"string\">/images/monero.png</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Follow-Me\"><a href=\"#Follow-Me\" class=\"headerlink\" title=\"Follow Me\"></a>Follow Me</h3><figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Subscribe through Telegram Channel, Twitter, etc.</span></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: permalink || icon` (Font Awesome)</span></span><br><span class=\"line\"><span class=\"attr\">follow_me:</span></span><br><span class=\"line\">  <span class=\"comment\">#Twitter: https://twitter.com/username || fab fa-twitter</span></span><br><span class=\"line\">  <span class=\"comment\">#Telegram: https://t.me/channel_name || fab fa-telegram</span></span><br><span class=\"line\">  <span class=\"comment\">#WeChat: /images/wechat_channel.jpg || fab fa-weixin</span></span><br><span class=\"line\">  <span class=\"comment\">#RSS: /atom.xml || fa fa-rss</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Related-Popular-Posts\"><a href=\"#Related-Popular-Posts\" class=\"headerlink\" title=\"Related Popular Posts\"></a>Related Popular Posts</h3><p>NexT supports the related posts functionality according to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RlYTMvaGV4by1yZWxhdGVkLXBvcHVsYXItcG9zdHM=\">hexo-related-popular-posts<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<div class=\"tabs\" id=\"related_posts\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#related_posts-1\">Installation →</a></li><li class=\"tab\"><a href=\"#related_posts-2\"><code>enable</code></a></li><li class=\"tab\"><a href=\"#related_posts-3\"><code>title</code></a></li><li class=\"tab\"><a href=\"#related_posts-4\"><code>display_in_home</code></a></li><li class=\"tab\"><a href=\"#related_posts-5\"><code>params</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"related_posts-1\"><p>Install <code>hexo-related-popular-posts</code> by executing the following command in <mark class=\"label info\">site root dir</mark>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-related-popular-posts</span><br><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"related_posts-2\"><p>You can enable it by setting value <code>related_posts.enable</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">related_posts:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"related_posts-3\"><p>By default NexT uses &#39;Related Posts&#39; as title by default. You can configure it by editing value in <code>related_posts.title</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">related_posts:</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"related_posts-4\"><p>By default NexT doesn&#39;t show the related posts in homepage. You can enable it by setting value <code>related_posts.display_in_home</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">related_posts:</span></span><br><span class=\"line\">  <span class=\"attr\">display_in_home:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"related_posts-5\"><p>By default NexT shows up to 5 related posts and their titles without any date, image and excerpt. You can change the default behavior by editing values of <code>related_posts.params</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<div class=\"tabs\" id=\"related_posts1\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#related_posts1-1\"><code>maxCount</code></a></li><li class=\"tab\"><a href=\"#related_posts1-2\"><code>PPMixingRate</code></a></li><li class=\"tab\"><a href=\"#related_posts1-3\"><code>isDate</code></a></li><li class=\"tab\"><a href=\"#related_posts1-4\"><code>isImage</code></a></li><li class=\"tab\"><a href=\"#related_posts1-5\"><code>isExcerpt</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"related_posts1-1\"><p>Maximum count of a list, change it by yourself.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">related_posts:</span></span><br><span class=\"line\">  <span class=\"attr\">params:</span></span><br><span class=\"line\">    <span class=\"attr\">maxCount:</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"related_posts1-2\"><p>Mixing ratio of popular posts and related posts.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">related_posts:</span></span><br><span class=\"line\">  <span class=\"attr\">params:</span></span><br><span class=\"line\">    <span class=\"comment\">#PPMixingRate: 0.0</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"related_posts1-3\"><p>Uncomment and set true to display dates of related post.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">related_posts:</span></span><br><span class=\"line\">  <span class=\"attr\">params:</span></span><br><span class=\"line\">    <span class=\"attr\">isDate:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"related_posts1-4\"><p>Uncomment and set true to display images of related posts.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">related_posts:</span></span><br><span class=\"line\">  <span class=\"attr\">params:</span></span><br><span class=\"line\">    <span class=\"attr\">isImage:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"related_posts1-5\"><p>Uncomment and set true to display excerpts of related posts.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">related_posts:</span></span><br><span class=\"line\">  <span class=\"attr\">params:</span></span><br><span class=\"line\">    <span class=\"attr\">isExcerpt:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div></div></div></div></div></div>\n\n<h3 id=\"Post-Edit\"><a href=\"#Post-Edit\" class=\"headerlink\" title=\"Post Edit\"></a>Post Edit</h3><p>NexT supports the edit functionality of your posts. By enabling this feature, users can quickly browse and modify the blog&#39;s source code on GitHub.</p>\n<div class=\"tabs\" id=\"post_edit\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#post_edit-1\"><code>enable</code></a></li><li class=\"tab\"><a href=\"#post_edit-2\"><code>url</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"post_edit-1\"><p>You can enable it by setting value <code>post_edit.enable</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_edit:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"post_edit-2\"><p>You should create a source repository of your post files. The <code>url</code> setting depends on the source project in github.</p>\n<ul>\n<li>For site repository<ul>\n<li>Link for view source: <code>url: https://github.com/.../tree/master/source/_posts/</code></li>\n<li>Link for fork &amp; edit: <code>url: https://github.com/.../edit/master/source/_posts/</code></li>\n</ul>\n</li>\n<li>For post repository<ul>\n<li>Link for view source: <code>url: https://github.com/.../_posts/tree/master/</code></li>\n<li>Link for fork &amp; edit: <code>url: https://github.com/.../_posts/edit/master/</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_edit:</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"Post-Navigation\"><a href=\"#Post-Navigation\" class=\"headerlink\" title=\"Post Navigation\"></a>Post Navigation</h3><p>Show previous post and next post in post footer if exists.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_navigation:</span> <span class=\"string\">left</span></span><br></pre></td></tr></table></figure>\n"},{"title":"SEO","url":"/blog-next/docs/theme-settings/seo.html","content":"<h3 id=\"SEO-Setting\"><a href=\"#SEO-Setting\" class=\"headerlink\" title=\"SEO Setting\"></a>SEO Setting</h3><p>Next provides useful options for better Search Engine Optimization (SEO).</p>\n<div class=\"note info\"><p>By default a canonical link tag is created in Hexo after you have set up your URL <code>url: http://example.com</code> in <mark class=\"label info\">site config file</mark>. More detailed information can be found in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vd2VibWFzdGVycy9hbnN3ZXIvMTM5MDY2\">Consolidate duplicate URLs<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n</div>\n\n<div class=\"tabs\" id=\"seo\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#seo-1\"><code>disable_baidu_transformation</code></a></li><li class=\"tab\"><a href=\"#seo-2\"><code>index_with_subtitle</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"seo-1\"><p>By default China&#39;s search engine Baidu will cache and rewrite your site to provide a webpage snapshot for mobile users. You can disable this by setting the value <code>disable_baidu_transformation</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">disable_baidu_transformation:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"seo-2\"><p>Set the value <code>enable</code> to <code>true</code> in <code>index_with_subtitle</code> section to add <code>subtitle</code> information in <mark class=\"label info\">site config file</mark> to index page.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">index_with_subtitle:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"ExtURL\"><a href=\"#ExtURL\" class=\"headerlink\" title=\"ExtURL\"></a>ExtURL</h3><p>External URL with BASE64 encrypt &amp; decrypt which provide nonsense for search engines to <code>&lt;a&gt;</code> tags.</p>\n<h4 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h4><p>Search engines scan <code>&lt;a&gt;</code> tag with hight priority. You may add <code>external</code> / <code>nofollow</code> / <code>noopener</code> / <code>noreferrer</code> or any similar tricks, in any case all external links from your site will be indexed on your site. But here exists another trick: crawlers doesn&#39;t reproduce any javascript – this do clients on their local devices.<br>That tag give the way to set any external link without <code>&lt;a&gt;</code> tag. So, some crawlers like Yandex will not give away links weight from your site and this very useful for SEO. This tag perform:</p>\n<ul>\n<li>Replaces <code>a</code> HTML tag with <code>span</code> HTML tag.</li>\n<li>Crypt &amp; Decrypt URL with BASE64. User cannot see base64 format in browser src for this link, but he will see tooltip where this URL pointed to or will be shown custom title which can be specified in <code>title</code> tag parameter.</li>\n<li>Backlinks by this tag will not be scanned by any monitoring. It&#39;s like you open new link with javascript at new tab.</li>\n<li>Works on mobile devices too, yep.</li>\n</ul>\n<div class=\"note warning\"><p>This tag was created exceptionally for better SEO-optimization. Any attempts to confuse end-user by phishing links not allowed!</p>\n</div>\n\n<h4 id=\"Settings\"><a href=\"#Settings\" class=\"headerlink\" title=\"Settings\"></a>Settings</h4><p>Just one setting must be turned on under the <code>SEO Settings</code> section in <mark class=\"label primary\">theme config file</mark>:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">exturl:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>Then run the following command in <mark class=\"label info\">site root dir</mark> to ensure that <code>exturl</code> can be enabled or disabled correctly:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Webmaster-Tools\"><a href=\"#Webmaster-Tools\" class=\"headerlink\" title=\"Webmaster Tools\"></a>Webmaster Tools</h3><h4 id=\"Google-Webmaster-Tools\"><a href=\"#Google-Webmaster-Tools\" class=\"headerlink\" title=\"Google Webmaster Tools\"></a>Google Webmaster Tools</h4><p>Set the verification string of <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS93ZWJtYXN0ZXJzL3Rvb2xz\">Google Webmaster Tools<i class=\"fa fa-external-link-alt\"></i></span> which is used in submitting sitemap.</p>\n<div class=\"tabs\" id=\"google-webmaster-tools\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#google-webmaster-tools-1\">Get Verification Code →</a></li><li class=\"tab\"><a href=\"#google-webmaster-tools-2\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"google-webmaster-tools-1\"><p>Login to Google Webmaster Tools and go to verification methods and choose <code>HTML Tag</code>, you will get some code:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;google-site-verification&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"google-webmaster-tools-2\"><p>Copy <code>XXXXXXXXXXXXXXXXXXXXXXX</code> value of <code>content</code> key.<br>Edit <mark class=\"label primary\">theme config file</mark> and add or change <code>google_site_verification</code> section:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">google_site_verification:</span> <span class=\"string\">XXXXXXXXXXXXXXXXXXXXXXX</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h4 id=\"Bing-Webmaster-Tools\"><a href=\"#Bing-Webmaster-Tools\" class=\"headerlink\" title=\"Bing Webmaster Tools\"></a>Bing Webmaster Tools</h4><p>Set the verification string of <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmluZy5jb20vd2VibWFzdGVyLw==\">Bing Webmaster Tools<i class=\"fa fa-external-link-alt\"></i></span> which is used in submitting sitemap.</p>\n<div class=\"tabs\" id=\"bing-webmaster-tools\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#bing-webmaster-tools-1\">Get Verification Code →</a></li><li class=\"tab\"><a href=\"#bing-webmaster-tools-2\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"bing-webmaster-tools-1\"><p>Login to Bing Webmaster Tools and go to verification methods and choose <code>HTML Tag</code>, you will get some code:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;msvalidate.01&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"bing-webmaster-tools-2\"><p>Copy <code>XXXXXXXXXXXXXXXXXXXXXXX</code> value of <code>content</code> key.<br>Edit <mark class=\"label primary\">theme config file</mark> and add or change <code>bing_site_verification</code> section:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bing_site_verification:</span> <span class=\"string\">XXXXXXXXXXXXXXXXXXXXXXX</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h4 id=\"Yandex-Webmaster-Tools\"><a href=\"#Yandex-Webmaster-Tools\" class=\"headerlink\" title=\"Yandex Webmaster Tools\"></a>Yandex Webmaster Tools</h4><p>Set the verification string of <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJtYXN0ZXIueWFuZGV4LnJ1Lw==\">Yandex Webmaster Tools<i class=\"fa fa-external-link-alt\"></i></span> which is used in submitting sitemap.</p>\n<div class=\"tabs\" id=\"yandex-webmaster-tools\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#yandex-webmaster-tools-1\">Get Verification Code →</a></li><li class=\"tab\"><a href=\"#yandex-webmaster-tools-2\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"yandex-webmaster-tools-1\"><p>Login to Yandex Webmaster Tools and go to verification methods and choose <code>Meta Tag</code>, you will get some code:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;yandex-verification&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"yandex-webmaster-tools-2\"><p>Copy <code>XXXXXXXXXXXXXXXXXXXXXXX</code> value of <code>content</code> key.<br>Edit <mark class=\"label primary\">theme config file</mark> and add or change <code>yandex_site_verification</code> section:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">yandex_site_verification:</span> <span class=\"string\">XXXXXXXXXXXXXXXXXXXXXXX</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h4 id=\"Baidu-Webmaster-Tools\"><a href=\"#Baidu-Webmaster-Tools\" class=\"headerlink\" title=\"Baidu Webmaster Tools\"></a>Baidu Webmaster Tools</h4><p>Set the verification string of <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aXl1YW4uYmFpZHUuY29tL3NpdGUv\">Baidu Webmaster Tools<i class=\"fa fa-external-link-alt\"></i></span> which is used in submitting sitemap.</p>\n<div class=\"tabs\" id=\"baidu-webmaster-tools\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#baidu-webmaster-tools-1\">Get Verification Code →</a></li><li class=\"tab\"><a href=\"#baidu-webmaster-tools-2\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"baidu-webmaster-tools-1\"><p>Login to Baidu Webmaster Tools and go to verification methods and choose <code>HTML Tag</code>, you will get some code:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;baidu-site-verification&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"baidu-webmaster-tools-2\"><p>Copy <code>XXXXXXXXXXXXXXXXXXXXXXX</code> value of <code>content</code> key.<br>Edit <mark class=\"label primary\">theme config file</mark> and add or change <code>baidu_site_verification</code> section:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">baidu_site_verification:</span> <span class=\"string\">XXXXXXXXXXXXXXXXXXXXXXX</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>NexT also supports the baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO. You can enable it by setting value <code>baidu_push</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">baidu_push:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Sidebar Setting","url":"/blog-next/docs/theme-settings/sidebar.html","content":"<h3 id=\"Sidebar-Style\"><a href=\"#Sidebar-Style\" class=\"headerlink\" title=\"Sidebar Style\"></a>Sidebar Style</h3><p>By default sidebar only shows in posts (have a table of content), and is placed in left side. You can change it by editing values under <code>sidebar</code> setting in <mark class=\"label primary\">theme config file</mark>.</p>\n<p>Sidebar has several options, including <code>position</code>, <code>width</code>, <code>display</code>, <code>padding</code> and <code>offset</code>.</p>\n<div class=\"tabs\" id=\"setting-sidebar\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#setting-sidebar-1\"><code>position</code></a></li><li class=\"tab\"><a href=\"#setting-sidebar-2\"><code>width</code></a></li><li class=\"tab\"><a href=\"#setting-sidebar-3\"><code>display</code></a></li><li class=\"tab\"><a href=\"#setting-sidebar-4\"><code>padding</code></a></li><li class=\"tab\"><a href=\"#setting-sidebar-5\"><code>offset</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"setting-sidebar-1\"><p>Set up sidebar position by changing the value of <code>sidebar.position</code>, which can be one of following:</p>\n<ul>\n<li><strong><code>left</code></strong> → Place at the left of the screen.</li>\n<li><code>right</code> → Place at the right of the screen.</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span></span><br><span class=\"line\">  <span class=\"attr\">position:</span> <span class=\"string\">left</span></span><br><span class=\"line\">  <span class=\"comment\">#position: right</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"setting-sidebar-2\"><p>You can change sidebar width by specify <code>sidebar.width</code> setting in pixels, for example:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span></span><br><span class=\"line\">  <span class=\"attr\">width:</span> <span class=\"number\">300</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><p>This option is commented out by default and values are:</p>\n<ul>\n<li>For Muse | Mist schemes: <code>320</code></li>\n<li>For Pisces | Gemini schemes: <code>240</code></li>\n</ul>\n</div></div><div class=\"tab-pane\" id=\"setting-sidebar-3\"><p>Set up conditions under which sidebar will show by editing <code>sidebar.display</code> value, which can be one of following:</p>\n<ul>\n<li><strong><code>post</code></strong> → Show sidebar only in posts which have index.</li>\n<li><code>always</code> → Show sidebar in all pages.</li>\n<li><code>hide</code> → Hide it in all pages (but can be opened by user manually).</li>\n<li><code>remove</code> → Remove sidebar totally.</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span></span><br><span class=\"line\">  <span class=\"attr\">display:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"comment\">#display: always</span></span><br><span class=\"line\">  <span class=\"comment\">#display: hide</span></span><br><span class=\"line\">  <span class=\"comment\">#display: remove</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"setting-sidebar-4\"><p>Set up sidebar padding in pixels by changing the value of <code>sidebar.padding</code>:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span></span><br><span class=\"line\">  <span class=\"attr\">padding:</span> <span class=\"number\">18</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"setting-sidebar-5\"><p>Set up sidebar offset from top menubar in pixels by changing the value of <code>sidebar.offset</code>:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span></span><br><span class=\"line\">  <span class=\"attr\">offset:</span> <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note danger\"><p>For now only Pisces / Gemini Schemes supports <code>offset</code> setting under <strong>6.0.x</strong> version or later.</p>\n</div></div></div></div>\n\n<h3 id=\"Configuring-Avatar\"><a href=\"#Configuring-Avatar\" class=\"headerlink\" title=\"Configuring Avatar\"></a>Configuring Avatar</h3><p>By default NexT doesn&#39;t show avatar in sidebar. You can configure it by editing values under <code>avatar</code> setting in <mark class=\"label primary\">theme config file</mark>.</p>\n<div class=\"tabs\" id=\"avatar\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#avatar-1\"><code>url</code></a></li><li class=\"tab\"><a href=\"#avatar-2\"><code>rounded</code></a></li><li class=\"tab\"><a href=\"#avatar-3\"><code>rotated</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"avatar-1\"><p>For first test you can uncomment <code>/images/avatar.gif</code> value near the <code>avatar.url</code> setting to see default avatar:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">/images/avatar.gif</span></span><br></pre></td></tr></table></figure>\n\n<p>Then you need to specify your own avatar. It can be done one of the ways below:</p>\n<div class=\"tabs\" id=\"avatar1\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#avatar1-1\"><mark class=\"label success\">Hexo directory</mark></a></li><li class=\"tab\"><a href=\"#avatar1-2\">NexT directory</a></li><li class=\"tab\"><a href=\"#avatar1-3\">Absolute URL from Internet</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"avatar1-1\"><p>Put your avatar under <mark class=\"label info\">site directory</mark> <code>source/uploads/</code> (create directory if it doesn&#39;t exists).<br>And then change option to <code>url: /uploads/avatar.png</code>.</p></div><div class=\"tab-pane\" id=\"avatar1-2\"><p>Put your avatar under <mark class=\"label primary\">theme directory</mark> <code>source/images/</code>.<br>And then change option to <code>url: /images/avatar.png</code>.</p>\n<div class=\"note info\"><p>Current site uses avatar under <mark class=\"label primary\">theme directory</mark> from file located in <code>next/source/images/apple-touch-icon-next.png</code> with following config:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">/images/apple-touch-icon-next.png</span></span><br></pre></td></tr></table></figure>\n</div></div><div class=\"tab-pane\" id=\"avatar1-3\"><p>You can also specify any external URL with absolute path to image: <code>http(s)://example.com/avatar.png</code></p></div></div></div></div><div class=\"tab-pane\" id=\"avatar-2\"><p>Set up rounded of avatar by changing the value of <code>avatar.rounded</code>:</p>\n<ul>\n<li><code>true</code> → Avatar will be rounded.</li>\n<li><strong><code>false</code></strong> → Avatar will be squared.</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"attr\">rounded:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"avatar-3\"><p>Set up rotated of avatar by changing the value of <code>avatar.rotated</code>:</p>\n<ul>\n<li><code>true</code> → Avatar will be rotate under the mouse hovering.</li>\n<li><strong><code>false</code></strong> → Avatar will not rotate under the mouse hovering.</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"attr\">rotated:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"Sidebar-Site-State\"><a href=\"#Sidebar-Site-State\" class=\"headerlink\" title=\"Sidebar Site State\"></a>Sidebar Site State</h3><p>By default NexT shows the categories and counts of Posts / Categories / Tags in sidebar. You can configure it by editing value <code>site_state</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">site_state:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Sidebar-Social-Links\"><a href=\"#Sidebar-Social-Links\" class=\"headerlink\" title=\"Sidebar Social Links\"></a>Sidebar Social Links</h3><div class=\"note default\"><p>Social Links have similar structure as <a href=\"/docs/theme-settings/#Configuring-Menu-Items\">Menu Items</a>, only target link there is difference: specified link must have full url path (permalink).</p>\n</div>\n\n<p>Edit the <code>social</code> section in <mark class=\"label primary\">theme config file</mark> as following:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\">  <span class=\"attr\">GitHub:</span> <span class=\"string\">https://github.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-github</span></span><br><span class=\"line\">  <span class=\"attr\">E-Mail:</span> <span class=\"string\">mailto:yourname@gmail.com</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-envelope</span></span><br><span class=\"line\">  <span class=\"attr\">Weibo:</span> <span class=\"string\">https://weibo.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-weibo</span></span><br><span class=\"line\">  <span class=\"attr\">Google:</span> <span class=\"string\">https://plus.google.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-google</span></span><br><span class=\"line\">  <span class=\"attr\">Twitter:</span> <span class=\"string\">https://twitter.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-twitter</span></span><br><span class=\"line\">  <span class=\"attr\">FB Page:</span> <span class=\"string\">https://www.facebook.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-facebook</span></span><br><span class=\"line\">  <span class=\"attr\">StackOverflow:</span> <span class=\"string\">https://stackoverflow.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-stack-overflow</span></span><br><span class=\"line\">  <span class=\"attr\">YouTube:</span> <span class=\"string\">https://youtube.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-youtube</span></span><br><span class=\"line\">  <span class=\"attr\">Instagram:</span> <span class=\"string\">https://instagram.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-instagram</span></span><br><span class=\"line\">  <span class=\"attr\">Skype:</span> <span class=\"string\">skype:yourname?call|chat</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-skype</span></span><br></pre></td></tr></table></figure>\n\n<p>By default NexT shows the icons of social links in sidebar.</p>\n<div class=\"tabs\" id=\"social_icons\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#social_icons-1\"><code>enable</code></a></li><li class=\"tab\"><a href=\"#social_icons-2\"><code>icons_only</code></a></li><li class=\"tab\"><a href=\"#social_icons-3\"><code>transition</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"social_icons-1\"><p>You can configure it by editing value <code>enable</code> in <code>social_icons</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">social_icons:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"social_icons-2\"><p>Set the value <code>icons_only</code> to <code>true</code> to display social icons without description in <code>social_icons</code> section in <mark class=\"label primary\">theme config file</mark> as following:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">social_icons:</span></span><br><span class=\"line\">  <span class=\"attr\">icons_only:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"social_icons-3\"><p>Set the value <code>transition</code> to <code>true</code> to display social icons with transition effects in <code>social_icons</code> section in <mark class=\"label primary\">theme config file</mark> as following:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">social_icons:</span></span><br><span class=\"line\">  <span class=\"attr\">transition:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"Sidebar-Blogrolls\"><a href=\"#Sidebar-Blogrolls\" class=\"headerlink\" title=\"Sidebar Blogrolls\"></a>Sidebar Blogrolls</h3><p>You can add blog rolls within sidebar in NexT.</p>\n<div class=\"tabs\" id=\"blogrolls\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#blogrolls-1\"><code>links_settings</code></a></li><li class=\"tab\"><a href=\"#blogrolls-2\"><code>links</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"blogrolls-1\"><p>By default NexT shows the <code>globe</code> icon <a class=\"btn\" href=\"#\"><i class=\"fa fa-globe\"></i></a> before <code>title</code>. The name of icon can be found in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb250YXdlc29tZS5jb20v\">Font Awesome<i class=\"fa fa-external-link-alt\"></i></span> site. You can configure it by editing value <code>icon</code> in <code>links_settings</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">links_settings:</span></span><br><span class=\"line\">  <span class=\"attr\">icon:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-globe</span></span><br></pre></td></tr></table></figure>\n\n<p>By default NexT uses <code>Links</code> as the name of blogroll. You can configure it by editing value <code>title</code> in <code>links_settings</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">links_settings:</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span> <span class=\"string\">Links</span></span><br></pre></td></tr></table></figure>\n\n<p>By default all blogrolls are displayed in block. You can configure it to <code>inline</code> by editing value <code>layout</code> in <code>links_settings</code> section in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">links_settings:</span></span><br><span class=\"line\">  <span class=\"attr\">layout:</span> <span class=\"string\">block</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"blogrolls-2\"><p>Edit the <code>links</code> section in <mark class=\"label primary\">theme config file</mark> and add your favorite links:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">links:</span></span><br><span class=\"line\">  <span class=\"attr\">Title1:</span> <span class=\"string\">https://example1.com/</span></span><br><span class=\"line\">  <span class=\"attr\">Title2:</span> <span class=\"string\">https://example2.com/</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"Sidebar-TOC\"><a href=\"#Sidebar-TOC\" class=\"headerlink\" title=\"Sidebar TOC\"></a>Sidebar TOC</h3><div class=\"tabs\" id=\"toc\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#toc-1\"><code>enable</code></a></li><li class=\"tab\"><a href=\"#toc-2\"><code>number</code></a></li><li class=\"tab\"><a href=\"#toc-3\"><code>wrap</code></a></li><li class=\"tab\"><a href=\"#toc-4\"><code>expand_all</code></a></li><li class=\"tab\"><a href=\"#toc-5\"><code>max_depth</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"toc-1\"><p>By default NexT shows <code>Table Of Contents (TOC)</code> in the sidebar. You can disable it by setting <code>toc.enable</code> to <code>false</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">toc:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"toc-2\"><p>By default NexT adds list number to TOC automatically. You can disable it by setting <code>toc.number</code> to <code>false</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">toc:</span></span><br><span class=\"line\">  <span class=\"attr\">number:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"toc-3\"><p>If the post header width longer than sidebar width, you can wrap the header words in next lines by setting <code>toc.wrap</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">toc:</span></span><br><span class=\"line\">  <span class=\"attr\">wrap:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"toc-4\"><p>If you want all level of TOC in a post to be displayed, rather than the activated part of it, you can set <code>toc.expand_all</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">toc:</span></span><br><span class=\"line\">  <span class=\"attr\">expand_all:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"toc-5\"><p>By default maximum heading depth of generated toc is 6. You can set it by setting <code>toc.max_depth</code> to <code>another number</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">toc:</span></span><br><span class=\"line\">  <span class=\"attr\">max_depth:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></div></div></div>\n"},{"title":"Chat Services","url":"/blog-next/docs/third-party-services/chat-services.html","content":"<h3 id=\"Chatra\"><a href=\"#Chatra\" class=\"headerlink\" title=\"Chatra\"></a>Chatra</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaGF0cmEuaW8v\">Chatra<i class=\"fa fa-external-link-alt\"></i></span> is a live chat messenger app for your website.</p>\n<div class=\"tabs\" id=\"chatra\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#chatra-1\">Enable Chatra →</a></li><li class=\"tab\"><a href=\"#chatra-2\">Activate sidebar button</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"chatra-1\"><p>Visit <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcHAuY2hhdHJhLmlvL3NldHRpbmdzL2dlbmVyYWw=\">Dashboard<i class=\"fa fa-external-link-alt\"></i></span> to get your ChatraID.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Chatra Support</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://chatra.io</span></span><br><span class=\"line\"><span class=\"comment\"># Dashboard: https://app.chatra.io/settings/general</span></span><br><span class=\"line\"><span class=\"attr\">chatra:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">async:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"string\">&lt;ChatraID&gt;</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"chatra-2\"><p>After Chatra enabled, you can set <code>chat.enable</code> to <code>true</code> and set <code>chat.service</code> to <code>chatra</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A button to open designated chat widget in sidebar.</span></span><br><span class=\"line\"><span class=\"comment\"># Firstly, you need enable the chat service you want to activate its sidebar button.</span></span><br><span class=\"line\"><span class=\"attr\">chat:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">service:</span> <span class=\"string\">chatra</span></span><br><span class=\"line\">  <span class=\"attr\">icon:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-comment</span></span><br><span class=\"line\">  <span class=\"attr\">text:</span> <span class=\"string\">Chat</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"Tidio\"><a href=\"#Tidio\" class=\"headerlink\" title=\"Tidio\"></a>Tidio</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGlkaW9jaGF0LmNvbS8=\">Tidio<i class=\"fa fa-external-link-alt\"></i></span> is a live chat messenger app for your website.</p>\n<div class=\"tabs\" id=\"tidio\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#tidio-1\">Enable Tidio →</a></li><li class=\"tab\"><a href=\"#tidio-2\">Activate sidebar button</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"tidio-1\"><p>Visit <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGlkaW9jaGF0LmNvbS9wYW5lbC9kYXNoYm9hcmQ=\">Dashboard<i class=\"fa fa-external-link-alt\"></i></span> to get your Public Key.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Tidio Support</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://www.tidiochat.com</span></span><br><span class=\"line\"><span class=\"comment\"># Dashboard: https://www.tidiochat.com/panel/dashboard</span></span><br><span class=\"line\"><span class=\"attr\">tidio:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">key:</span> <span class=\"string\">&lt;Publick</span> <span class=\"string\">Key&gt;</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"tidio-2\"><p>After Tidio enabled, you can set <code>chat.enable</code> to <code>true</code> and set <code>chat.service</code> to <code>tidio</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A button to open designated chat widget in sidebar.</span></span><br><span class=\"line\"><span class=\"comment\"># Firstly, you need enable the chat service you want to activate its sidebar button.</span></span><br><span class=\"line\"><span class=\"attr\">chat:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">service:</span> <span class=\"string\">tidio</span></span><br><span class=\"line\">  <span class=\"attr\">icon:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-comment</span></span><br><span class=\"line\">  <span class=\"attr\">text:</span> <span class=\"string\">Chat</span></span><br></pre></td></tr></table></figure></div></div></div>\n"},{"title":"Third-party Services","url":"/blog-next/docs/third-party-services/index.html","content":"<p>Static website is limited in some functions, so we need third-party services to extend our site.<br>In any time you can extend needed functions by using third-party services supported by NexT.</p>\n<h3 id=\"Adding-Plugins\"><a href=\"#Adding-Plugins\" class=\"headerlink\" title=\"Adding Plugins\"></a>Adding Plugins</h3><p>Plugins extend and expand the functionality of NexT. There are two types of plugins: core plugins and third-party plugins. The core plugins are loaded from your site by default, they are required by the basic functions of NexT. Third-party plugins provide a large number of optional features. They are loaded from jsDelivr CDN by default, because it is fast in everywhere.</p>\n<p>Configuring these plugins is very easy. For example, if you want to use <code>pjax</code> in your site, just set <code>pjax</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Easily enable fast Ajax navigation on your website.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information: https://github.com/next-theme/pjax</span></span><br><span class=\"line\"><span class=\"attr\">pjax:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>If you want to specify the CDN provider for any plugins, you need to set / update the CDN URL. See <a href=\"/docs/advanced-settings/vendors.html\">Advanced Settings</a> for more information.</p>\n<p>Detailed documentation about these plugins is listed below.</p>\n<h3 id=\"Math-Equations\"><a href=\"#Math-Equations\" class=\"headerlink\" title=\"Math Equations\"></a>Math Equations</h3><ul>\n<li><a href=\"/docs/third-party-services/math-equations.html\">Math Equations</a></li>\n</ul>\n<h3 id=\"Comment-Systems\"><a href=\"#Comment-Systems\" class=\"headerlink\" title=\"Comment Systems\"></a>Comment Systems</h3><ul>\n<li><a href=\"/docs/third-party-services/comments.html#Overview\">Overview</a></li>\n<li><a href=\"/docs/third-party-services/comments.html#Disqus\">Disqus</a></li>\n<li><a href=\"/docs/third-party-services/comments.html#DisqusJS\">DisqusJS</a></li>\n<li><a href=\"/docs/third-party-services/comments.html#LiveRe\">LiveRe</a></li>\n<li><a href=\"/docs/third-party-services/comments.html#Gitalk\">Gitalk</a></li>\n<li><a href=\"/docs/third-party-services/comments.html#Valine\">Valine (China)</a></li>\n<li><a href=\"/docs/third-party-services/comments.html#Changyan\">Changyan (China)</a></li>\n</ul>\n<h3 id=\"Statistics-and-Analytics\"><a href=\"#Statistics-and-Analytics\" class=\"headerlink\" title=\"Statistics and Analytics\"></a>Statistics and Analytics</h3><h4 id=\"Analytics\"><a href=\"#Analytics\" class=\"headerlink\" title=\"Analytics\"></a>Analytics</h4><ul>\n<li><a href=\"/docs/third-party-services/statistics-and-analytics.html#Google-Analytics\">Google Analytics</a></li>\n<li><a href=\"/docs/third-party-services/statistics-and-analytics.html#Baidu-Analytics-China\">Baidu Analytics (China)</a></li>\n<li><a href=\"/docs/third-party-services/statistics-and-analytics.html#Growingio-Analytics\">Growingio Analytics</a></li>\n<li><a href=\"/docs/third-party-services/statistics-and-analytics.html#CNZZ-Analytics-China\">CNZZ Analytics (China)</a></li>\n</ul>\n<h4 id=\"Statistics\"><a href=\"#Statistics\" class=\"headerlink\" title=\"Statistics\"></a>Statistics</h4><ul>\n<li><a href=\"/docs/third-party-services/statistics-and-analytics.html#LeanCloud-China\">LeanCloud (China)</a></li>\n<li><a href=\"/docs/third-party-services/statistics-and-analytics.html#Firebase\">Firebase</a></li>\n<li><a href=\"/docs/third-party-services/statistics-and-analytics.html#Busuanzi-Counting-China\">Busuanzi Counting</a></li>\n</ul>\n<h3 id=\"Post-Widgets\"><a href=\"#Post-Widgets\" class=\"headerlink\" title=\"Post Widgets\"></a>Post Widgets</h3><ul>\n<li><a href=\"/docs/third-party-services/post-widgets.html#Widgetpack-Rating\">Widgetpack Rating</a></li>\n<li><a href=\"/docs/third-party-services/post-widgets.html#AddThis\">AddThis</a></li>\n</ul>\n<h3 id=\"Search-Services\"><a href=\"#Search-Services\" class=\"headerlink\" title=\"Search Services\"></a>Search Services</h3><ul>\n<li><a href=\"/docs/third-party-services/search-services.html#Algolia-Search\">Algolia Search</a></li>\n<li><a href=\"/docs/third-party-services/search-services.html#Local-Search\">Local Search</a></li>\n<li><a href=\"/docs/third-party-services/search-services.html#Swiftype-Search\">Swiftype</a></li>\n</ul>\n<h3 id=\"Chat-Services\"><a href=\"#Chat-Services\" class=\"headerlink\" title=\"Chat Services\"></a>Chat Services</h3><ul>\n<li><a href=\"/docs/third-party-services/chat-services.html#Chatra\">Chatra</a></li>\n<li><a href=\"/docs/third-party-services/chat-services.html#Tidio\">Tidio</a></li>\n</ul>\n<h3 id=\"External-Libraries\"><a href=\"#External-Libraries\" class=\"headerlink\" title=\"External Libraries\"></a>External Libraries</h3><ul>\n<li><a href=\"/docs/third-party-services/external-libraries.html#PJAX\">PJAX</a></li>\n<li><a href=\"/docs/third-party-services/external-libraries.html#Fancybox\">Fancybox</a></li>\n<li><a href=\"/docs/third-party-services/external-libraries.html#Medium-Zoom\">MediumZoom</a></li>\n<li><a href=\"/docs/third-party-services/external-libraries.html#Lazyload\">Lazyload</a></li>\n<li><a href=\"/docs/third-party-services/external-libraries.html#Pangu-Autospace\">Pangu Autospace</a></li>\n<li><a href=\"/docs/third-party-services/external-libraries.html#Quicklink\">Quicklink</a></li>\n<li><a href=\"/docs/third-party-services/external-libraries.html#Animation-Effect\">Motion</a></li>\n<li><a href=\"/docs/third-party-services/external-libraries.html#Progress-Bar\">Progress bar</a></li>\n<li><a href=\"/docs/third-party-services/external-libraries.html#Canvas-Ribbon\">Canvas Ribbon</a></li>\n</ul>\n"},{"title":"Comment Systems","url":"/blog-next/docs/third-party-services/comments.html","content":"<h3 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h3><h4 id=\"Multiple-Comment-System-Support\"><a href=\"#Multiple-Comment-System-Support\" class=\"headerlink\" title=\"Multiple Comment System Support\"></a>Multiple Comment System Support</h4><p>NexT allows you to enable multiple commenting systems at the same time. You can modify the following configuration to adjust the style or behavior of multiple commenting systems.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Multiple Comment System Support</span></span><br><span class=\"line\"><span class=\"attr\">comments:</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: tabs | buttons</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">tabs</span></span><br><span class=\"line\">  <span class=\"comment\"># Choose a comment system to be displayed by default</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span></span><br><span class=\"line\">  <span class=\"attr\">active:</span></span><br><span class=\"line\">  <span class=\"comment\"># Setting `true` means remembering the comment system selected by the visitor</span></span><br><span class=\"line\">  <span class=\"attr\">storage:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># Lazyload all comment systems.</span></span><br><span class=\"line\">  <span class=\"attr\">lazyload:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Modify icons and texts for any style, here are some examples</span></span><br><span class=\"line\">  <span class=\"attr\">nav:</span></span><br><span class=\"line\">    <span class=\"comment\">#disqus:</span></span><br><span class=\"line\">    <span class=\"comment\">#  text: Load Disqus</span></span><br><span class=\"line\">    <span class=\"comment\">#  order: -1</span></span><br><span class=\"line\">    <span class=\"comment\">#gitalk:</span></span><br><span class=\"line\">    <span class=\"comment\">#  order: -2</span></span><br></pre></td></tr></table></figure>\n\n<p>You can enable lazyload by setting value <code>comments.lazyload</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>. NexT uses IntersectionObserver to lazyload the comments, which is not supported by IE and most browsers released before 2017.</p>\n<iframe data-feature=\"intersectionobserver\" src=\"https://caniuse.bitsofco.de/embed/index.html?feat=intersectionobserver&periods=current,past_1,past_2,past_3,past_4,past_5&accessible-colours=false\" frameborder=\"0\" width=\"100%\" height=\"400px\"></iframe>\n\n<p>If your blog readers are mostly using legacy browsers, please consider using <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3czYy9JbnRlcnNlY3Rpb25PYnNlcnZlci90cmVlL21hc3Rlci9wb2x5ZmlsbA==\">Intersection Observer polyfill<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<h4 id=\"How-to-Disable-Comments-on-Page\"><a href=\"#How-to-Disable-Comments-on-Page\" class=\"headerlink\" title=\"How to Disable Comments on Page\"></a>How to Disable Comments on Page</h4><p>When you enabled comment service like Disqus, all new page will have comment service automatically. If you want to disable it in one page, just add <code>comments</code> key to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZnJvbnQtbWF0dGVy\">front-matter<i class=\"fa fa-external-link-alt\"></i></span> and set its value to <code>false</code>. Like following:</p>\n<figure class=\"highlight md\"><figcaption><span>your-post.md</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">title: All tags</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\"><span class=\"section\">comments: false</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Rename-Comment-Count-Text\"><a href=\"#Rename-Comment-Count-Text\" class=\"headerlink\" title=\"Rename Comment Count Text\"></a>Rename Comment Count Text</h4><p>You can rename the post meta text of comment count using <code>languages.yml</code>: <a href=\"/docs/theme-settings/internationalization.html#Override-Default-Translations\">Override Default Translations</a>.</p>\n<h3 id=\"Disqus\"><a href=\"#Disqus\" class=\"headerlink\" title=\"Disqus\"></a>Disqus</h3><p>Disqus is a global comment system that improves discussion on websites and connects conversations across the web.</p>\n<ol>\n<li>Create an account and log into <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaXNxdXMuY29tLw==\">Disqus<i class=\"fa fa-external-link-alt\"></i></span>. Once logged in, click the <code>GET STARTED</code> button on the homepage, then select <code>I want to install Disqus on my site</code> option and you will see the <code>Create a new site</code> interface.</li>\n<li>Enter your <code>Website Name</code>, which will serve as your Disqus shortname, and select a Category from the drop-down menu. Then click <code>Create Site</code> button.</li>\n<li>Choose <code>I don&#39;t see my platform listed, install manually with Universal Code</code>, configure Disqus for your site, and click <code>Complete Setup</code> button.</li>\n<li>Set the value <code>enable</code> to <code>true</code>, add the obtained Disqus shortname (<code>shortname</code>), and edit other configurations in <code>disqus</code> section in the <mark class=\"label primary\">theme config file</mark> as following: <figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">disqus:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">shortname:</span> <span class=\"string\">your-short-disqus-name</span></span><br><span class=\"line\">  <span class=\"attr\">count:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"DisqusJS\"><a href=\"#DisqusJS\" class=\"headerlink\" title=\"DisqusJS\"></a>DisqusJS</h3><p>Render Disqus comment component using Disqus API.</p>\n<ol>\n<li>Get your Disqus API Key from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaXNxdXMuY29tL2FwaS9hcHBsaWNhdGlvbnMv\">Disqus API Application<i class=\"fa fa-external-link-alt\"></i></span>.</li>\n<li>Go to the settings page of your Disqus Application, enter your domain in Settings → Domains.</li>\n<li>Get your Disqus Shortname from <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaXNxdXMuY29tL2FkbWluL3NldHRpbmdzL2dlbmVyYWwv\">General Settings - Disqus Admin<i class=\"fa fa-external-link-alt\"></i></span>.</li>\n<li>Set the value <code>enable</code> to <code>true</code>, add the obtained Disqus API Key (<code>apikey</code>) and Shortname (<code>shortname</code>), and edit other configurations in <code>disqusjs</code> section in the <mark class=\"label primary\">theme config file</mark> as following: <figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># DisqusJS</span></span><br><span class=\"line\"><span class=\"comment\"># Alternative Disqus - Render comment component using Disqus API</span></span><br><span class=\"line\"><span class=\"comment\"># Demo: https://suka.js.org/DisqusJS/</span></span><br><span class=\"line\"><span class=\"attr\">disqusjs:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># API Endpoint of Disqus API (https://disqus.com/api/)</span></span><br><span class=\"line\">  <span class=\"comment\"># leave api empty if you are able to connect to Disqus API</span></span><br><span class=\"line\">  <span class=\"comment\"># otherwise you need a reverse proxy for Disqus API</span></span><br><span class=\"line\">  <span class=\"comment\"># For example:</span></span><br><span class=\"line\">  <span class=\"comment\"># api: https://disqus.skk.moe/disqus/</span></span><br><span class=\"line\">  <span class=\"attr\">api:</span></span><br><span class=\"line\">  <span class=\"attr\">apikey:</span> <span class=\"comment\"># register new application from https://disqus.com/api/applications/</span></span><br><span class=\"line\">  <span class=\"attr\">shortname:</span> <span class=\"comment\"># See: https://disqus.com/admin/settings/general/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"LiveRe\"><a href=\"#LiveRe\" class=\"headerlink\" title=\"LiveRe\"></a>LiveRe</h3><p>LiveRe is a content platform based on social networking site reviews to help users communicate freely.</p>\n<ol>\n<li><p>Create an account or log into <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saXZlcmUuY29tLw==\">LiveRe<i class=\"fa fa-external-link-alt\"></i></span>, click on the <code>installation</code> button and select the free city version, then click on the <code>install now</code> button.</p>\n</li>\n<li><p>Copy the <code>data-uid</code> field in the installation code to get your LiveRe UID.</p>\n</li>\n<li><p>Add the obtained LiveRe UID to the <code>livere_uid</code> section in the <mark class=\"label primary\">theme config file</mark> as following:</p>\n <figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Support for LiveRe comments system.</span></span><br><span class=\"line\"><span class=\"comment\"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class=\"line\"><span class=\"attr\">livere_uid:</span> <span class=\"string\">your_uid</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"Gitalk\"><a href=\"#Gitalk\" class=\"headerlink\" title=\"Gitalk\"></a>Gitalk</h3><p>Gitalk is a modern comment component based on Github Issue and Preact.</p>\n<ol>\n<li><p>Click here to sign up for a <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL2FwcGxpY2F0aW9ucy9uZXc=\">new OAuth Application<i class=\"fa fa-external-link-alt\"></i></span>. Other content can be filled in at will, but be sure to fill in the correct callback URL (usually the domain name corresponding to the comment page). Then you will get a Client ID and a Client secret.</p>\n</li>\n<li><p>Create a repository you want to store Gitalk comments in your GitHub.</p>\n</li>\n<li><p>Set the value <code>enable</code> to <code>true</code>, add Client ID (<code>client_id</code>) and Client secret (<code>client_secret</code>) in step 1, add your Github username (<code>github_id</code> and <code>admin_user</code>) and the created repository name (<code>repo</code>) in step 2, and edit other configurations in <code>gitalk</code> section in the <mark class=\"label primary\">theme config file</mark> as following:</p>\n <figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk</span></span><br><span class=\"line\"><span class=\"comment\"># Demo: https://gitalk.github.io</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">github_id:</span>  <span class=\"comment\"># Github repo owner</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>  <span class=\"comment\"># Repository name to store issues</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>  <span class=\"comment\"># Github Application Client ID</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>  <span class=\"comment\"># Github Application Client Secret</span></span><br><span class=\"line\">  <span class=\"attr\">admin_user:</span>  <span class=\"comment\"># GitHub repo owner and collaborators, only these guys can initialize github issues</span></span><br><span class=\"line\">  <span class=\"attr\">distraction_free_mode:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Facebook-like distraction free mode</span></span><br><span class=\"line\">  <span class=\"comment\"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class=\"line\">  <span class=\"comment\"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class=\"line\">  <span class=\"comment\"># Available value: en, es-ES, fr, ru, zh-CN, zh-TW</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<div class=\"note warning\"><p>Hexo has encode URLs by default since version 4.0: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL3B1bGwvMzcwOA==\">PR 3708<i class=\"fa fa-external-link-alt\"></i></span>.<br>Gitalk relies on the md5 value of the page path for tagging, and this may cause issues. It&#39;s recommended to upgrade Hexo to 4.0 (or later), NexT to 7.7.0 (or later) to use Gitalk.</p>\n</div>\n\n<h3 id=\"Valine-China\"><a href=\"#Valine-China\" class=\"headerlink\" title=\"Valine (China)\"></a>Valine (China)</h3><p>Valine is a fast, simple &amp; efficient Leancloud based no back end comment system.</p>\n<ol>\n<li><p>Create an account or log into <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2xvZ2luLmh0bWwjL3NpZ25pbg==\">LeanCloud<i class=\"fa fa-external-link-alt\"></i></span>, and then click on the bottom left corner to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2FwcGxpc3QuaHRtbCMvbmV3YXBw\">create the application<i class=\"fa fa-external-link-alt\"></i></span> in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFuY2xvdWQuY24vZGFzaGJvYXJkL2FwcGxpc3QuaHRtbCMvYXBwcw==\">dashboard<i class=\"fa fa-external-link-alt\"></i></span>.<br> <img src=\"/images/docs/valine-1.png\" alt=\"Valine\" loading=\"lazy\"></p>\n</li>\n<li><p>Go to the application you just created, select <code>Settings → App Keys</code> in the lower left corner, and you will see your APP ID and APP Key.<br> <img src=\"/images/docs/valine-2.png\" alt=\"Valine\" loading=\"lazy\"></p>\n</li>\n<li><p>Set the value <code>enable</code> to <code>true</code>, add the obtained APP ID (<code>appId</code>) and APP Key (<code>appKey</code>), and edit other configurations in <code>valine</code> section in the <mark class=\"label primary\">theme config file</mark> as following:</p>\n <figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Valine</span></span><br><span class=\"line\"><span class=\"comment\"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class=\"line\"><span class=\"attr\">valine:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">appId:</span>  <span class=\"comment\"># your leancloud application appid</span></span><br><span class=\"line\">  <span class=\"attr\">appKey:</span>  <span class=\"comment\"># your leancloud application appkey</span></span><br><span class=\"line\">  <span class=\"attr\">placeholder:</span> <span class=\"string\">Just</span> <span class=\"string\">go</span> <span class=\"string\">go</span> <span class=\"comment\"># comment box placeholder</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">mm</span> <span class=\"comment\"># gravatar style</span></span><br><span class=\"line\">  <span class=\"attr\">meta:</span> [<span class=\"string\">nick</span>, <span class=\"string\">mail</span>, <span class=\"string\">link</span>] <span class=\"comment\"># Custom comment header</span></span><br><span class=\"line\">  <span class=\"attr\">pageSize:</span> <span class=\"number\">10</span> <span class=\"comment\"># pagination size</span></span><br><span class=\"line\">  <span class=\"attr\">visitor:</span> <span class=\"literal\">false</span> <span class=\"comment\"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#x27; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br><span class=\"line\">  <span class=\"attr\">comment_count:</span> <span class=\"literal\">true</span> <span class=\"comment\"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class=\"line\">  <span class=\"attr\">recordIP:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Whether to record the commenter IP</span></span><br><span class=\"line\">  <span class=\"attr\">serverURLs:</span> <span class=\"comment\"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"Changyan-China\"><a href=\"#Changyan-China\" class=\"headerlink\" title=\"Changyan (China)\"></a>Changyan (China)</h3><p>Changyan is the industry&#39;s leading social commenting system, supporting both PC and mobile access methods, providing a new way of commenting on websites. Changyan has a variety of common account login, triple filtering mechanism, real-time data statistics, fast data export, comprehensive support for mobile and other leading functions. It fully satisfies the needs of major websites for user login, comment, sharing, and review.</p>\n<ol>\n<li><p>Create an account or log into <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaGFuZ3lhbi5rdWFpemhhbi5jb20v\">Changyan<i class=\"fa fa-external-link-alt\"></i></span>, then add your site to get APP ID and APP KEY.</p>\n</li>\n<li><p>Set the value <code>enable</code> to <code>true</code>, and add the obtained APP ID (<code>appid</code>) and APP KEY (<code>appkey</code>) to the <code>changyan</code> section in the <mark class=\"label primary\">theme config file</mark> as following:</p>\n <figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># changyan</span></span><br><span class=\"line\"><span class=\"attr\">changyan:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">appid:</span></span><br><span class=\"line\">  <span class=\"attr\">appkey:</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<div class=\"note warning\"><p>Please note that you should fill in the ICP record number of your website in time. If not, or the record information is not correct, the comment service will be stopped after 13 days. <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaGFuZ3lhbi5rdWFpemhhbi5jb20vaGVscC9vLWJlaWFuLmh0bWw=\">Useful link<i class=\"fa fa-external-link-alt\"></i></span></p>\n</div>\n"},{"title":"External Libraries","url":"/blog-next/docs/third-party-services/external-libraries.html","content":"<h3 id=\"PJAX\"><a href=\"#PJAX\" class=\"headerlink\" title=\"PJAX\"></a>PJAX</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vT3gvcGpheA==\">Pjax<i class=\"fa fa-external-link-alt\"></i></span> is a standalone JavaScript module that uses AJAX (XmlHttpRequest) and <code>pushState()</code> to deliver a fast browsing experience.</p>\n<p>It allows you to completely transform the user experience of standard websites (server-side generated or static ones) to make users feel like they are browsing an app, especially for those with low bandwidth connections.</p>\n<div class=\"note warning\"><p>Please use the absolute path of the image or <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdGFnLXBsdWdpbnMjSW5jbHVkZS1Bc3NldHM=\">Hexo asset_img tag<i class=\"fa fa-external-link-alt\"></i></span> in your posts, otherwise the images may fail to load during Pjax refresh.</p>\n</div>\n\n<p>You can enable it by setting value <code>pjax</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Easily enable fast Ajax navigation on your website.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information: https://github.com/next-theme/pjax</span></span><br><span class=\"line\"><span class=\"attr\">pjax:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fancybox\"><a href=\"#Fancybox\" class=\"headerlink\" title=\"Fancybox\"></a>Fancybox</h3><p>NexT supports the fancybox plugin, which is a jQuery lightbox script for displaying images, videos and more. Touch enabled, responsive and fully customizable.</p>\n<p>You can enable it by setting value <code>fancybox</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Medium-Zoom\"><a href=\"#Medium-Zoom\" class=\"headerlink\" title=\"Medium Zoom\"></a>Medium Zoom</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZyYW5jb2lzY2hhbGlmb3VyL21lZGl1bS16b29t\">Medium Zoom<i class=\"fa fa-external-link-alt\"></i></span> is a JavaScript library for zooming images like Medium.</p>\n<p>You can enable it by setting value <code>mediumzoom</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A JavaScript library for zooming images like Medium.</span></span><br><span class=\"line\"><span class=\"attr\">mediumzoom:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning\"><p>Do not enable both <code>fancybox</code> and <code>mediumzoom</code>.</p>\n</div>\n\n<h3 id=\"Lazyload\"><a href=\"#Lazyload\" class=\"headerlink\" title=\"Lazyload\"></a>Lazyload</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Fwb29ydlNheGVuYS9sb3phZC5qcw==\">Lozad.js<i class=\"fa fa-external-link-alt\"></i></span> is a lazy loader plugin in modern vanilla JavaScript. It delays loading of images in long web pages. Images outside of viewport will not be loaded before user scrolls to them. This is opposite of image preloading.</p>\n<p>You can enable it by setting value <code>lazyload</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Vanilla JavaScript plugin for lazyloading images.</span></span><br><span class=\"line\"><span class=\"attr\">lazyload:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>Then run the following command in <mark class=\"label info\">site root dir</mark> to ensure that <code>lazyload</code> can be enabled or disabled correctly:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pangu-Autospace\"><a href=\"#Pangu-Autospace\" class=\"headerlink\" title=\"Pangu Autospace\"></a>Pangu Autospace</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZpbnRhL3Bhbmd1Lmpz\">pangu.js<i class=\"fa fa-external-link-alt\"></i></span> will automatically insert a blank space between all the Chinese characters and the hexagonal English numeric symbols on the page.</p>\n<p>You can enable it by setting value <code>pangu</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Pangu Support</span></span><br><span class=\"line\"><span class=\"attr\">pangu:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Quicklink\"><a href=\"#Quicklink\" class=\"headerlink\" title=\"Quicklink\"></a>Quicklink</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZUxhYnMvcXVpY2tsaW5r\">Quicklink<i class=\"fa fa-external-link-alt\"></i></span> is a JavaScript plugin that faster subsequent page-loads by prefetching in-viewport links during idle time. Chrome, Firefox, Edge are supported without polyfills.</p>\n<p>You can enable it by setting value <code>quicklink.enable</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">quicklink:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">archive:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">delay:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">timeout:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">  <span class=\"attr\">priority:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">ignores:</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Animation-Effect\"><a href=\"#Animation-Effect\" class=\"headerlink\" title=\"Animation Effect\"></a>Animation Effect</h3><p>NexT enables animation effect by default which is supported by Anime.js and Animate.css, so it will wait for JavaScript loaded to show content.<br>If you need speed you can set this section <code>enable</code> to <code>false</code> to disable it.</p>\n<p>Edit <mark class=\"label primary\">theme config file</mark> and set the needed values under the <code>motion</code> to fit your demand. You can preview all Transition variants here: <span class=\"exturl\" data-url=\"aHR0cHM6Ly90aGVtZS1uZXh0LmpzLm9yZy9hbmltYXRlLw==\">NexT Animation Effect Preview<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use Animate.css to animate everything.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information: https://animate.style</span></span><br><span class=\"line\"><span class=\"attr\">motion:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">async:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">transition:</span></span><br><span class=\"line\">    <span class=\"comment\"># All available Transition variants: https://theme-next.js.org/animate/</span></span><br><span class=\"line\">    <span class=\"attr\">post_block:</span> <span class=\"string\">fadeIn</span></span><br><span class=\"line\">    <span class=\"attr\">post_header:</span> <span class=\"string\">fadeInDown</span></span><br><span class=\"line\">    <span class=\"attr\">post_body:</span> <span class=\"string\">fadeInDown</span></span><br><span class=\"line\">    <span class=\"attr\">coll_header:</span> <span class=\"string\">fadeInLeft</span></span><br><span class=\"line\">    <span class=\"comment\"># Only for Pisces | Gemini.</span></span><br><span class=\"line\">    <span class=\"attr\">sidebar:</span> <span class=\"string\">fadeInUp</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Progress-Bar\"><a href=\"#Progress-Bar\" class=\"headerlink\" title=\"Progress Bar\"></a>Progress Bar</h3><p>NProgress will automatically monitor your Ajax requests, event loop lag, document ready state and elements on your page to decide on the progress.</p>\n<div class=\"tabs\" id=\"nprogress\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#nprogress-1\"><code>nprogress</code></a></li><li class=\"tab\"><a href=\"#nprogress-2\"><code>spinner</code></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"nprogress-1\"><p>You can enable it by setting value <code>nprogress.enable</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">nprogress:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"nprogress-2\"><p>Turn off loading spinner by setting it to <code>false</code>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">nprogress:</span></span><br><span class=\"line\">  <span class=\"attr\">spinner:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"Canvas-Ribbon\"><a href=\"#Canvas-Ribbon\" class=\"headerlink\" title=\"Canvas Ribbon\"></a>Canvas Ribbon</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2h1c3RjYy9yaWJib24uanM=\">canvas-ribbon.js<i class=\"fa fa-external-link-alt\"></i></span> is a ribbon backgroud of website draw on canvas.</p>\n<p>You can enable it by setting value <code>canvas_ribbon</code> to <code>true</code> in <mark class=\"label primary\">theme config file</mark>. You can also configure the ribbon setting by editing values in <code>canvas_ribbon</code> section:</p>\n<ul>\n<li>size: The width of the ribbon.</li>\n<li>alpha: The transparency of the ribbon.</li>\n<li>zIndex: The display level of the ribbon.</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">canvas_ribbon:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">size:</span> <span class=\"number\">300</span></span><br><span class=\"line\">  <span class=\"attr\">alpha:</span> <span class=\"number\">0.6</span></span><br><span class=\"line\">  <span class=\"attr\">zIndex:</span> <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Math Equations","url":"/blog-next/docs/third-party-services/math-equations.html","content":"<h3 id=\"Settings\"><a href=\"#Settings\" class=\"headerlink\" title=\"Settings\"></a>Settings</h3><figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Math Formulas Render Support</span></span><br><span class=\"line\"><span class=\"attr\">math:</span></span><br><span class=\"line\">  <span class=\"comment\"># Default (false) will load mathjax / katex script on demand.</span></span><br><span class=\"line\">  <span class=\"comment\"># That is it only render those page which has `mathjax: true` in front-matter.</span></span><br><span class=\"line\">  <span class=\"comment\"># If you set it to true, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class=\"line\">  <span class=\"attr\">every_page:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mathjax:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">katex:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class=\"line\">    <span class=\"attr\">copy_tex:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>The <code>every_page</code> option controls whether to render Math Equations every page.</p>\n<ul>\n<li><strong><code>true</code></strong> → Equations will be processed on demand. It will only render those posts which have <code>mathjax: true</code> in their front-matter.</li>\n<li><code>false</code> → Equations will be processed on every page. Even if they not exists on one or another page.</li>\n</ul>\n<details class=\"note default\"><summary><p><strong>Examples with <code>every_page: false</code> option</strong></p>\n</summary>\n<ul>\n<li><p>This post will render the Math Equations</p>\n  <figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Will Render Math</span><br><span class=\"line\"><span class=\"section\">mathjax: true</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>This post will NOT render the Math Equations</p>\n  <figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Not Render Math</span><br><span class=\"line\"><span class=\"section\">mathjax: false</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>This post will NOT render the Math Equations either</p>\n  <figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"><span class=\"section\">title: Not Render Math Either</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n\n</details>\n\n<p>The <code>mathjax</code> and <code>katex</code> options are used to set the rendering engine. Please read the detailed document below.</p>\n<h3 id=\"Render-Engines\"><a href=\"#Render-Engines\" class=\"headerlink\" title=\"Render Engines\"></a>Render Engines</h3><p>For now, NexT provides two render engines for displaying Math Equations: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWF0aGpheC5vcmcv\">MathJax<i class=\"fa fa-external-link-alt\"></i></span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYXRleC5vcmcv\">KaTeX<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<p>MathJax is a JavaScript display engine for mathematics that works in all browsers. It is highly modular on input and output. Use MathML, TeX, and ASCIImath as input and produce HTML+CSS, SVG, or MathML as output.</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW50bWF0aC5jb20vY2c1L2thdGV4LW1hdGhqYXgtY29tcGFyaXNvbi5waHA=\">KaTeX is a faster<i class=\"fa fa-external-link-alt\"></i></span> math render engine compared to MathJax 3. And it could survive without JavaScript. But, for now <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0thVGVYL0thVGVYL3dpa2kvVGhpbmdzLXRoYXQtS2FUZVgtZG9lcy1ub3QtKHlldCktc3VwcG9ydA==\">KaTeX supports less features<i class=\"fa fa-external-link-alt\"></i></span> than MathJax. Here is a list of <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYXRleC5vcmcvZG9jcy9zdXBwb3J0ZWQuaHRtbA==\">TeX functions supported by KaTeX<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<p>To use this feature, firstly you need to choose a render engine and turn on <code>enable</code> for it (located in <mark class=\"label primary\">theme config file</mark>). Then you need to install the <strong>corresponding Hexo Renderer</strong> to fully support the display of Math Equations - Only turn on <code>enable</code> <strong>may not let you see the displayed equations correctly</strong>.</p>\n<div class=\"tabs\" id=\"render-engines\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#render-engines-1\">MathJax</a></li><li class=\"tab\"><a href=\"#render-engines-2\">KaTeX</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"render-engines-1\"><p><strong>Renderer Choosing</strong></p>\n<p>If you use MathJax to render Math Equations, you can choose one of the Markdown renderers below:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3d6cGFuL2hleG8tcmVuZGVyZXItcGFuZG9j\">hexo-renderer-pandoc<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p><strong>Installation</strong></p>\n<ol>\n<li><p>Firstly, set <code>mathjax</code> as render engine in <mark class=\"label primary\">theme config file</mark>.</p>\n <figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">math:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"attr\">mathjax:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Then you need to uninstall the original renderer <code>hexo-renderer-marked</code>, and install <code>hexo-renderer-pandoc</code>:</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm un hexo-renderer-marked</span><br><span class=\"line\">$ npm i hexo-renderer-pandoc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pnbS9wYW5kb2M=\">pandoc<i class=\"fa fa-external-link-alt\"></i></span> is required for hexo-renderer-pandoc, here&#39;s <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pnbS9wYW5kb2MvYmxvYi9tYXN0ZXIvSU5TVEFMTC5tZA==\">how to install pandoc<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n</li>\n</ol>\n<p><strong>Plugins</strong></p>\n<p>All extensions of MathJax are loaded automatically. For example, <code>mhchem</code> is a tool for writing beautiful chemical equations easily. It implements the <code>\\ce</code> and <code>\\pu</code> chemical equation macros of the LaTeX mhchem package. More infomation: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9taGNoZW0uZ2l0aHViLmlvL01hdGhKYXgtbWhjaGVtLw==\">MathJax/mhchem Manual<i class=\"fa fa-external-link-alt\"></i></span>.</p></div><div class=\"tab-pane\" id=\"render-engines-2\"><p><strong>Renderer Choosing</strong></p>\n<p>If you use KaTeX to render Math Equations, you can choose one of the Markdown renderers below:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NIRU5YQ0hFTi9oZXhvLXJlbmRlcmVyLW1hcmtkb3duLWl0LXBsdXM=\">hexo-renderer-markdown-it-plus<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLXJlbmRlcmVyLW1hcmtkb3duLWl0\">hexo-renderer-markdown-it<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p><strong>Installation</strong></p>\n<ol>\n<li><p>Firstly, set <code>katex</code> as render engine in <mark class=\"label primary\">theme config file</mark>.</p>\n <figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">math:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"attr\">katex:</span></span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Then you need to uninstall the original renderer <code>hexo-renderer-marked</code> and install one of the renderer plugins:</p>\n</li>\n</ol>\n<div class=\"tabs\" id=\"katex-renderer\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#katex-renderer-1\">hexo-renderer-markdown-it-plus</a></li><li class=\"tab\"><a href=\"#katex-renderer-2\">hexo-renderer-markdown-it</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"katex-renderer-1\"><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm un hexo-renderer-marked</span><br><span class=\"line\">$ npm i hexo-renderer-markdown-it-plus</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"katex-renderer-2\"><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm un hexo-renderer-marked</span><br><span class=\"line\">$ npm i hexo-renderer-markdown-it</span><br></pre></td></tr></table></figure>\n\n<p>If you use <code>hexo-renderer-markdown-it</code>, you also need to install <code>markdown-it-katex</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm i markdown-it-katex</span><br></pre></td></tr></table></figure>\n\n<p>And then in <mark class=\"label info\">site config file</mark> you need to add <code>markdown-it-katex</code> as a plugin for <code>hexo-renderer-markdown-it</code>:</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config of hexo-renderer-markdown-it</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">&#x27;“”‘’&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">plugins:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">markdown-it-katex</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<p><strong>Plugins</strong></p>\n<p>Copy-tex extension for KaTeX modifes the copy/paste behavior in any browser supporting the Clipboard API so that, when selecting and copying whole KaTeX-rendered elements, the text content of the resulting clipboard renders KaTeX elements as their LaTeX source surrounded by specified delimiters. More infomation: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0thVGVYL0thVGVYL3RyZWUvbWFzdGVyL2NvbnRyaWIvY29weS10ZXg=\">Copy-tex extension<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">math:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"attr\">katex:</span></span><br><span class=\"line\">    <span class=\"comment\"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class=\"line\">    <span class=\"attr\">copy_tex:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note danger\"><p><strong>Known Issues</strong></p>\n<ol>\n<li>Firstly, please check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYXRleC5vcmcvZG9jcy9pc3N1ZXMuaHRtbA==\">Common Issues<i class=\"fa fa-external-link-alt\"></i></span> of KaTeX.</li>\n<li>Displayed Math (i.e. <code>$$...$$</code>) needs to started with new clear line.<br> In other words: you must not have any characters (except of whitespaces) <strong>before the opening <code>$$</code> and after the ending <code>$$</code></strong> (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L3B1bGwvMzIjaXNzdWVjb21tZW50LTM1NzQ4OTUwOQ==\">comment #32<i class=\"fa fa-external-link-alt\"></i></span>).</li>\n<li>Don&#39;t support Unicode (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L3B1bGwvMzIjaXNzdWVjb21tZW50LTM1NzQ4OTUwOQ==\">comment #32<i class=\"fa fa-external-link-alt\"></i></span>).</li>\n<li>Inline Math (..<code>$...$</code>) must not have white spaces <strong>after the opening <code>$</code> and before the ending <code>$</code></strong> (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L3B1bGwvMzIjaXNzdWVjb21tZW50LTM1NzQ4OTUwOQ==\">comment #32<i class=\"fa fa-external-link-alt\"></i></span>).</li>\n<li>If you use math in Heading (i.e. <code>## Heading</code>).<br> Then in corresponding TOC item it will show the related LaTeX code 3 times (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L3B1bGwvMzIjaXNzdWVjb21tZW50LTM1OTAxODY5NA==\">comment #32<i class=\"fa fa-external-link-alt\"></i></span>).</li>\n<li>If you use math in your post&#39;s title, it will not be rendered (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L3B1bGwvMzIjaXNzdWVjb21tZW50LTM1OTE0Mjg3OQ==\">comment #32<i class=\"fa fa-external-link-alt\"></i></span>).</li>\n</ol>\n</div></div></div></div>\n\n<div class=\"note warning\"><p>After setting up the math rendering engine or installing / uninstalling the Markdown renderer, please execute <code>hexo clean</code>. Run standard Hexo generate, deploy process or start the server to test whether the plugin is working properly:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean &amp;&amp; hexo g -d</span><br><span class=\"line\"><span class=\"comment\"># or hexo clean &amp;&amp; hexo s</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"note warning\"><p>Except for the required renderer, any other Hexo math plugins are unnecessary and there is no need to manually import any JS or CSS files. If you have installed plugins such as <code>hexo-math</code> or <code>hexo-katex</code>, they may conflict with the built-in render engine of NexT.</p>\n</div>\n\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><div class=\"note info\"><p>The following examples are rendered by <code>hexo-renderer-marked</code> with <code>mathjax</code> engine.</p>\n</div>\n\n<div class=\"note warning\"><p>In some cases, the syntax of Markdown and TeX will conflict. For example, an underscore (<code>_</code>) may be interpreted as the start of italic text in Markdown, or subscripted mark in TeX. To avoid syntax errors, please use escape characters (<code>\\_</code>) instead.</p>\n</div>\n\n<h4 id=\"Numbering-and-referring-equations-in-MathJax\"><a href=\"#Numbering-and-referring-equations-in-MathJax\" class=\"headerlink\" title=\"Numbering and referring equations in MathJax\"></a>Numbering and referring equations in MathJax</h4><p>In the new version of NexT, we have added feature to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1hdGhqYXgub3JnL2VuL2xhdGVzdC9pbnB1dC90ZXgvZXFudW1iZXJzLmh0bWw=\">automatic equation numbering<i class=\"fa fa-external-link-alt\"></i></span> with opportunity to make reference to that equations. We briefly describe how to use this feature below.</p>\n<p>In general, to make the automatic equation numbering work, you have to wrap your LaTeX equations in <code>equation</code> environment. Using the plain old style (i.e., wrap an equation with two dollar signs in each side) will not work. How to refer to an equation? Just give a <code>\\label&#123;&#125;</code> tag and then in your later text, use <code>\\ref&#123;&#125;</code> or <code>\\eqref&#123;&#125;</code> to refer it. Using <code>\\eqref&#123;&#125;</code> is preferred since if you use <code>\\ref&#123;&#125;</code>, there are no parentheses around the equation number. Below are some of the common scenarios for equation numbering.</p>\n<h4 id=\"Simple-Equation\"><a href=\"#Simple-Equation\" class=\"headerlink\" title=\"Simple Equation\"></a>Simple Equation</h4><p>For simple equations, use the following form to give a tag,</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$$\\begin&#123;equation&#125; \\label&#123;eq1&#125;</span><br><span class=\"line\">e=mc^2</span><br><span class=\"line\">\\end&#123;equation&#125;$$</span><br></pre></td></tr></table></figure>\n\n<p>$$\\begin{equation} \\label{eq1}<br>e=mc^2<br>\\end{equation}$$</p>\n<p>Then, you can refer to this equation in your text easily by using something like:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">The famous matter-energy equation $\\eqref&#123;eq1&#125;$ proposed by Einstein...</span><br></pre></td></tr></table></figure>\n\n<p>The famous matter-energy equation $\\eqref{eq1}$ proposed by Einstein...</p>\n<h4 id=\"Multi-line-Equation\"><a href=\"#Multi-line-Equation\" class=\"headerlink\" title=\"Multi-line Equation\"></a>Multi-line Equation</h4><p>For multi-line equations, inside the <code>equation</code> environment, you can use the <code>aligned</code> environment to split it into multiple lines:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$$\\begin&#123;equation&#125; \\label&#123;eq2&#125;</span><br><span class=\"line\">\\begin&#123;aligned&#125;</span><br><span class=\"line\">a &amp;= b + c \\\\</span><br><span class=\"line\">  &amp;= d + e + f + g \\\\</span><br><span class=\"line\">  &amp;= h + i</span><br><span class=\"line\">\\end&#123;aligned&#125;</span><br><span class=\"line\">\\end&#123;equation&#125;$$</span><br></pre></td></tr></table></figure>\n\n<p>$$\\begin{equation} \\label{eq2}<br>\\begin{aligned}<br>a &amp;= b + c \\\\<br>  &amp;= d + e + f + g \\\\<br>  &amp;= h + i<br>\\end{aligned}<br>\\end{equation}$$</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Equation $\\eqref&#123;eq2&#125;$ is a multi-line equation.</span><br></pre></td></tr></table></figure>\n\n<p>Equation $\\eqref{eq2}$ is a multi-line equation.</p>\n<h4 id=\"Multiple-Aligned-Equations\"><a href=\"#Multiple-Aligned-Equations\" class=\"headerlink\" title=\"Multiple Aligned Equations\"></a>Multiple Aligned Equations</h4><p>We can use <code>align</code> environment to align multiple equations. Each of these equations will get its own numbers.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$$\\begin&#123;align&#125;</span><br><span class=\"line\">a &amp;= b + c \\label&#123;eq3&#125; \\\\</span><br><span class=\"line\">x &amp;= yz \\label&#123;eq4&#125; \\\\</span><br><span class=\"line\">l &amp;= m - n \\label&#123;eq5&#125;</span><br><span class=\"line\">\\end&#123;align&#125;$$</span><br></pre></td></tr></table></figure>\n\n<p>$$\\begin{align}<br>a &amp;= b + c \\label{eq3} \\\\<br>x &amp;= yz \\label{eq4} \\\\<br>l &amp;= m - n \\label{eq5}<br>\\end{align}$$</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">There are three aligned equations: equation $\\eqref&#123;eq3&#125;$, equation $\\eqref&#123;eq4&#125;$ and equation $\\eqref&#123;eq5&#125;$.</span><br></pre></td></tr></table></figure>\n\n<p>There are three aligned equations: equation $\\eqref{eq3}$, equation $\\eqref{eq4}$ and equation $\\eqref{eq5}$.</p>\n<p>Since <code>align</code> in and of itself is a complete equation environment (read <span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZXguc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzk1NDAyL3doYXQtaXMtdGhlLWRpZmZlcmVuY2UtYmV0d2Vlbi1hbGlnbmVkLWluLWRpc3BsYXllZC1tb2RlLWFuZC1zdGFycmVkLWFsaWdu\">here<i class=\"fa fa-external-link-alt\"></i></span> about the difference between <code>aligned</code> and <code>align</code> in LaTeX). You do not need to wrap it with <code>equation</code> environment.</p>\n<h4 id=\"Exclude-equations-from-numbering\"><a href=\"#Exclude-equations-from-numbering\" class=\"headerlink\" title=\"Exclude equations from numbering\"></a>Exclude equations from numbering</h4><p>In the <code>align</code> environment, if you do not want to number one or some equations, just use <code>\\nonumber</code> right behind these equations. Like the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$$\\begin&#123;align&#125;</span><br><span class=\"line\">-4 + 5x &amp;= 2 + y \\nonumber \\\\</span><br><span class=\"line\">w + 2 &amp;= -1 + w \\\\</span><br><span class=\"line\">ab &amp;= cb</span><br><span class=\"line\">\\end&#123;align&#125;$$</span><br></pre></td></tr></table></figure>\n\n<p>$$\\begin{align}<br>-4 + 5x &amp;= 2 + y \\nonumber \\\\<br>w + 2 &amp;= -1 + w \\\\<br>ab &amp;= cb<br>\\end{align}$$</p>\n<h4 id=\"Use-tag-to-tag-equations\"><a href=\"#Use-tag-to-tag-equations\" class=\"headerlink\" title=\"Use \\tag to tag equations\"></a>Use <code>\\tag</code> to tag equations</h4><p>Sometimes, you want to use more «exotic» style to refer your equation. You can use <code>\\tag&#123;&#125;</code> to achieve this. For example:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$$x+1\\over\\sqrt&#123;1-x^2&#125; \\tag&#123;i&#125;\\label&#123;eq_tag&#125;$$</span><br></pre></td></tr></table></figure>\n\n<p>$$x+1\\over\\sqrt{1-x^2} \\tag{i}\\label{eq_tag}$$</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Equation $\\eqref&#123;eq_tag&#125;$ use `\\tag&#123;&#125;` instead of automatic numbering.</span><br></pre></td></tr></table></figure>\n\n<p>Equation $\\eqref{eq_tag}$ use <code>\\tag&#123;&#125;</code> instead of automatic numbering.</p>\n"},{"title":"Post Widgets","url":"/blog-next/docs/third-party-services/post-widgets.html","content":"<h3 id=\"Widgetpack-Rating\"><a href=\"#Widgetpack-Rating\" class=\"headerlink\" title=\"Widgetpack Rating\"></a>Widgetpack Rating</h3><p>Rating service with login through any social networks like Facebook, Twitter, Google+, LinkedIn, Instagram and others.</p>\n<div class=\"tabs\" id=\"rating\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#rating-1\">Get ID →</a></li><li class=\"tab\"><a href=\"#rating-2\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"rating-1\"><p>Login to <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWRnZXRwYWNrLmNvbS9hZG1pbiNzaWduaW4=\">widgetpack<i class=\"fa fa-external-link-alt\"></i></span> and add new site, you will get your site ID:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">wpac_init.push(&#123;widget: &#x27;Rating&#x27;, id: ID&#125;);</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"rating-2\"><p>You can enable it by setting value <code>rating.enable</code> to <code>true</code>, and copy <code>ID</code> value of <code>id</code> in <mark class=\"label primary\">theme config file</mark>. You can also configure the rating color by editing values in <code>rating.color</code> section.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rating:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">id:</span>     <span class=\"string\">ID</span> <span class=\"comment\">#&lt;app_id&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span>  <span class=\"string\">&quot;#fc6423&quot;</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"AddThis\"><a href=\"#AddThis\" class=\"headerlink\" title=\"AddThis\"></a>AddThis</h3><div class=\"tabs\" id=\"addthis\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#addthis-1\">Sign Up →</a></li><li class=\"tab\"><a href=\"#addthis-2\">AddThis ID →</a></li><li class=\"tab\"><a href=\"#addthis-3\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"addthis-1\"><p>Sign up in <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWRkdGhpcy5jb20v\">AddThis<i class=\"fa fa-external-link-alt\"></i></span>. You can use Google/Facebook/Twitter to login.</p></div><div class=\"tab-pane\" id=\"addthis-2\"><p>Get AddThis ID in this menu: <code>More..</code> → <code>General</code> → <code>ID</code>. See example on the picture below:<br><img src=\"/images/docs/add-this-id.png\" alt=\"AddThis ID\" loading=\"lazy\"></p></div><div class=\"tab-pane\" id=\"addthis-3\"><p>Edit the configurations in <code>add_this_id</code> section in the <mark class=\"label primary\">theme config file</mark> as following:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">add_this_id:</span> <span class=\"string\">your_add_this_id</span></span><br></pre></td></tr></table></figure></div></div></div>\n"},{"title":"Search Services","url":"/blog-next/docs/third-party-services/search-services.html","content":"<h3 id=\"Algolia-Search\"><a href=\"#Algolia-Search\" class=\"headerlink\" title=\"Algolia Search\"></a>Algolia Search</h3><p>NexT provides Algolia search plugin to search your Hexo website content. It should be noted that only turn on <code>enable</code> of <code>algolia_search</code> in <mark class=\"label primary\">theme config file</mark> does not allow you to use the Algolia search correctly. You need to install the corresponding Hexo plugin to index your website on Algolia: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29uY2xldG9tL2hleG8tYWxnb2xpYQ==\">Hexo Algolia<i class=\"fa fa-external-link-alt\"></i></span> or <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xvdWlzQmFycmFucXVlaXJvL2hleG8tYWxnb2xpYXNlYXJjaA==\">Hexo Algoliasearch<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<div class=\"note danger\"><p><strong>Known Issues</strong></p>\n<ol>\n<li>The latest version of the <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29uY2xldG9tL2hleG8tYWxnb2xpYQ==\">Hexo Algolia<i class=\"fa fa-external-link-alt\"></i></span> plugin removes the content indexing feature, given Algolia&#39;s free account limitation.</li>\n<li>The <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xvdWlzQmFycmFucXVlaXJvL2hleG8tYWxnb2xpYXNlYXJjaA==\">Hexo Algoliasearch<i class=\"fa fa-external-link-alt\"></i></span> plugin provides content indexing functionality. The same problem exists with <code>Record Too Big</code> for Algolia&#39;s free account.</li>\n</ol>\n</div>\n\n<p>Follow the steps described below to complete the installation of Algolia search.</p>\n<div class=\"tabs\" id=\"algolia-search\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#algolia-search-1\">Registration →</a></li><li class=\"tab\"><a href=\"#algolia-search-2\">Algolia Config →</a></li><li class=\"tab\"><a href=\"#algolia-search-3\">Algolia Plugin →</a></li><li class=\"tab\"><a href=\"#algolia-search-4\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"algolia-search-1\"><p>Register at <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxnb2xpYS5jb20v\">Algolia<i class=\"fa fa-external-link-alt\"></i></span>, you can log in directly using GitHub or Google Account. Upon Customer&#39;s initial sign-up for an Account, Customer will have a free, fourteen (14) day evaluation period (the «Evaluation Period») for the Algolia Services commencing on the Effective Date, subject to the limitations on Algolia&#39;s website. After that, Algolia offers a free, branded version for up to 10k records and 100k operations per month.</p>\n<p>If a tutorial pops up, you can skip it. Go straight to create an <code>Index</code> which will be used later.<br><img src=\"/images/docs/algolia-1.png\" alt=\"Algolia Create Index\" loading=\"lazy\"></p></div><div class=\"tab-pane\" id=\"algolia-search-2\"><ol>\n<li><p>Go to the <code>API Keys</code> page and find your credentials. You will need the <code>Application ID</code> and the <code>Search-only API key</code> in the following sections. The <code>Admin API key</code> need to keep confidential. Never store your Admin API Key as <code>apiKey</code> in <mark class=\"label info\">site config file</mark>: it would give full control of your Algolia index to others and you don&#39;t want to face the consequences.<br><img src=\"/images/docs/algolia-2.png\" alt=\"Algolia API Keys\" loading=\"lazy\"></p>\n</li>\n<li><p>In the <code>API Keys</code> page, click the <code>All API Keys</code> button to switch to the corresponding tab. Then click the <code>New API Key</code> button to activate a pop-up box where you can setup authorizations and restrictions with a great level of precision. Enter <code>addObject</code>, <code>deleteObject</code>, <code>listIndexes</code>, <code>deleteIndex</code> features in ACL permissions that will be allowed for the given API key. And then click the <code>Create</code> button. Copy this newly created key to the clipboard, we call it a <code>High-privilege API key</code>.<br><img src=\"/images/docs/algolia-3.png\" alt=\"Algolia API Keys 2\" loading=\"lazy\"><br><img src=\"/images/docs/algolia-4.png\" alt=\"Algolia Configuring Records\" loading=\"lazy\"></p>\n</li>\n</ol></div><div class=\"tab-pane\" id=\"algolia-search-3\"><p>Algolia requires users to upload their search index data either manually or via provided APIs. You need to choose one of the following two plugins to install. Both plugins will index your site and upload selected data to Algolia.</p>\n<div class=\"tabs\" id=\"algolia-plugin\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#algolia-plugin-1\">Hexo Algolia</a></li><li class=\"tab\"><a href=\"#algolia-plugin-2\">Hexo Algoliasearch</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"algolia-plugin-1\"><p>Install and configure <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29uY2xldG9tL2hleG8tYWxnb2xpYQ==\">Hexo Algolia<i class=\"fa fa-external-link-alt\"></i></span> in your Hexo directory.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ npm install hexo-algolia</span><br></pre></td></tr></table></figure>\n\n<p>In your <mark class=\"label info\">site config file</mark>, add the following configuration and replace the <code>Application ID</code>, <code>Search-only API key</code> and <code>indexName</code> with corresponding fields obtained at Algolia.</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">algolia:</span></span><br><span class=\"line\">  <span class=\"attr\">applicationID:</span> <span class=\"string\">&quot;Application ID&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">apiKey:</span> <span class=\"string\">&quot;Search-only API key&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">indexName:</span> <span class=\"string\">&quot;indexName&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Run the following command to upload index data, keep a weather eye out the output of the command.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> HEXO_ALGOLIA_INDEXING_KEY=High-privilege API key <span class=\"comment\"># Use Git Bash</span></span><br><span class=\"line\"><span class=\"comment\"># set HEXO_ALGOLIA_INDEXING_KEY=High-privilege API key # Use Windows command line</span></span><br><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo algolia</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/docs/algolia-5.png\" alt=\"Reload Index\" loading=\"lazy\"></p></div><div class=\"tab-pane\" id=\"algolia-plugin-2\"><p>Install and configure <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xvdWlzQmFycmFucXVlaXJvL2hleG8tYWxnb2xpYXNlYXJjaA==\">Hexo Algoliasearch<i class=\"fa fa-external-link-alt\"></i></span> in your Hexo directory.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> hexo-site</span><br><span class=\"line\">$ npm install hexo-algoliasearch</span><br></pre></td></tr></table></figure>\n\n<p>In your <mark class=\"label info\">site config file</mark>, add the following configuration and replace the <code>Application ID</code>, <code>Search-only API key</code>, <code>High-privilege API key</code> and <code>indexName</code> with corresponding fields obtained at Algolia.</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">algolia:</span></span><br><span class=\"line\">  <span class=\"attr\">appId:</span> <span class=\"string\">&quot;Application ID&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">apiKey:</span> <span class=\"string\">&quot;Search-only API key&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">adminApiKey:</span> <span class=\"string\">&quot;High-privilege API key&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">indexName:</span> <span class=\"string\">&quot;indexName&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">chunkSize:</span> <span class=\"number\">5000</span></span><br><span class=\"line\">  <span class=\"attr\">fields:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">content:strip:truncate,0,500</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">excerpt:strip</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">gallery</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">permalink</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">photos</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">slug</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tags</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">title</span></span><br></pre></td></tr></table></figure>\n\n<p>Run the following command to upload index data, keep a weather eye out the output of the command.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo algolia</span><br></pre></td></tr></table></figure></div></div></div></div><div class=\"tab-pane\" id=\"algolia-search-4\"><p>In <mark class=\"label primary\">theme config file</mark>, turn on <code>enable</code> of <code>algolia_search</code>. At the same time, you need to <strong>turn off other search plugins</strong> like Local Search. You can also adjust the text in <code>labels</code> according to your needs.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Algolia Search</span></span><br><span class=\"line\"><span class=\"attr\">algolia_search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">hits:</span></span><br><span class=\"line\">    <span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"Local-Search\"><a href=\"#Local-Search\" class=\"headerlink\" title=\"Local Search\"></a>Local Search</h3><p>Local search does not require any external 3rd-party services and can be extra indexed by search engines. This search method is recommended for most users.</p>\n<div class=\"tabs\" id=\"local-search\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#local-search-1\">Installation →</a></li><li class=\"tab\"><a href=\"#local-search-2\">Hexo Config →</a></li><li class=\"tab\"><a href=\"#local-search-3\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"local-search-1\"><p>Install <code>hexo-generator-searchdb</code> by executing the following command in <mark class=\"label info\">site root dir</mark>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"local-search-2\"><p>Edit <mark class=\"label info\">site config file</mark> and add following content:</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"local-search-3\"><p>Edit <mark class=\"label primary\">theme config file</mark> to enable Local Search:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Local search</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, trigger search by changing input.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># Show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># Unescape html strings to the readable one.</span></span><br><span class=\"line\">  <span class=\"attr\">unescape:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Preload the search data when the page loads.</span></span><br><span class=\"line\">  <span class=\"attr\">preload:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"Swiftype-Search\"><a href=\"#Swiftype-Search\" class=\"headerlink\" title=\"Swiftype Search\"></a>Swiftype Search</h3><div class=\"tabs\" id=\"swiftype-search\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#swiftype-search-1\">Sign up →</a></li><li class=\"tab\"><a href=\"#swiftype-search-2\">Create Search Engine →</a></li><li class=\"tab\"><a href=\"#swiftype-search-3\">Customize and Enable Search →</a></li><li class=\"tab\"><a href=\"#swiftype-search-4\">Get Key →</a></li><li class=\"tab\"><a href=\"#swiftype-search-5\">Search Field →</a></li><li class=\"tab\"><a href=\"#swiftype-search-6\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"swiftype-search-1\"><p>Go to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zd2lmdHlwZS5jb20vdXNlcnMvc2lnbl91cA==\">Swiftype Sign Page<i class=\"fa fa-external-link-alt\"></i></span> to sign up.<br><img src=\"/images/docs/swiftype-1.png\" alt=\"Swiftype Sign up\" loading=\"lazy\"></p></div><div class=\"tab-pane\" id=\"swiftype-search-2\"><p>After signing up create a new search engine and follow instructions.<br><img src=\"/images/docs/swiftype-2.png\" alt=\"Swiftype Create Search Engine\" loading=\"lazy\"></p></div><div class=\"tab-pane\" id=\"swiftype-search-3\"><p>After creating choose <code>Integrate</code> → <code>Install Search</code> in the menu to customize with instructions. Then click <code>Active</code> button finally.<br><img src=\"/images/docs/swiftype-3.png\" alt=\"Swiftype Customize And Enable Search\" loading=\"lazy\"></p></div><div class=\"tab-pane\" id=\"swiftype-search-4\"><p>Back to <code>INSTALL CODE</code> and copy your <code>swiftype_key</code>.<br><img src=\"/images/docs/swiftype-4.png\" alt=\"Swiftype Get Key\" loading=\"lazy\"></p></div><div class=\"tab-pane\" id=\"swiftype-search-5\"><p>Click <code>Change Configuration</code> → <code>Search Field</code>, then follow the instructions.<br><img src=\"/images/docs/swiftype-5.png\" alt=\"Swiftype Search Field\" loading=\"lazy\"></p></div><div class=\"tab-pane\" id=\"swiftype-search-6\"><p>Edit <mark class=\"label primary\">theme config file</mark> and fill section <code>swiftype_key</code> with value of your key gets:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Swiftype Search API Key</span></span><br><span class=\"line\"><span class=\"attr\">swiftype_key:</span> <span class=\"string\">xxxxxxxxx</span></span><br></pre></td></tr></table></figure></div></div></div>\n"},{"title":"Statistics and Analytics","url":"/blog-next/docs/third-party-services/statistics-and-analytics.html","content":"<div class=\"note warning\"><p>NexT will not send record to analytics service provider as long as the page&#39;s host name does not match <code>url</code> option set in <mark class=\"label info\">site config file</mark>. This will prevent local debugging from polluting analytics. Make sure you have configured <code>url</code> correctly, otherwise these statistics tools may not work as expected.</p>\n</div>\n\n<h3 id=\"Analytics-Tools\"><a href=\"#Analytics-Tools\" class=\"headerlink\" title=\"Analytics Tools\"></a>Analytics Tools</h3><h4 id=\"Google-Analytics\"><a href=\"#Google-Analytics\" class=\"headerlink\" title=\"Google Analytics\"></a>Google Analytics</h4><ol>\n<li><p>Create an account and log into <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbmFseXRpY3MuZ29vZ2xlLmNvbS8=\">Google Analytics<i class=\"fa fa-external-link-alt\"></i></span>. <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vYW5hbHl0aWNzLz9obD1lbiN0b3BpYz0zNTQ0OTA2\">More detailed documentation<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Edit <mark class=\"label primary\">theme config file</mark> and fill <code>tracking_id</code> under section <code>google_analytics</code> with your Google track ID. Google track ID always starts with <code>UA-</code>.</p>\n <figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">google_analytics:</span></span><br><span class=\"line\">  <span class=\"attr\">tracking_id:</span> <span class=\"string\">UA-XXXXXXXX-X</span></span><br><span class=\"line\">  <span class=\"attr\">only_pageview:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>When field <code>only_pageview</code> is set to true, NexT will only send <code>pageview</code> event to Google Analytics.<br>The benefit of using this instead of <code>only_pageview: false</code> is reduce a external script on your site, which will give you better performance but no complete analytics function.</p>\n</li>\n</ol>\n<h4 id=\"Baidu-Analytics-China\"><a href=\"#Baidu-Analytics-China\" class=\"headerlink\" title=\"Baidu Analytics (China)\"></a>Baidu Analytics (China)</h4><div class=\"tabs\" id=\"baidu-analytics\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#baidu-analytics-1\">Login →</a></li><li class=\"tab\"><a href=\"#baidu-analytics-2\">Script ID →</a></li><li class=\"tab\"><a href=\"#baidu-analytics-3\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"baidu-analytics-1\"><p>Login to <span class=\"exturl\" data-url=\"aHR0cHM6Ly90b25namkuYmFpZHUuY29tLw==\">Baidu Analytics<i class=\"fa fa-external-link-alt\"></i></span> and locate to site code getting page.</p></div><div class=\"tab-pane\" id=\"baidu-analytics-2\"><p>Copy the script ID after <code>hm.js?</code>, like the following picture:<br><img src=\"/images/docs/analytics-baidu-id.png\" alt=\"NexT Baidu Analytics\" loading=\"lazy\"></p></div><div class=\"tab-pane\" id=\"baidu-analytics-3\"><p>Edit <mark class=\"label primary\">theme config file</mark> and change section <code>baidu_analytics</code> to your script ID.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Baidu Analytics ID</span></span><br><span class=\"line\"><span class=\"attr\">baidu_analytics:</span> <span class=\"string\">your_id</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h4 id=\"Growingio-Analytics\"><a href=\"#Growingio-Analytics\" class=\"headerlink\" title=\"Growingio Analytics\"></a>Growingio Analytics</h4><p>Official documentation: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdyb3dpbmdpby5jb20vc2RrLWludGVncmF0aW9uL3Nkay0yLngtZG9jcy8=\">https://docs.growingio.com/sdk-integration/sdk-2.x-docs/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h4 id=\"CNZZ-Analytics-China\"><a href=\"#CNZZ-Analytics-China\" class=\"headerlink\" title=\"CNZZ Analytics (China)\"></a>CNZZ Analytics (China)</h4><ol>\n<li>Create an account and log into <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudW1lbmcuY29tLw==\">CNZZ Analytics<i class=\"fa fa-external-link-alt\"></i></span>. <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIudW1lbmcuY29tL2RvY3MvNjc5NjMvZGV0YWlsLzY4NjA5\">More detailed documentation<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Set the value of section <code>cnzz_siteid</code> in <mark class=\"label primary\">theme config file</mark> to your CNZZ site ID. You can find this ID in link or the auto-generated script. <figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CNZZ count</span></span><br><span class=\"line\"><span class=\"comment\">#cnzz_siteid:</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<div class=\"note info\"><p>The script will show «Webmaster Statistics» and it&#39;s not elegant, so we used a <code>display: none;</code> to hide it.</p>\n</div>\n\n<h3 id=\"Counting-Tools\"><a href=\"#Counting-Tools\" class=\"headerlink\" title=\"Counting Tools\"></a>Counting Tools</h3><h4 id=\"LeanCloud-China\"><a href=\"#LeanCloud-China\" class=\"headerlink\" title=\"LeanCloud (China)\"></a>LeanCloud (China)</h4><p>Adding article reading times counting to NexT theme. Documentation how to set the counter up and running safely aviable in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by1sZWFuY2xvdWQtY291bnRlci1zZWN1cml0eQ==\">hexo-leancloud-counter-security<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<div class=\"tabs\" id=\"leancloud-counter\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#leancloud-counter-1\">Installation →</a></li><li class=\"tab\"><a href=\"#leancloud-counter-2\">Hexo Config →</a></li><li class=\"tab\"><a href=\"#leancloud-counter-3\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"leancloud-counter-1\"><p>Install <code>hexo-leancloud-counter-security</code> by executing the following command in <mark class=\"label info\">site root dir</mark>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-leancloud-counter-security</span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"leancloud-counter-2\"><p>Edit <mark class=\"label info\">site config file</mark> and add following content:</p>\n<figure class=\"highlight yml\"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">leancloud_counter_security:</span></span><br><span class=\"line\">  <span class=\"attr\">enable_sync:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">app_id:</span> <span class=\"string\">&lt;your</span> <span class=\"string\">app</span> <span class=\"string\">id&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">app_key:</span> <span class=\"string\">&lt;your</span> <span class=\"string\">app</span> <span class=\"string\">key&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">username:</span> <span class=\"string\">&lt;your</span> <span class=\"string\">username&gt;</span> <span class=\"comment\"># Will be asked while deploying if is left blank</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">&lt;your</span> <span class=\"string\">password&gt;</span> <span class=\"comment\"># Recommmended to be left blank. Will be asked while deploying if is left blank</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"leancloud-counter-3\"><p>Edit <mark class=\"label primary\">theme config file</mark> and fill options under <code>leancloud_visitors</code> section.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Show number of visitors to each article.</span></span><br><span class=\"line\"><span class=\"comment\"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class=\"line\"><span class=\"attr\">leancloud_visitors:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">app_id:</span> <span class=\"comment\">#&lt;app_id&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">app_key:</span> <span class=\"comment\">#&lt;app_key&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Required for apps from CN region</span></span><br><span class=\"line\">  <span class=\"attr\">server_url:</span> <span class=\"comment\"># &lt;your server url&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class=\"line\">  <span class=\"comment\"># If you don&#x27;t care about security in lc counter and just want to use it directly</span></span><br><span class=\"line\">  <span class=\"comment\"># (without hexo-leancloud-counter-security plugin), set the `security` to `false`.</span></span><br><span class=\"line\">  <span class=\"attr\">security:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h4 id=\"Firebase\"><a href=\"#Firebase\" class=\"headerlink\" title=\"Firebase\"></a>Firebase</h4><p>Firebase Analytics provides the functionality of visitor statistics.</p>\n<div class=\"tabs\" id=\"firestore\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#firestore-1\">Get apiKey & projectId →</a></li><li class=\"tab\"><a href=\"#firestore-2\">NexT Config</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"firestore-1\"><p>Login to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb25zb2xlLmZpcmViYXNlLmdvb2dsZS5jb20vdS8wLw==\">Firebase<i class=\"fa fa-external-link-alt\"></i></span> to get apiKey and projectId. <span class=\"exturl\" data-url=\"aHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvZmlyZXN0b3JlLw==\">More detailed documentation<i class=\"fa fa-external-link-alt\"></i></span></p></div><div class=\"tab-pane\" id=\"firestore-2\"><p>Edit <mark class=\"label primary\">theme config file</mark> and add or change <code>firestore</code> section:</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">firestore:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">collection:</span> <span class=\"string\">articles</span> <span class=\"comment\">#required, a string collection name to access firestore database</span></span><br><span class=\"line\">  <span class=\"attr\">apiKey:</span> <span class=\"comment\">#required</span></span><br><span class=\"line\">  <span class=\"attr\">projectId:</span> <span class=\"comment\">#required</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<h4 id=\"Busuanzi-Counting-China\"><a href=\"#Busuanzi-Counting-China\" class=\"headerlink\" title=\"Busuanzi Counting (China)\"></a>Busuanzi Counting (China)</h4><div class=\"tabs\" id=\"busuanzi-counting\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#busuanzi-counting-1\">Global Settings →</a></li><li class=\"tab\"><a href=\"#busuanzi-counting-2\">Site UV Settings →</a></li><li class=\"tab\"><a href=\"#busuanzi-counting-3\">Site PV Settings →</a></li><li class=\"tab\"><a href=\"#busuanzi-counting-4\">Per-page PV Settings</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"busuanzi-counting-1\"><p>Edit <code>busuanzi_count</code> option in <mark class=\"label primary\">theme config file</mark>.<br>When <code>enable: true</code>, global setting is enabled. If <code>total_visitors</code>, <code>total_views</code>, <code>post_views</code> are all <code>false</code>, Busuanzi only counts but never shows.</p></div><div class=\"tab-pane\" id=\"busuanzi-counting-2\"><p>When <code>total_visitors: true</code>, it will show site UV in footer. You can also use font-awesome by setting <code>total_visitors_icon</code> to the name of the icon.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi_count:</span></span><br><span class=\"line\">  <span class=\"attr\">total_visitors:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_visitors_icon:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"busuanzi-counting-3\"><p>When <code>total_views: true</code>, it will show site UV in footer. You can also use font-awesome by setting <code>total_views_icon</code> to the name of the icon.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi_count:</span></span><br><span class=\"line\">  <span class=\"attr\">total_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_views_icon:</span> <span class=\"string\">fa</span> <span class=\"string\">fa-eye</span></span><br></pre></td></tr></table></figure></div><div class=\"tab-pane\" id=\"busuanzi-counting-4\"><p>When <code>post_views: true</code>, it will show page PV in post meta. You can also use font-awesome by setting <code>post_views_icon</code> to the name of the icon.</p>\n<figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi_count:</span></span><br><span class=\"line\">  <span class=\"attr\">post_views:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">post_views_icon:</span> <span class=\"string\">far</span> <span class=\"string\">fa-eye</span></span><br></pre></td></tr></table></figure></div></div></div>\n"},{"title":"Tabs","url":"/blog-next/docs/tag-plugins/tabs.html","content":"<h3 id=\"Settings\"><a href=\"#Settings\" class=\"headerlink\" title=\"Settings\"></a>Settings</h3><figure class=\"highlight yml\"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tabs:</span></span><br><span class=\"line\">  <span class=\"attr\">transition:</span></span><br><span class=\"line\">    <span class=\"attr\">tabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><figure class=\"highlight md\"><figcaption><span>tabs.js</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Unique name, [index] %&#125;</span><br><span class=\"line\">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class=\"line\">Any content (support inline tags too).</span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Unique name   : Unique name of tabs block tag without comma.</span><br><span class=\"line\"><span class=\"code\">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span></span><br><span class=\"line\"><span class=\"code\">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class=\"line\"><span class=\"code\">                Only for current url of post/page must be unique!</span></span><br><span class=\"line\"><span class=\"code\">[index]       : Index number of active tab.</span></span><br><span class=\"line\"><span class=\"code\">                If not specified, first tab (1) will be selected.</span></span><br><span class=\"line\"><span class=\"code\">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.</span></span><br><span class=\"line\"><span class=\"code\">[Tab caption] : Caption of current tab.</span></span><br><span class=\"line\"><span class=\"code\">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class=\"line\"><span class=\"code\">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.</span></span><br><span class=\"line\"><span class=\"code\">[@icon]       : Font Awesome icon name (without &#x27;fa-&#x27; at the begining).</span></span><br><span class=\"line\"><span class=\"code\">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; is the same as &#x27;Tab caption@icon&#x27;.</span></span><br><span class=\"line\"><span class=\"code\">                Optional parameter.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs First unique name %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"first-unique-name\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#first-unique-name-1\">First unique name 1</a></li><li class=\"tab\"><a href=\"#first-unique-name-2\">First unique name 2</a></li><li class=\"tab\"><a href=\"#first-unique-name-3\">First unique name 3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"first-unique-name-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-pane\" id=\"first-unique-name-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-pane\" id=\"first-unique-name-3\"><p><strong>This is Tab 3.</strong></p></div></div></div>\n\n<h4 id=\"Tabs-with-3rd-tab-selected\"><a href=\"#Tabs-with-3rd-tab-selected\" class=\"headerlink\" title=\"Tabs with 3rd tab selected\"></a>Tabs with 3rd tab selected</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Second unique name, 3 %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"second-unique-name\"><ul class=\"nav-tabs\"><li class=\"tab\"><a href=\"#second-unique-name-1\">Second unique name 1</a></li><li class=\"tab\"><a href=\"#second-unique-name-2\">Second unique name 2</a></li><li class=\"tab active\"><a href=\"#second-unique-name-3\">Second unique name 3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane\" id=\"second-unique-name-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-pane\" id=\"second-unique-name-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-pane active\" id=\"second-unique-name-3\"><p><strong>This is Tab 3.</strong></p></div></div></div>\n\n<h4 id=\"Tabs-with-no-tab-selected\"><a href=\"#Tabs-with-no-tab-selected\" class=\"headerlink\" title=\"Tabs with no tab selected\"></a>Tabs with no tab selected</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Third unique name, -1 %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"third-unique-name\"><ul class=\"nav-tabs\"><li class=\"tab\"><a href=\"#third-unique-name-1\">Third unique name 1</a></li><li class=\"tab\"><a href=\"#third-unique-name-2\">Third unique name 2</a></li><li class=\"tab\"><a href=\"#third-unique-name-3\">Third unique name 3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane\" id=\"third-unique-name-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-pane\" id=\"third-unique-name-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-pane\" id=\"third-unique-name-3\"><p><strong>This is Tab 3.</strong></p></div></div></div>\n\n<h4 id=\"Tabs-with-custom-labels\"><a href=\"#Tabs-with-custom-labels\" class=\"headerlink\" title=\"Tabs with custom labels\"></a>Tabs with custom labels</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Fourth unique name %&#125;</span><br><span class=\"line\">&lt;!-- tab Solution 1 --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab Solution 2 --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab Solution 3 --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"fourth-unique-name\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#fourth-unique-name-1\">Solution 1</a></li><li class=\"tab\"><a href=\"#fourth-unique-name-2\">Solution 2</a></li><li class=\"tab\"><a href=\"#fourth-unique-name-3\">Solution 3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"fourth-unique-name-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-pane\" id=\"fourth-unique-name-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-pane\" id=\"fourth-unique-name-3\"><p><strong>This is Tab 3.</strong></p></div></div></div>\n\n<h4 id=\"Tabs-with-icons-only\"><a href=\"#Tabs-with-icons-only\" class=\"headerlink\" title=\"Tabs with icons only\"></a>Tabs with icons only</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Fifth unique name %&#125;</span><br><span class=\"line\">&lt;!-- tab @text-width --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab @font --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab @bold --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"fifth-unique-name\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#fifth-unique-name-1\"><i class=\"fa fa-text-width\"></i></a></li><li class=\"tab\"><a href=\"#fifth-unique-name-2\"><i class=\"fa fa-font\"></i></a></li><li class=\"tab\"><a href=\"#fifth-unique-name-3\"><i class=\"fa fa-bold\"></i></a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"fifth-unique-name-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-pane\" id=\"fifth-unique-name-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-pane\" id=\"fifth-unique-name-3\"><p><strong>This is Tab 3.</strong></p></div></div></div>\n\n<h4 id=\"Tabs-with-icons-and-labels\"><a href=\"#Tabs-with-icons-and-labels\" class=\"headerlink\" title=\"Tabs with icons and labels\"></a>Tabs with icons and labels</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Sixth unique name %&#125;</span><br><span class=\"line\">&lt;!-- tab Solution 1@text-width --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab Solution 2 @font --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab Solution 3@bold --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"sixth-unique-name\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#sixth-unique-name-1\"><i class=\"fa fa-text-width\"></i>Solution 1</a></li><li class=\"tab\"><a href=\"#sixth-unique-name-2\"><i class=\"fa fa-font\"></i>Solution 2</a></li><li class=\"tab\"><a href=\"#sixth-unique-name-3\"><i class=\"fa fa-bold\"></i>Solution 3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"sixth-unique-name-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-pane\" id=\"sixth-unique-name-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-pane\" id=\"sixth-unique-name-3\"><p><strong>This is Tab 3.</strong></p></div></div></div>\n\n<h4 id=\"Tabs-permalinks-test\"><a href=\"#Tabs-permalinks-test\" class=\"headerlink\" title=\"Tabs permalinks test\"></a>Tabs permalinks test</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">Permalink for &gt; [<span class=\"string\">Tab one</span>](<span class=\"link\">#tab-one</span>).</span><br><span class=\"line\">Permalink for &gt; [<span class=\"string\">Tab one 1</span>](<span class=\"link\">#tab-one-1</span>).</span><br><span class=\"line\">Permalink for &gt; [<span class=\"string\">Tab one 2</span>](<span class=\"link\">#tab-one-2</span>).</span><br><span class=\"line\">Permalink for &gt; [<span class=\"string\">Tab one 3</span>](<span class=\"link\">#tab-one-3</span>).</span><br><span class=\"line\"></span><br><span class=\"line\">Permalink for &gt; [<span class=\"string\">Tab two</span>](<span class=\"link\">#tab-two</span>).</span><br><span class=\"line\">Permalink for &gt; [<span class=\"string\">Tab two 1</span>](<span class=\"link\">#tab-two-1</span>).</span><br><span class=\"line\">Permalink for &gt; [<span class=\"string\">Tab two 2</span>](<span class=\"link\">#tab-two-2</span>).</span><br><span class=\"line\">Permalink for &gt; [<span class=\"string\">Tab two 3</span>](<span class=\"link\">#tab-two-3</span>).</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% tabs Tab one %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% tabs Tab two %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 3.**</span></span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Permalink for &gt; <a href=\"#tab-one\">Tab one</a>.<br>Permalink for &gt; <a href=\"#tab-one-1\">Tab one 1</a>.<br>Permalink for &gt; <a href=\"#tab-one-2\">Tab one 2</a>.<br>Permalink for &gt; <a href=\"#tab-one-3\">Tab one 3</a>.</p>\n<p>Permalink for &gt; <a href=\"#tab-two\">Tab two</a>.<br>Permalink for &gt; <a href=\"#tab-two-1\">Tab two 1</a>.<br>Permalink for &gt; <a href=\"#tab-two-2\">Tab two 2</a>.<br>Permalink for &gt; <a href=\"#tab-two-3\">Tab two 3</a>.</p>\n<div class=\"tabs\" id=\"tab-one\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#tab-one-1\">Tab one 1</a></li><li class=\"tab\"><a href=\"#tab-one-2\">Tab one 2</a></li><li class=\"tab\"><a href=\"#tab-one-3\">Tab one 3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"tab-one-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-pane\" id=\"tab-one-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-pane\" id=\"tab-one-3\"><p><strong>This is Tab 3.</strong></p></div></div></div>\n\n<div class=\"tabs\" id=\"tab-two\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#tab-two-1\">Tab two 1</a></li><li class=\"tab\"><a href=\"#tab-two-2\">Tab two 2</a></li><li class=\"tab\"><a href=\"#tab-two-3\">Tab two 3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"tab-two-1\"><p><strong>This is Tab 1.</strong></p></div><div class=\"tab-pane\" id=\"tab-two-2\"><p><strong>This is Tab 2.</strong></p></div><div class=\"tab-pane\" id=\"tab-two-3\"><p><strong>This is Tab 3.</strong></p></div></div></div>\n\n<h4 id=\"Tabs-with-other-tags\"><a href=\"#Tabs-with-other-tags\" class=\"headerlink\" title=\"Tabs with other tags\"></a>Tabs with other tags</h4><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Tags %&#125;</span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 1.**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> One</span><br><span class=\"line\"><span class=\"bullet\">2.</span> Two</span><br><span class=\"line\"><span class=\"bullet\">3.</span> Three</span><br><span class=\"line\"></span><br><span class=\"line\">Indented code block:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"code\">    nano /etc</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">Tagged code block:</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% code %&#125;</span><br><span class=\"line\">code tag</span><br><span class=\"line\">code tag</span><br><span class=\"line\">code tag</span><br><span class=\"line\">&#123;% endcode %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note default %&#125;</span><br><span class=\"line\">Note default tag.</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br><span class=\"line\">&lt;!-- endtab --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- tab --&gt;</span><br><span class=\"line\"><span class=\"strong\">**This is Tab 2.**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">*</span> Five</span><br><span class=\"line\"><span class=\"bullet\">*</span> Six</span><br><span class=\"line\"><span class=\"bullet\">*</span> Seven</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note primary %&#125;</span><br><span class=\"line\">&#123;% youtube Kt7u5kr<span class=\"emphasis\">_P5o %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endnote %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- endtab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- tab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">**This is Tab 3.**</span></span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% subtabs Sub Tabs %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- tab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">**This is Sub Tab 1.**</span></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% note success %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% note warning %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endnote %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endnote %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- endtab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- tab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">**This is Sub Tab 2.**</span></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% note success %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% note danger %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endnote %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endnote %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- endtab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- tab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">**This is Sub Tab 3.**</span></span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% subtabs Sub-Sub Tabs %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- tab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">**This is Sub-Sub Tab 1 of Sub Tab 3.**</span></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% note success %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endnote %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- endtab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- tab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">**This is Sub-Sub Tab 2 of Sub Tab 3.**</span></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% note success %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% note warning %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endnote %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endnote %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- endtab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- tab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">**This is Sub-Sub Tab 3 of Sub Tab 3.**</span></span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% note success %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% note warning %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% note danger %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endnote %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endnote %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endnote %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- endtab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endsubtabs %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- endtab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endsubtabs %&#125;</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">&lt;!-- endtab --&gt;</span></span><br><span class=\"line\"><span class=\"emphasis\">&#123;% endtabs %&#125;</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"tags\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#tags-1\">Tags 1</a></li><li class=\"tab\"><a href=\"#tags-2\">Tags 2</a></li><li class=\"tab\"><a href=\"#tags-3\">Tags 3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"tags-1\"><p><strong>This is Tab 1.</strong></p>\n<ol>\n<li>One</li>\n<li>Two</li>\n<li>Three</li>\n</ol>\n<p>Indented code block:</p>\n<pre><code>nano /etc\n</code></pre>\n<p>Tagged code block:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">code tag</span><br><span class=\"line\">code tag</span><br><span class=\"line\">code tag</span><br></pre></td></tr></table></figure>\n\n<div class=\"note default\"><p>Note default tag.</p>\n</div></div><div class=\"tab-pane\" id=\"tags-2\"><p><strong>This is Tab 2.</strong></p>\n<ul>\n<li>Five</li>\n<li>Six</li>\n<li>Seven</li>\n</ul>\n<div class=\"note primary\"><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/Kt7u5kr_P5o\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></div></div><div class=\"tab-pane\" id=\"tags-3\"><p><strong>This is Tab 3.</strong></p>\n<div class=\"tabs\" id=\"sub-tabs\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#sub-tabs-1\">Sub Tabs 1</a></li><li class=\"tab\"><a href=\"#sub-tabs-2\">Sub Tabs 2</a></li><li class=\"tab\"><a href=\"#sub-tabs-3\">Sub Tabs 3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"sub-tabs-1\"><p><strong>This is Sub Tab 1.</strong></p>\n<div class=\"note success\"><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</p>\n<div class=\"note warning\"><p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</p>\n</div>\n\n<p>Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</p>\n</div></div><div class=\"tab-pane\" id=\"sub-tabs-2\"><p><strong>This is Sub Tab 2.</strong></p>\n<div class=\"note success\"><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</p>\n<p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</p>\n<div class=\"note danger\"><p>Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</p>\n</div></div></div><div class=\"tab-pane\" id=\"sub-tabs-3\"><p><strong>This is Sub Tab 3.</strong></p>\n<div class=\"tabs\" id=\"sub-sub-tabs\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#sub-sub-tabs-1\">Sub-Sub Tabs 1</a></li><li class=\"tab\"><a href=\"#sub-sub-tabs-2\">Sub-Sub Tabs 2</a></li><li class=\"tab\"><a href=\"#sub-sub-tabs-3\">Sub-Sub Tabs 3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"sub-sub-tabs-1\"><p><strong>This is Sub-Sub Tab 1 of Sub Tab 3.</strong></p>\n<div class=\"note success\"><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</p>\n<p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</p>\n<p>Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</p>\n</div></div><div class=\"tab-pane\" id=\"sub-sub-tabs-2\"><p><strong>This is Sub-Sub Tab 2 of Sub Tab 3.</strong></p>\n<div class=\"note success\"><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</p>\n<div class=\"note warning\"><p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</p>\n<p>Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</p>\n</div>\n</div></div><div class=\"tab-pane\" id=\"sub-sub-tabs-3\"><p><strong>This is Sub-Sub Tab 3 of Sub Tab 3.</strong></p>\n<div class=\"note success\"><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</p>\n<div class=\"note warning\"><p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</p>\n<div class=\"note danger\"><p>Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</p>\n</div>\n</div>\n</div></div></div></div></div></div></div></div></div></div>\n"}]